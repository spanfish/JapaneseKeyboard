// Copyright 2009 Google Inc.  All Rights Reserved.
// Author: mukai
//
// This file is automatically generated by
// generate_maping.py.
// Do not edit directly and do not include this from any file other
// than KeyCodeMap.mm

namespace {
static map<unsigned short, const char *> *kKanaMap = NULL;
static map<unsigned short, const char *> *kKanaMapShift = NULL;
static once_t kOnceForKanaMap = MOZC_ONCE_INIT;
void InitKanaMap() {
  if (kKanaMap != NULL || kKanaMapShift != NULL) {
    return;
  }
  kKanaMap = new(nothrow)map<unsigned short, const char *>;
  if (kKanaMap == NULL) {
    return;
  }
  kKanaMapShift = new(nothrow)map<unsigned short, const char *>;
  if (kKanaMapShift == NULL) {
    delete kKanaMap;
    kKanaMap = NULL;
    return;
  }

  (*kKanaMap)[kVK_ANSI_Grave] = "\xe3\x82\x8d";
  (*kKanaMap)[kVK_ANSI_1] = "\xe3\x81\xac";
  (*kKanaMap)[kVK_ANSI_2] = "\xe3\x81\xb5";
  (*kKanaMap)[kVK_ANSI_3] = "\xe3\x81\x82";
  (*kKanaMapShift)[kVK_ANSI_3] = "\xe3\x81\x81";
  (*kKanaMap)[kVK_ANSI_4] = "\xe3\x81\x86";
  (*kKanaMapShift)[kVK_ANSI_4] = "\xe3\x81\x85";
  (*kKanaMap)[kVK_ANSI_5] = "\xe3\x81\x88";
  (*kKanaMapShift)[kVK_ANSI_5] = "\xe3\x81\x87";
  (*kKanaMap)[kVK_ANSI_6] = "\xe3\x81\x8a";
  (*kKanaMapShift)[kVK_ANSI_6] = "\xe3\x81\x89";
  (*kKanaMap)[kVK_ANSI_7] = "\xe3\x82\x84";
  (*kKanaMapShift)[kVK_ANSI_7] = "\xe3\x82\x83";
  (*kKanaMap)[kVK_ANSI_8] = "\xe3\x82\x86";
  (*kKanaMapShift)[kVK_ANSI_8] = "\xe3\x82\x85";
  (*kKanaMap)[kVK_ANSI_9] = "\xe3\x82\x88";
  (*kKanaMapShift)[kVK_ANSI_9] = "\xe3\x82\x87";
  (*kKanaMap)[kVK_ANSI_0] = "\xe3\x82\x8f";
  (*kKanaMapShift)[kVK_ANSI_0] = "\xe3\x82\x92";
  (*kKanaMap)[kVK_ANSI_Minus] = "\xe3\x81\xbb";
  (*kKanaMapShift)[kVK_ANSI_Minus] = "\xe3\x83\xbc";
  (*kKanaMap)[kVK_ANSI_Equal] = "\xe3\x81\xb8";
  (*kKanaMapShift)[kVK_ANSI_Equal] = "\xe3\x82\x91";
  (*kKanaMap)[kVK_JIS_Yen] = "\xe3\x83\xbc";
  (*kKanaMap)[kVK_ANSI_Q] = "\xe3\x81\x9f";
  (*kKanaMap)[kVK_ANSI_W] = "\xe3\x81\xa6";
  (*kKanaMap)[kVK_ANSI_E] = "\xe3\x81\x84";
  (*kKanaMapShift)[kVK_ANSI_E] = "\xe3\x81\x83";
  (*kKanaMap)[kVK_ANSI_R] = "\xe3\x81\x99";
  (*kKanaMap)[kVK_ANSI_T] = "\xe3\x81\x8b";
  (*kKanaMap)[kVK_ANSI_Y] = "\xe3\x82\x93";
  (*kKanaMap)[kVK_ANSI_U] = "\xe3\x81\xaa";
  (*kKanaMap)[kVK_ANSI_I] = "\xe3\x81\xab";
  (*kKanaMap)[kVK_ANSI_O] = "\xe3\x82\x89";
  (*kKanaMap)[kVK_ANSI_P] = "\xe3\x81\x9b";
  (*kKanaMap)[kVK_ANSI_LeftBracket] = "\xe3\x82\x9b";
  (*kKanaMap)[kVK_ANSI_RightBracket] = "\xe3\x82\x9c";
  (*kKanaMapShift)[kVK_ANSI_RightBracket] = "\xe3\x80\x8c";
  (*kKanaMap)[kVK_ANSI_A] = "\xe3\x81\xa1";
  (*kKanaMap)[kVK_ANSI_S] = "\xe3\x81\xa8";
  (*kKanaMap)[kVK_ANSI_D] = "\xe3\x81\x97";
  (*kKanaMap)[kVK_ANSI_F] = "\xe3\x81\xaf";
  (*kKanaMap)[kVK_ANSI_G] = "\xe3\x81\x8d";
  (*kKanaMap)[kVK_ANSI_H] = "\xe3\x81\x8f";
  (*kKanaMap)[kVK_ANSI_J] = "\xe3\x81\xbe";
  (*kKanaMap)[kVK_ANSI_K] = "\xe3\x81\xae";
  (*kKanaMap)[kVK_ANSI_L] = "\xe3\x82\x8a";
  (*kKanaMap)[kVK_ANSI_Semicolon] = "\xe3\x82\x8c";
  (*kKanaMap)[kVK_ANSI_Quote] = "\xe3\x81\x91";
  (*kKanaMapShift)[kVK_ANSI_Quote] = "\xe3\x83\xb6";
  (*kKanaMap)[kVK_ANSI_Backslash] = "\xe3\x82\x80";
  (*kKanaMapShift)[kVK_ANSI_Backslash] = "\xe3\x80\x8d";
  (*kKanaMap)[kVK_ANSI_Z] = "\xe3\x81\xa4";
  (*kKanaMapShift)[kVK_ANSI_Z] = "\xe3\x81\xa3";
  (*kKanaMap)[kVK_ANSI_X] = "\xe3\x81\x95";
  (*kKanaMap)[kVK_ANSI_C] = "\xe3\x81\x9d";
  (*kKanaMap)[kVK_ANSI_V] = "\xe3\x81\xb2";
  (*kKanaMapShift)[kVK_ANSI_V] = "\xe3\x82\x90";
  (*kKanaMap)[kVK_ANSI_B] = "\xe3\x81\x93";
  (*kKanaMap)[kVK_ANSI_N] = "\xe3\x81\xbf";
  (*kKanaMap)[kVK_ANSI_M] = "\xe3\x82\x82";
  (*kKanaMap)[kVK_ANSI_Comma] = "\xe3\x81\xad";
  (*kKanaMapShift)[kVK_ANSI_Comma] = "\xe3\x80\x81";
  (*kKanaMap)[kVK_ANSI_Period] = "\xe3\x82\x8b";
  (*kKanaMapShift)[kVK_ANSI_Period] = "\xe3\x80\x82";
  (*kKanaMap)[kVK_ANSI_Slash] = "\xe3\x82\x81";
  (*kKanaMapShift)[kVK_ANSI_Slash] = "\xe3\x83\xbb";
  (*kKanaMap)[kVK_JIS_Underscore] = "\xe3\x82\x8d";
  (*kKanaMap)[kVK_JIS_KeypadComma] = "\xe3\x80\x81";
  (*kKanaMap)[kVK_ANSI_KeypadMultiply] = "\x2a";
  (*kKanaMap)[kVK_ANSI_KeypadPlus] = "\x2b";
  (*kKanaMap)[kVK_ANSI_KeypadDivide] = "\x2f";
  (*kKanaMap)[kVK_ANSI_KeypadMinus] = "\x2d";
  (*kKanaMap)[kVK_ANSI_KeypadEquals] = "\x3d";
}
}  // anonymous namespace

