// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dictionary/user_dictionary_storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dictionary/user_dictionary_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace user_dictionary {

namespace {

const ::google::protobuf::Descriptor* UserDictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDictionary_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionary_Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionary_PosType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDictionaryStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionaryStorage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDictionaryCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionaryCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDictionaryCommandStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionaryCommandStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto() {
  protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dictionary/user_dictionary_storage.proto");
  GOOGLE_CHECK(file != NULL);
  UserDictionary_descriptor_ = file->message_type(0);
  static const int UserDictionary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, syncable_),
  };
  UserDictionary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDictionary_descriptor_,
      UserDictionary::default_instance_,
      UserDictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDictionary));
  UserDictionary_Entry_descriptor_ = UserDictionary_descriptor_->nested_type(0);
  static const int UserDictionary_Entry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, auto_registered_),
  };
  UserDictionary_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDictionary_Entry_descriptor_,
      UserDictionary_Entry::default_instance_,
      UserDictionary_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDictionary_Entry));
  UserDictionary_PosType_descriptor_ = UserDictionary_descriptor_->enum_type(0);
  UserDictionaryStorage_descriptor_ = file->message_type(1);
  static const int UserDictionaryStorage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, dictionaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, storage_type_),
  };
  UserDictionaryStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDictionaryStorage_descriptor_,
      UserDictionaryStorage::default_instance_,
      UserDictionaryStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDictionaryStorage));
  UserDictionaryStorage_StorageType_descriptor_ = UserDictionaryStorage_descriptor_->enum_type(0);
  UserDictionaryCommand_descriptor_ = file->message_type(2);
  static const int UserDictionaryCommand_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, dictionary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, entry_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, ensure_non_empty_storage_),
  };
  UserDictionaryCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDictionaryCommand_descriptor_,
      UserDictionaryCommand::default_instance_,
      UserDictionaryCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDictionaryCommand));
  UserDictionaryCommand_CommandType_descriptor_ = UserDictionaryCommand_descriptor_->enum_type(0);
  UserDictionaryCommandStatus_descriptor_ = file->message_type(3);
  static const int UserDictionaryCommandStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, obsolete_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, dictionary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, entry_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, entries_),
  };
  UserDictionaryCommandStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDictionaryCommandStatus_descriptor_,
      UserDictionaryCommandStatus::default_instance_,
      UserDictionaryCommandStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDictionaryCommandStatus));
  UserDictionaryCommandStatus_Status_descriptor_ = UserDictionaryCommandStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDictionary_descriptor_, &UserDictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDictionary_Entry_descriptor_, &UserDictionary_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDictionaryStorage_descriptor_, &UserDictionaryStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDictionaryCommand_descriptor_, &UserDictionaryCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDictionaryCommandStatus_descriptor_, &UserDictionaryCommandStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dictionary_2fuser_5fdictionary_5fstorage_2eproto() {
  delete UserDictionary::default_instance_;
  delete UserDictionary_reflection_;
  delete UserDictionary_Entry::default_instance_;
  delete UserDictionary_Entry_reflection_;
  delete UserDictionaryStorage::default_instance_;
  delete UserDictionaryStorage_reflection_;
  delete UserDictionaryCommand::default_instance_;
  delete UserDictionaryCommand_reflection_;
  delete UserDictionaryCommandStatus::default_instance_;
  delete UserDictionaryCommandStatus_reflection_;
}

void protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(dictionary/user_dictionary_storage.pro"
    "to\022\024mozc.user_dictionary\"\304\t\n\016UserDiction"
    "ary\022\r\n\002id\030\001 \001(\004:\0010\022\025\n\007enabled\030\002 \001(\010:\004tru"
    "e\022\016\n\004name\030\003 \001(\t:\000\022;\n\007entries\030\004 \003(\0132*.moz"
    "c.user_dictionary.UserDictionary.Entry\022\026"
    "\n\007removed\030\005 \001(\010:\005false\022\027\n\010syncable\030\006 \001(\010"
    ":\005false\032\255\001\n\005Entry\022\r\n\003key\030\001 \001(\t:\000\022\017\n\005valu"
    "e\030\002 \001(\t:\000\022\021\n\007comment\030\004 \001(\t:\000\0229\n\003pos\030\005 \001("
    "\0162,.mozc.user_dictionary.UserDictionary."
    "PosType\022\026\n\007removed\030\n \001(\010:\005false\022\036\n\017auto_"
    "registered\030\013 \001(\010:\005false\"\335\006\n\007PosType\022\010\n\004N"
    "OUN\020\001\022\020\n\014ABBREVIATION\020\002\022\023\n\017SUGGESTION_ON"
    "LY\020\003\022\017\n\013PROPER_NOUN\020\004\022\021\n\rPERSONAL_NAME\020\005"
    "\022\017\n\013FAMILY_NAME\020\006\022\016\n\nFIRST_NAME\020\007\022\025\n\021ORG"
    "ANIZATION_NAME\020\010\022\016\n\nPLACE_NAME\020\t\022!\n\035SA_I"
    "RREGULAR_CONJUGATION_NOUN\020\n\022\031\n\025ADJECTIVE"
    "_VERBAL_NOUN\020\013\022\n\n\006NUMBER\020\014\022\014\n\010ALPHABET\020\r"
    "\022\n\n\006SYMBOL\020\016\022\014\n\010EMOTICON\020\017\022\n\n\006ADVERB\020\020\022\026"
    "\n\022PRENOUN_ADJECTIVAL\020\021\022\017\n\013CONJUNCTION\020\022\022"
    "\020\n\014INTERJECTION\020\023\022\n\n\006PREFIX\020\024\022\022\n\016COUNTER"
    "_SUFFIX\020\025\022\022\n\016GENERIC_SUFFIX\020\026\022\026\n\022PERSON_"
    "NAME_SUFFIX\020\027\022\025\n\021PLACE_NAME_SUFFIX\020\030\022\022\n\016"
    "WA_GROUP1_VERB\020\031\022\022\n\016KA_GROUP1_VERB\020\032\022\022\n\016"
    "SA_GROUP1_VERB\020\033\022\022\n\016TA_GROUP1_VERB\020\034\022\022\n\016"
    "NA_GROUP1_VERB\020\035\022\022\n\016MA_GROUP1_VERB\020\036\022\022\n\016"
    "RA_GROUP1_VERB\020\037\022\022\n\016GA_GROUP1_VERB\020 \022\022\n\016"
    "BA_GROUP1_VERB\020!\022\022\n\016HA_GROUP1_VERB\020\"\022\017\n\013"
    "GROUP2_VERB\020#\022\024\n\020KURU_GROUP3_VERB\020$\022\024\n\020S"
    "URU_GROUP3_VERB\020%\022\024\n\020ZURU_GROUP3_VERB\020&\022"
    "\022\n\016RU_GROUP3_VERB\020\'\022\r\n\tADJECTIVE\020(\022\034\n\030SE"
    "NTENCE_ENDING_PARTICLE\020)\022\017\n\013PUNCTUATION\020"
    "*\022\026\n\022FREE_STANDING_WORD\020+\022\024\n\020SUPPRESSION"
    "_WORD\020,\"\351\001\n\025UserDictionaryStorage\022\022\n\007ver"
    "sion\030\001 \001(\005:\0010\022:\n\014dictionaries\030\002 \003(\0132$.mo"
    "zc.user_dictionary.UserDictionary\022W\n\014sto"
    "rage_type\030\n \001(\01627.mozc.user_dictionary.U"
    "serDictionaryStorage.StorageType:\010SNAPSH"
    "OT\"\'\n\013StorageType\022\014\n\010SNAPSHOT\020\001\022\n\n\006UPDAT"
    "E\020\002\"\226\006\n\025UserDictionaryCommand\022E\n\004type\030\001 "
    "\002(\01627.mozc.user_dictionary.UserDictionar"
    "yCommand.CommandType\022\022\n\nsession_id\030\002 \001(\004"
    "\022\025\n\rdictionary_id\030\003 \001(\004\022\027\n\017dictionary_na"
    "me\030\004 \001(\t\022\023\n\013entry_index\030\005 \003(\005\0229\n\005entry\030\006"
    " \001(\0132*.mozc.user_dictionary.UserDictiona"
    "ry.Entry\022\014\n\004data\030\007 \001(\t\022 \n\030ensure_non_emp"
    "ty_storage\030\010 \001(\010\"\361\003\n\013CommandType\022\020\n\014NO_O"
    "PERATION\020\000\022\021\n\rCLEAR_STORAGE\020\001\022\022\n\016CREATE_"
    "SESSION\020\002\022\022\n\016DELETE_SESSION\020\003\022\037\n\033SET_DEF"
    "AULT_DICTIONARY_NAME\020\004\022\025\n\021CHECK_UNDOABIL"
    "ITY\020\005\022\010\n\004UNDO\020\006\022\010\n\004LOAD\020\007\022\010\n\004SAVE\020\010\022!\n\035G"
    "ET_USER_DICTIONARY_NAME_LIST\020\t\022\022\n\016GET_EN"
    "TRY_SIZE\020\n\022\026\n\022OBSOLETE_GET_ENTRY\020\013\022%\n!CH"
    "ECK_NEW_DICTIONARY_AVAILABILITY\020\014\022\025\n\021CRE"
    "ATE_DICTIONARY\020\r\022\025\n\021DELETE_DICTIONARY\020\016\022"
    "\025\n\021RENAME_DICTIONARY\020\017\022 \n\034CHECK_NEW_ENTR"
    "Y_AVAILABILITY\020\020\022\r\n\tADD_ENTRY\020\021\022\016\n\nEDIT_"
    "ENTRY\020\022\022\020\n\014DELETE_ENTRY\020\023\022\017\n\013IMPORT_DATA"
    "\020\024\022\017\n\013GET_STORAGE\020\025\022\017\n\013GET_ENTRIES\020\026\"\364\010\n"
    "\033UserDictionaryCommandStatus\022H\n\006status\030\001"
    " \002(\01628.mozc.user_dictionary.UserDictiona"
    "ryCommandStatus.Status\022\022\n\nsession_id\030\002 \001"
    "(\004\022<\n\007storage\030\003 \001(\0132+.mozc.user_dictiona"
    "ry.UserDictionaryStorage\022B\n\016OBSOLETE_ent"
    "ry\030\004 \001(\0132*.mozc.user_dictionary.UserDict"
    "ionary.Entry\022\025\n\rdictionary_id\030\005 \001(\004\022\022\n\ne"
    "ntry_size\030\006 \001(\r\022;\n\007entries\030\007 \003(\0132*.mozc."
    "user_dictionary.UserDictionary.Entry\"\214\006\n"
    "\006Status\022#\n\037USER_DICTIONARY_COMMAND_SUCCE"
    "SS\020\001\022\021\n\rUNKNOWN_ERROR\020\002\022\023\n\017UNKNOWN_COMMA"
    "ND\020\003\022\024\n\020INVALID_ARGUMENT\020\004\022\026\n\022UNKNOWN_SE"
    "SSION_ID\020\005\022\022\n\016FILE_NOT_FOUND\020\006\022\027\n\023INVALI"
    "D_FILE_FORMAT\020\007\022\034\n\030FILE_SIZE_LIMIT_EXCEE"
    "DED\020\010\022\"\n\036DICTIONARY_SIZE_LIMIT_EXCEEDED\020"
    "\t\022\035\n\031ENTRY_SIZE_LIMIT_EXCEEDED\020\n\022\031\n\025UNKN"
    "OWN_DICTIONARY_ID\020\013\022\034\n\030ENTRY_INDEX_OUT_O"
    "F_RANGE\020\014\022\031\n\025DICTIONARY_NAME_EMPTY\020\r\022\034\n\030"
    "DICTIONARY_NAME_TOO_LONG\020\016\022.\n*DICTIONARY"
    "_NAME_CONTAINS_INVALID_CHARACTER\020\017\022\036\n\032DI"
    "CTIONARY_NAME_DUPLICATED\020\020\022\021\n\rREADING_EM"
    "PTY\020\021\022\024\n\020READING_TOO_LONG\020\022\022&\n\"READING_C"
    "ONTAINS_INVALID_CHARACTER\020\023\022\016\n\nWORD_EMPT"
    "Y\020\024\022\021\n\rWORD_TOO_LONG\020\025\022#\n\037WORD_CONTAINS_"
    "INVALID_CHARACTER\020\026\022\024\n\020INVALID_POS_TYPE\020"
    "\027\022\024\n\020COMMENT_TOO_LONG\020\030\022&\n\"COMMENT_CONTA"
    "INS_INVALID_CHARACTER\020\031\022\031\n\025IMPORT_TOO_MA"
    "NY_WORDS\020\032\022\032\n\026IMPORT_INVALID_ENTRIES\020\033\022\023"
    "\n\017NO_UNDO_HISTORY\020\034BL\n.org.mozc.android."
    "inputmethod.japanese.protobufB\032ProtoUser"
    "DictionaryStorage", 3537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dictionary/user_dictionary_storage.proto", &protobuf_RegisterTypes);
  UserDictionary::default_instance_ = new UserDictionary();
  UserDictionary_Entry::default_instance_ = new UserDictionary_Entry();
  UserDictionaryStorage::default_instance_ = new UserDictionaryStorage();
  UserDictionaryCommand::default_instance_ = new UserDictionaryCommand();
  UserDictionaryCommandStatus::default_instance_ = new UserDictionaryCommandStatus();
  UserDictionary::default_instance_->InitAsDefaultInstance();
  UserDictionary_Entry::default_instance_->InitAsDefaultInstance();
  UserDictionaryStorage::default_instance_->InitAsDefaultInstance();
  UserDictionaryCommand::default_instance_->InitAsDefaultInstance();
  UserDictionaryCommandStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dictionary_2fuser_5fdictionary_5fstorage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dictionary_2fuser_5fdictionary_5fstorage_2eproto {
  StaticDescriptorInitializer_dictionary_2fuser_5fdictionary_5fstorage_2eproto() {
    protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  }
} static_descriptor_initializer_dictionary_2fuser_5fdictionary_5fstorage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionary_PosType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionary_PosType_descriptor_;
}
bool UserDictionary_PosType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserDictionary_PosType UserDictionary::NOUN;
const UserDictionary_PosType UserDictionary::ABBREVIATION;
const UserDictionary_PosType UserDictionary::SUGGESTION_ONLY;
const UserDictionary_PosType UserDictionary::PROPER_NOUN;
const UserDictionary_PosType UserDictionary::PERSONAL_NAME;
const UserDictionary_PosType UserDictionary::FAMILY_NAME;
const UserDictionary_PosType UserDictionary::FIRST_NAME;
const UserDictionary_PosType UserDictionary::ORGANIZATION_NAME;
const UserDictionary_PosType UserDictionary::PLACE_NAME;
const UserDictionary_PosType UserDictionary::SA_IRREGULAR_CONJUGATION_NOUN;
const UserDictionary_PosType UserDictionary::ADJECTIVE_VERBAL_NOUN;
const UserDictionary_PosType UserDictionary::NUMBER;
const UserDictionary_PosType UserDictionary::ALPHABET;
const UserDictionary_PosType UserDictionary::SYMBOL;
const UserDictionary_PosType UserDictionary::EMOTICON;
const UserDictionary_PosType UserDictionary::ADVERB;
const UserDictionary_PosType UserDictionary::PRENOUN_ADJECTIVAL;
const UserDictionary_PosType UserDictionary::CONJUNCTION;
const UserDictionary_PosType UserDictionary::INTERJECTION;
const UserDictionary_PosType UserDictionary::PREFIX;
const UserDictionary_PosType UserDictionary::COUNTER_SUFFIX;
const UserDictionary_PosType UserDictionary::GENERIC_SUFFIX;
const UserDictionary_PosType UserDictionary::PERSON_NAME_SUFFIX;
const UserDictionary_PosType UserDictionary::PLACE_NAME_SUFFIX;
const UserDictionary_PosType UserDictionary::WA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::KA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::SA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::TA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::NA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::MA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::RA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::GA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::BA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::HA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::GROUP2_VERB;
const UserDictionary_PosType UserDictionary::KURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::SURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::ZURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::RU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::ADJECTIVE;
const UserDictionary_PosType UserDictionary::SENTENCE_ENDING_PARTICLE;
const UserDictionary_PosType UserDictionary::PUNCTUATION;
const UserDictionary_PosType UserDictionary::FREE_STANDING_WORD;
const UserDictionary_PosType UserDictionary::SUPPRESSION_WORD;
const UserDictionary_PosType UserDictionary::PosType_MIN;
const UserDictionary_PosType UserDictionary::PosType_MAX;
const int UserDictionary::PosType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserDictionary_Entry::kKeyFieldNumber;
const int UserDictionary_Entry::kValueFieldNumber;
const int UserDictionary_Entry::kCommentFieldNumber;
const int UserDictionary_Entry::kPosFieldNumber;
const int UserDictionary_Entry::kRemovedFieldNumber;
const int UserDictionary_Entry::kAutoRegisteredFieldNumber;
#endif  // !_MSC_VER

UserDictionary_Entry::UserDictionary_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDictionary_Entry::InitAsDefaultInstance() {
}

UserDictionary_Entry::UserDictionary_Entry(const UserDictionary_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDictionary_Entry::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = 1;
  removed_ = false;
  auto_registered_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionary_Entry::~UserDictionary_Entry() {
  SharedDtor();
}

void UserDictionary_Entry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void UserDictionary_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionary_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionary_Entry_descriptor_;
}

const UserDictionary_Entry& UserDictionary_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionary_Entry* UserDictionary_Entry::default_instance_ = NULL;

UserDictionary_Entry* UserDictionary_Entry::New() const {
  return new UserDictionary_Entry;
}

void UserDictionary_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    pos_ = 1;
    removed_ = false;
    auto_registered_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDictionary_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }

      // optional string comment = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionary_PosType_IsValid(value)) {
            set_pos(static_cast< ::mozc::user_dictionary::UserDictionary_PosType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_removed;
        break;
      }

      // optional bool removed = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
          set_has_removed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_auto_registered;
        break;
      }

      // optional bool auto_registered = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_registered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_registered_)));
          set_has_auto_registered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDictionary_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional string comment = 4 [default = ""];
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->comment(), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pos(), output);
  }

  // optional bool removed = 10 [default = false];
  if (has_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->removed(), output);
  }

  // optional bool auto_registered = 11 [default = false];
  if (has_auto_registered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_registered(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDictionary_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string comment = 4 [default = ""];
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pos(), target);
  }

  // optional bool removed = 10 [default = false];
  if (has_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->removed(), target);
  }

  // optional bool auto_registered = 11 [default = false];
  if (has_auto_registered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_registered(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDictionary_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1 [default = ""];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2 [default = ""];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string comment = 4 [default = ""];
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

    // optional bool removed = 10 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional bool auto_registered = 11 [default = false];
    if (has_auto_registered()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionary_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDictionary_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDictionary_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDictionary_Entry::MergeFrom(const UserDictionary_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_removed()) {
      set_removed(from.removed());
    }
    if (from.has_auto_registered()) {
      set_auto_registered(from.auto_registered());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDictionary_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary_Entry::CopyFrom(const UserDictionary_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary_Entry::IsInitialized() const {

  return true;
}

void UserDictionary_Entry::Swap(UserDictionary_Entry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(comment_, other->comment_);
    std::swap(pos_, other->pos_);
    std::swap(removed_, other->removed_);
    std::swap(auto_registered_, other->auto_registered_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDictionary_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionary_Entry_descriptor_;
  metadata.reflection = UserDictionary_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserDictionary::kIdFieldNumber;
const int UserDictionary::kEnabledFieldNumber;
const int UserDictionary::kNameFieldNumber;
const int UserDictionary::kEntriesFieldNumber;
const int UserDictionary::kRemovedFieldNumber;
const int UserDictionary::kSyncableFieldNumber;
#endif  // !_MSC_VER

UserDictionary::UserDictionary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDictionary::InitAsDefaultInstance() {
}

UserDictionary::UserDictionary(const UserDictionary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDictionary::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  enabled_ = true;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  removed_ = false;
  syncable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionary::~UserDictionary() {
  SharedDtor();
}

void UserDictionary::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UserDictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionary_descriptor_;
}

const UserDictionary& UserDictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionary* UserDictionary::default_instance_ = NULL;

UserDictionary* UserDictionary::New() const {
  return new UserDictionary;
}

void UserDictionary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    enabled_ = true;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    removed_ = false;
    syncable_ = false;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entries;
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entries;
        if (input->ExpectTag(40)) goto parse_removed;
        break;
      }

      // optional bool removed = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
          set_has_removed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_syncable;
        break;
      }

      // optional bool syncable = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syncable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &syncable_)));
          set_has_syncable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bool enabled = 2 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entries(i), output);
  }

  // optional bool removed = 5 [default = false];
  if (has_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->removed(), output);
  }

  // optional bool syncable = 6 [default = false];
  if (has_syncable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->syncable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->entries(i), target);
  }

  // optional bool removed = 5 [default = false];
  if (has_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->removed(), target);
  }

  // optional bool syncable = 6 [default = false];
  if (has_syncable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->syncable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDictionary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bool enabled = 2 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool removed = 5 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional bool syncable = 6 [default = false];
    if (has_syncable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDictionary::MergeFrom(const UserDictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_removed()) {
      set_removed(from.removed());
    }
    if (from.has_syncable()) {
      set_syncable(from.syncable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary::CopyFrom(const UserDictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary::IsInitialized() const {

  return true;
}

void UserDictionary::Swap(UserDictionary* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(enabled_, other->enabled_);
    std::swap(name_, other->name_);
    entries_.Swap(&other->entries_);
    std::swap(removed_, other->removed_);
    std::swap(syncable_, other->syncable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionary_descriptor_;
  metadata.reflection = UserDictionary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryStorage_StorageType_descriptor_;
}
bool UserDictionaryStorage_StorageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserDictionaryStorage_StorageType UserDictionaryStorage::SNAPSHOT;
const UserDictionaryStorage_StorageType UserDictionaryStorage::UPDATE;
const UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MIN;
const UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MAX;
const int UserDictionaryStorage::StorageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserDictionaryStorage::kVersionFieldNumber;
const int UserDictionaryStorage::kDictionariesFieldNumber;
const int UserDictionaryStorage::kStorageTypeFieldNumber;
#endif  // !_MSC_VER

UserDictionaryStorage::UserDictionaryStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDictionaryStorage::InitAsDefaultInstance() {
}

UserDictionaryStorage::UserDictionaryStorage(const UserDictionaryStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDictionaryStorage::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  storage_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionaryStorage::~UserDictionaryStorage() {
  SharedDtor();
}

void UserDictionaryStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDictionaryStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionaryStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryStorage_descriptor_;
}

const UserDictionaryStorage& UserDictionaryStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionaryStorage* UserDictionaryStorage::default_instance_ = NULL;

UserDictionaryStorage* UserDictionaryStorage::New() const {
  return new UserDictionaryStorage;
}

void UserDictionaryStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    storage_type_ = 1;
  }
  dictionaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDictionaryStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionaries;
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dictionaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionaries;
        if (input->ExpectTag(80)) goto parse_storage_type;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(value)) {
            set_storage_type(static_cast< ::mozc::user_dictionary::UserDictionaryStorage_StorageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDictionaryStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (int i = 0; i < this->dictionaries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dictionaries(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (has_storage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->storage_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDictionaryStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (int i = 0; i < this->dictionaries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dictionaries(i), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (has_storage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->storage_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDictionaryStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
    if (has_storage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_type());
    }

  }
  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  total_size += 1 * this->dictionaries_size();
  for (int i = 0; i < this->dictionaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dictionaries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionaryStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDictionaryStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDictionaryStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDictionaryStorage::MergeFrom(const UserDictionaryStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  dictionaries_.MergeFrom(from.dictionaries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_storage_type()) {
      set_storage_type(from.storage_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDictionaryStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryStorage::CopyFrom(const UserDictionaryStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryStorage::IsInitialized() const {

  return true;
}

void UserDictionaryStorage::Swap(UserDictionaryStorage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    dictionaries_.Swap(&other->dictionaries_);
    std::swap(storage_type_, other->storage_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDictionaryStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionaryStorage_descriptor_;
  metadata.reflection = UserDictionaryStorage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommand_CommandType_descriptor_;
}
bool UserDictionaryCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserDictionaryCommand_CommandType UserDictionaryCommand::NO_OPERATION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CLEAR_STORAGE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_SESSION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_SESSION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::SET_DEFAULT_DICTIONARY_NAME;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_UNDOABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::UNDO;
const UserDictionaryCommand_CommandType UserDictionaryCommand::LOAD;
const UserDictionaryCommand_CommandType UserDictionaryCommand::SAVE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_USER_DICTIONARY_NAME_LIST;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRY_SIZE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::OBSOLETE_GET_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_DICTIONARY_AVAILABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::RENAME_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_ENTRY_AVAILABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::ADD_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::EDIT_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::IMPORT_DATA;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_STORAGE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRIES;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MIN;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MAX;
const int UserDictionaryCommand::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserDictionaryCommand::kTypeFieldNumber;
const int UserDictionaryCommand::kSessionIdFieldNumber;
const int UserDictionaryCommand::kDictionaryIdFieldNumber;
const int UserDictionaryCommand::kDictionaryNameFieldNumber;
const int UserDictionaryCommand::kEntryIndexFieldNumber;
const int UserDictionaryCommand::kEntryFieldNumber;
const int UserDictionaryCommand::kDataFieldNumber;
const int UserDictionaryCommand::kEnsureNonEmptyStorageFieldNumber;
#endif  // !_MSC_VER

UserDictionaryCommand::UserDictionaryCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDictionaryCommand::InitAsDefaultInstance() {
  entry_ = const_cast< ::mozc::user_dictionary::UserDictionary_Entry*>(&::mozc::user_dictionary::UserDictionary_Entry::default_instance());
}

UserDictionaryCommand::UserDictionaryCommand(const UserDictionaryCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDictionaryCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ensure_non_empty_storage_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionaryCommand::~UserDictionaryCommand() {
  SharedDtor();
}

void UserDictionaryCommand::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dictionary_name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete entry_;
  }
}

void UserDictionaryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionaryCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommand_descriptor_;
}

const UserDictionaryCommand& UserDictionaryCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionaryCommand* UserDictionaryCommand::default_instance_ = NULL;

UserDictionaryCommand* UserDictionaryCommand::New() const {
  return new UserDictionaryCommand;
}

void UserDictionaryCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    session_id_ = GOOGLE_ULONGLONG(0);
    dictionary_id_ = GOOGLE_ULONGLONG(0);
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::kEmptyString) {
        dictionary_name_->clear();
      }
    }
    if (has_entry()) {
      if (entry_ != NULL) entry_->::mozc::user_dictionary::UserDictionary_Entry::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    ensure_non_empty_storage_ = false;
  }
  entry_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDictionaryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::user_dictionary::UserDictionaryCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint64 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dictionary_id;
        break;
      }

      // optional uint64 dictionary_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dictionary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dictionary_id_)));
          set_has_dictionary_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_entry_index;
        break;
      }

      // repeated int32 entry_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_entry_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entry_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_entry_index;
        if (input->ExpectTag(50)) goto parse_entry;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional string data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ensure_non_empty_storage;
        break;
      }

      // optional bool ensure_non_empty_storage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ensure_non_empty_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ensure_non_empty_storage_)));
          set_has_ensure_non_empty_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDictionaryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }

  // optional uint64 dictionary_id = 3;
  if (has_dictionary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dictionary_id(), output);
  }

  // optional string dictionary_name = 4;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dictionary_name(), output);
  }

  // repeated int32 entry_index = 5;
  for (int i = 0; i < this->entry_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->entry_index(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entry(), output);
  }

  // optional string data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->data(), output);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (has_ensure_non_empty_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ensure_non_empty_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDictionaryCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }

  // optional uint64 dictionary_id = 3;
  if (has_dictionary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dictionary_id(), target);
  }

  // optional string dictionary_name = 4;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dictionary_name(), target);
  }

  // repeated int32 entry_index = 5;
  for (int i = 0; i < this->entry_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->entry_index(i), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->entry(), target);
  }

  // optional string data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data(), target);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (has_ensure_non_empty_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ensure_non_empty_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDictionaryCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional uint64 dictionary_id = 3;
    if (has_dictionary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dictionary_id());
    }

    // optional string dictionary_name = 4;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

    // optional string data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional bool ensure_non_empty_storage = 8;
    if (has_ensure_non_empty_storage()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 entry_index = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->entry_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->entry_index(i));
    }
    total_size += 1 * this->entry_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionaryCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDictionaryCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDictionaryCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDictionaryCommand::MergeFrom(const UserDictionaryCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_index_.MergeFrom(from.entry_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_dictionary_id()) {
      set_dictionary_id(from.dictionary_id());
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
    if (from.has_entry()) {
      mutable_entry()->::mozc::user_dictionary::UserDictionary_Entry::MergeFrom(from.entry());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_ensure_non_empty_storage()) {
      set_ensure_non_empty_storage(from.ensure_non_empty_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDictionaryCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommand::CopyFrom(const UserDictionaryCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserDictionaryCommand::Swap(UserDictionaryCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(session_id_, other->session_id_);
    std::swap(dictionary_id_, other->dictionary_id_);
    std::swap(dictionary_name_, other->dictionary_name_);
    entry_index_.Swap(&other->entry_index_);
    std::swap(entry_, other->entry_);
    std::swap(data_, other->data_);
    std::swap(ensure_non_empty_storage_, other->ensure_non_empty_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDictionaryCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionaryCommand_descriptor_;
  metadata.reflection = UserDictionaryCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommandStatus_Status_descriptor_;
}
bool UserDictionaryCommandStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::USER_DICTIONARY_COMMAND_SUCCESS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_ERROR;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_COMMAND;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_ARGUMENT;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_SESSION_ID;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_NOT_FOUND;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_FILE_FORMAT;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_DICTIONARY_ID;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_INDEX_OUT_OF_RANGE;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_DUPLICATED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_POS_TYPE;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_TOO_MANY_WORDS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_INVALID_ENTRIES;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::NO_UNDO_HISTORY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MIN;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MAX;
const int UserDictionaryCommandStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserDictionaryCommandStatus::kStatusFieldNumber;
const int UserDictionaryCommandStatus::kSessionIdFieldNumber;
const int UserDictionaryCommandStatus::kStorageFieldNumber;
const int UserDictionaryCommandStatus::kOBSOLETEEntryFieldNumber;
const int UserDictionaryCommandStatus::kDictionaryIdFieldNumber;
const int UserDictionaryCommandStatus::kEntrySizeFieldNumber;
const int UserDictionaryCommandStatus::kEntriesFieldNumber;
#endif  // !_MSC_VER

UserDictionaryCommandStatus::UserDictionaryCommandStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDictionaryCommandStatus::InitAsDefaultInstance() {
  storage_ = const_cast< ::mozc::user_dictionary::UserDictionaryStorage*>(&::mozc::user_dictionary::UserDictionaryStorage::default_instance());
  obsolete_entry_ = const_cast< ::mozc::user_dictionary::UserDictionary_Entry*>(&::mozc::user_dictionary::UserDictionary_Entry::default_instance());
}

UserDictionaryCommandStatus::UserDictionaryCommandStatus(const UserDictionaryCommandStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDictionaryCommandStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  session_id_ = GOOGLE_ULONGLONG(0);
  storage_ = NULL;
  obsolete_entry_ = NULL;
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  entry_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionaryCommandStatus::~UserDictionaryCommandStatus() {
  SharedDtor();
}

void UserDictionaryCommandStatus::SharedDtor() {
  if (this != default_instance_) {
    delete storage_;
    delete obsolete_entry_;
  }
}

void UserDictionaryCommandStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionaryCommandStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommandStatus_descriptor_;
}

const UserDictionaryCommandStatus& UserDictionaryCommandStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionaryCommandStatus* UserDictionaryCommandStatus::default_instance_ = NULL;

UserDictionaryCommandStatus* UserDictionaryCommandStatus::New() const {
  return new UserDictionaryCommandStatus;
}

void UserDictionaryCommandStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_storage()) {
      if (storage_ != NULL) storage_->::mozc::user_dictionary::UserDictionaryStorage::Clear();
    }
    if (has_obsolete_entry()) {
      if (obsolete_entry_ != NULL) obsolete_entry_->::mozc::user_dictionary::UserDictionary_Entry::Clear();
    }
    dictionary_id_ = GOOGLE_ULONGLONG(0);
    entry_size_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDictionaryCommandStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(value)) {
            set_status(static_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint64 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_storage;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OBSOLETE_entry;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.Entry OBSOLETE_entry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dictionary_id;
        break;
      }

      // optional uint64 dictionary_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dictionary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dictionary_id_)));
          set_has_dictionary_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entry_size;
        break;
      }

      // optional uint32 entry_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_size_)));
          set_has_entry_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDictionaryCommandStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->storage(), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry OBSOLETE_entry = 4;
  if (has_obsolete_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obsolete_entry(), output);
  }

  // optional uint64 dictionary_id = 5;
  if (has_dictionary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dictionary_id(), output);
  }

  // optional uint32 entry_size = 6;
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->entry_size(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDictionaryCommandStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->storage(), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry OBSOLETE_entry = 4;
  if (has_obsolete_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->obsolete_entry(), target);
  }

  // optional uint64 dictionary_id = 5;
  if (has_dictionary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dictionary_id(), target);
  }

  // optional uint32 entry_size = 6;
  if (has_entry_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->entry_size(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDictionaryCommandStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .mozc.user_dictionary.UserDictionary.Entry OBSOLETE_entry = 4;
    if (has_obsolete_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_entry());
    }

    // optional uint64 dictionary_id = 5;
    if (has_dictionary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dictionary_id());
    }

    // optional uint32 entry_size = 6;
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_size());
    }

  }
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionaryCommandStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDictionaryCommandStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDictionaryCommandStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDictionaryCommandStatus::MergeFrom(const UserDictionaryCommandStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_storage()) {
      mutable_storage()->::mozc::user_dictionary::UserDictionaryStorage::MergeFrom(from.storage());
    }
    if (from.has_obsolete_entry()) {
      mutable_obsolete_entry()->::mozc::user_dictionary::UserDictionary_Entry::MergeFrom(from.obsolete_entry());
    }
    if (from.has_dictionary_id()) {
      set_dictionary_id(from.dictionary_id());
    }
    if (from.has_entry_size()) {
      set_entry_size(from.entry_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDictionaryCommandStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommandStatus::CopyFrom(const UserDictionaryCommandStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommandStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserDictionaryCommandStatus::Swap(UserDictionaryCommandStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(session_id_, other->session_id_);
    std::swap(storage_, other->storage_);
    std::swap(obsolete_entry_, other->obsolete_entry_);
    std::swap(dictionary_id_, other->dictionary_id_);
    std::swap(entry_size_, other->entry_size_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDictionaryCommandStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionaryCommandStatus_descriptor_;
  metadata.reflection = UserDictionaryCommandStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_dictionary
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
