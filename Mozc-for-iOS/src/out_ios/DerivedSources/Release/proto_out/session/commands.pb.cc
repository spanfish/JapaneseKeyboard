// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session/commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* KeyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyEvent_ProbableKeyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyEvent_ProbableKeyEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyEvent_SpecialKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyEvent_ModifierKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyEvent_InputStyle_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GenericStorageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericStorageEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GenericStorageEntry_StorageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SessionCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionCommand_CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionCommand_UsageStatsEvent_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Context_InputFieldType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Capability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Capability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Capability_TextDeletionCapabilityType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_SpecialRomanjiTable_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_SpaceOnAlphanumeric_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_EmojiCarrierType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RewriterCapability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_CrossingEdgeBehavior_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_LanguageAwareInputBehavior_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ApplicationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_TouchPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_TouchPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_TouchEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_TouchEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Input_CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Input_TouchAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_ResultType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Preedit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Preedit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Preedit_Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Preedit_Segment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Preedit_Segment_Annotation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletionRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletionRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Output_reflection_ = NULL;
const ::google::protobuf::Descriptor* Output_Callback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Output_Callback_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Output_PreeditMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Output_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Output_ToolMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CompositionMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_session_2fcommands_2eproto() {
  protobuf_AddDesc_session_2fcommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "session/commands.proto");
  GOOGLE_CHECK(file != NULL);
  KeyEvent_descriptor_ = file->message_type(0);
  static const int KeyEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, key_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, modifiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, special_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, modifier_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, key_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, input_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, probable_key_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, activated_),
  };
  KeyEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyEvent_descriptor_,
      KeyEvent::default_instance_,
      KeyEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyEvent));
  KeyEvent_ProbableKeyEvent_descriptor_ = KeyEvent_descriptor_->nested_type(0);
  static const int KeyEvent_ProbableKeyEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, key_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, special_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, modifier_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, probability_),
  };
  KeyEvent_ProbableKeyEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyEvent_ProbableKeyEvent_descriptor_,
      KeyEvent_ProbableKeyEvent::default_instance_,
      KeyEvent_ProbableKeyEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyEvent_ProbableKeyEvent));
  KeyEvent_SpecialKey_descriptor_ = KeyEvent_descriptor_->enum_type(0);
  KeyEvent_ModifierKey_descriptor_ = KeyEvent_descriptor_->enum_type(1);
  KeyEvent_InputStyle_descriptor_ = KeyEvent_descriptor_->enum_type(2);
  GenericStorageEntry_descriptor_ = file->message_type(1);
  static const int GenericStorageEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, value_),
  };
  GenericStorageEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericStorageEntry_descriptor_,
      GenericStorageEntry::default_instance_,
      GenericStorageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericStorageEntry));
  GenericStorageEntry_StorageType_descriptor_ = GenericStorageEntry_descriptor_->enum_type(0);
  SessionCommand_descriptor_ = file->message_type(2);
  static const int SessionCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, composition_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, cursor_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, usage_stats_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, usage_stats_event_int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, caret_rectangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, asynchronous_request_id_),
  };
  SessionCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionCommand_descriptor_,
      SessionCommand::default_instance_,
      SessionCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionCommand));
  SessionCommand_CommandType_descriptor_ = SessionCommand_descriptor_->enum_type(0);
  SessionCommand_UsageStatsEvent_descriptor_ = SessionCommand_descriptor_->enum_type(1);
  Context_descriptor_ = file->message_type(3);
  static const int Context_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, preceding_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, following_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, suppress_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, input_field_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, experimental_features_),
  };
  Context_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Context_descriptor_,
      Context::default_instance_,
      Context_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Context));
  Context_InputFieldType_descriptor_ = Context_descriptor_->enum_type(0);
  Capability_descriptor_ = file->message_type(4);
  static const int Capability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, text_deletion_),
  };
  Capability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Capability_descriptor_,
      Capability::default_instance_,
      Capability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Capability));
  Capability_TextDeletionCapabilityType_descriptor_ = Capability_descriptor_->enum_type(0);
  Request_descriptor_ = file->message_type(5);
  static const int Request_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, zero_query_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, mixed_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, combine_all_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, special_romanji_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, space_on_alphanumeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, keyboard_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, update_input_mode_from_surrounding_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, kana_modifier_insensitive_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, auto_partial_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, available_emoji_carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, emoji_rewriter_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, crossing_edge_behavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, language_aware_input_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_SpecialRomanjiTable_descriptor_ = Request_descriptor_->enum_type(0);
  Request_SpaceOnAlphanumeric_descriptor_ = Request_descriptor_->enum_type(1);
  Request_EmojiCarrierType_descriptor_ = Request_descriptor_->enum_type(2);
  Request_RewriterCapability_descriptor_ = Request_descriptor_->enum_type(3);
  Request_CrossingEdgeBehavior_descriptor_ = Request_descriptor_->enum_type(4);
  Request_LanguageAwareInputBehavior_descriptor_ = Request_descriptor_->enum_type(5);
  ApplicationInfo_descriptor_ = file->message_type(6);
  static const int ApplicationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, timezone_offset_),
  };
  ApplicationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationInfo_descriptor_,
      ApplicationInfo::default_instance_,
      ApplicationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationInfo));
  Input_descriptor_ = file->message_type(7);
  static const int Input_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, application_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, storage_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, touch_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, user_dictionary_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, request_suggestion_),
  };
  Input_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Input_descriptor_,
      Input::default_instance_,
      Input_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Input));
  Input_TouchPosition_descriptor_ = Input_descriptor_->nested_type(0);
  static const int Input_TouchPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, timestamp_),
  };
  Input_TouchPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Input_TouchPosition_descriptor_,
      Input_TouchPosition::default_instance_,
      Input_TouchPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Input_TouchPosition));
  Input_TouchEvent_descriptor_ = Input_descriptor_->nested_type(1);
  static const int Input_TouchEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, stroke_),
  };
  Input_TouchEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Input_TouchEvent_descriptor_,
      Input_TouchEvent::default_instance_,
      Input_TouchEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Input_TouchEvent));
  Input_CommandType_descriptor_ = Input_descriptor_->enum_type(0);
  Input_TouchAction_descriptor_ = Input_descriptor_->enum_type(1);
  Result_descriptor_ = file->message_type(8);
  static const int Result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, cursor_offset_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  Result_ResultType_descriptor_ = Result_descriptor_->enum_type(0);
  Preedit_descriptor_ = file->message_type(9);
  static const int Preedit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, highlighted_position_),
  };
  Preedit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Preedit_descriptor_,
      Preedit::default_instance_,
      Preedit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Preedit));
  Preedit_Segment_descriptor_ = Preedit_descriptor_->nested_type(0);
  static const int Preedit_Segment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, annotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, value_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, key_),
  };
  Preedit_Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Preedit_Segment_descriptor_,
      Preedit_Segment::default_instance_,
      Preedit_Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Preedit_Segment));
  Preedit_Segment_Annotation_descriptor_ = Preedit_Segment_descriptor_->enum_type(0);
  Status_descriptor_ = file->message_type(10);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, activated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, comeback_mode_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
  DeletionRange_descriptor_ = file->message_type(11);
  static const int DeletionRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, length_),
  };
  DeletionRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletionRange_descriptor_,
      DeletionRange::default_instance_,
      DeletionRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletionRange));
  Output_descriptor_ = file->message_type(12);
  static const int Output_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, consumed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, preedit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, preedit_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, all_candidate_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, deletion_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, launch_tool_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, callback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, storage_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, user_dictionary_command_status_),
  };
  Output_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Output_descriptor_,
      Output::default_instance_,
      Output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Output));
  Output_Callback_descriptor_ = Output_descriptor_->nested_type(0);
  static const int Output_Callback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, session_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, delay_millisec_),
  };
  Output_Callback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Output_Callback_descriptor_,
      Output_Callback::default_instance_,
      Output_Callback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Output_Callback));
  Output_PreeditMethod_descriptor_ = Output_descriptor_->enum_type(0);
  Output_ErrorCode_descriptor_ = Output_descriptor_->enum_type(1);
  Output_ToolMode_descriptor_ = Output_descriptor_->enum_type(2);
  Command_descriptor_ = file->message_type(13);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, output_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  CommandList_descriptor_ = file->message_type(14);
  static const int CommandList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, commands_),
  };
  CommandList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandList_descriptor_,
      CommandList::default_instance_,
      CommandList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandList));
  CompositionMode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_session_2fcommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyEvent_descriptor_, &KeyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyEvent_ProbableKeyEvent_descriptor_, &KeyEvent_ProbableKeyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericStorageEntry_descriptor_, &GenericStorageEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionCommand_descriptor_, &SessionCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Context_descriptor_, &Context::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Capability_descriptor_, &Capability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationInfo_descriptor_, &ApplicationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Input_descriptor_, &Input::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Input_TouchPosition_descriptor_, &Input_TouchPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Input_TouchEvent_descriptor_, &Input_TouchEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Preedit_descriptor_, &Preedit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Preedit_Segment_descriptor_, &Preedit_Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletionRange_descriptor_, &DeletionRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Output_descriptor_, &Output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Output_Callback_descriptor_, &Output_Callback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandList_descriptor_, &CommandList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_session_2fcommands_2eproto() {
  delete KeyEvent::default_instance_;
  delete KeyEvent_reflection_;
  delete KeyEvent_ProbableKeyEvent::default_instance_;
  delete KeyEvent_ProbableKeyEvent_reflection_;
  delete GenericStorageEntry::default_instance_;
  delete GenericStorageEntry_reflection_;
  delete SessionCommand::default_instance_;
  delete SessionCommand_reflection_;
  delete Context::default_instance_;
  delete Context_reflection_;
  delete Capability::default_instance_;
  delete Capability_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete ApplicationInfo::default_instance_;
  delete ApplicationInfo_reflection_;
  delete Input::default_instance_;
  delete Input_reflection_;
  delete Input_TouchPosition::default_instance_;
  delete Input_TouchPosition_reflection_;
  delete Input_TouchEvent::default_instance_;
  delete Input_TouchEvent_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete Preedit::default_instance_;
  delete Preedit_reflection_;
  delete Preedit_Segment::default_instance_;
  delete Preedit_Segment_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete DeletionRange::default_instance_;
  delete DeletionRange_reflection_;
  delete Output::default_instance_;
  delete Output_reflection_;
  delete Output_Callback::default_instance_;
  delete Output_Callback_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete CommandList::default_instance_;
  delete CommandList_reflection_;
}

void protobuf_AddDesc_session_2fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::config::protobuf_AddDesc_config_2fconfig_2eproto();
  ::mozc::commands::protobuf_AddDesc_session_2fcandidates_2eproto();
  ::mozc::user_dictionary::protobuf_AddDesc_dictionary_2fuser_5fdictionary_5fstorage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026session/commands.proto\022\rmozc.commands\032"
    "\023config/config.proto\032\030session/candidates"
    ".proto\032(dictionary/user_dictionary_stora"
    "ge.proto\"\234\r\n\010KeyEvent\022\020\n\010key_code\030\001 \001(\r\022"
    "\021\n\tmodifiers\030\002 \001(\r\0227\n\013special_key\030\003 \001(\0162"
    "\".mozc.commands.KeyEvent.SpecialKey\022:\n\rm"
    "odifier_keys\030\004 \003(\0162#.mozc.commands.KeyEv"
    "ent.ModifierKey\022\022\n\nkey_string\030\005 \001(\t\022D\n\013i"
    "nput_style\030\006 \001(\0162\".mozc.commands.KeyEven"
    "t.InputStyle:\013FOLLOW_MODE\022,\n\004mode\030\007 \001(\0162"
    "\036.mozc.commands.CompositionMode\022D\n\022proba"
    "ble_key_event\030\010 \003(\0132(.mozc.commands.KeyE"
    "vent.ProbableKeyEvent\022\021\n\tactivated\030\t \001(\010"
    "\032\256\001\n\020ProbableKeyEvent\022\020\n\010key_code\030\001 \001(\r\022"
    "7\n\013special_key\030\003 \001(\0162\".mozc.commands.Key"
    "Event.SpecialKey\022:\n\rmodifier_keys\030\004 \003(\0162"
    "#.mozc.commands.KeyEvent.ModifierKey\022\023\n\013"
    "probability\030\n \001(\001\"\363\006\n\nSpecialKey\022\021\n\rNO_S"
    "PECIALKEY\020\000\022\t\n\005DIGIT\020\001\022\006\n\002ON\020\002\022\007\n\003OFF\020\003\022"
    "\t\n\005SPACE\020\004\022\t\n\005ENTER\020\005\022\010\n\004LEFT\020\006\022\t\n\005RIGHT"
    "\020\007\022\006\n\002UP\020\010\022\010\n\004DOWN\020\t\022\n\n\006ESCAPE\020\n\022\007\n\003DEL\020"
    "\013\022\r\n\tBACKSPACE\020\014\022\n\n\006HENKAN\020\r\022\014\n\010MUHENKAN"
    "\020\016\022\010\n\004KANA\020\017\022\010\n\004HOME\020\020\022\007\n\003END\020\021\022\007\n\003TAB\020\022"
    "\022\006\n\002F1\020\023\022\006\n\002F2\020\024\022\006\n\002F3\020\025\022\006\n\002F4\020\026\022\006\n\002F5\020\027"
    "\022\006\n\002F6\020\030\022\006\n\002F7\020\031\022\006\n\002F8\020\032\022\006\n\002F9\020\033\022\007\n\003F10\020"
    "\034\022\007\n\003F11\020\035\022\007\n\003F12\020\036\022\013\n\007PAGE_UP\020\037\022\r\n\tPAGE"
    "_DOWN\020 \022\n\n\006INSERT\020!\022\007\n\003F13\020\"\022\007\n\003F14\020#\022\007\n"
    "\003F15\020$\022\007\n\003F16\020%\022\007\n\003F17\020&\022\007\n\003F18\020\'\022\007\n\003F19"
    "\020(\022\007\n\003F20\020)\022\007\n\003F21\020*\022\007\n\003F22\020+\022\007\n\003F23\020,\022\007"
    "\n\003F24\020-\022\010\n\004EISU\020.\022\013\n\007NUMPAD0\020/\022\013\n\007NUMPAD"
    "1\0200\022\013\n\007NUMPAD2\0201\022\013\n\007NUMPAD3\0202\022\013\n\007NUMPAD4"
    "\0203\022\013\n\007NUMPAD5\0204\022\013\n\007NUMPAD6\0205\022\013\n\007NUMPAD7\020"
    "6\022\013\n\007NUMPAD8\0207\022\013\n\007NUMPAD9\0208\022\014\n\010MULTIPLY\020"
    "9\022\007\n\003ADD\020:\022\r\n\tSEPARATOR\020;\022\014\n\010SUBTRACT\020<\022"
    "\013\n\007DECIMAL\020=\022\n\n\006DIVIDE\020>\022\n\n\006EQUALS\020\?\022\016\n\n"
    "TEXT_INPUT\020@\022\013\n\007HANKAKU\020A\022\t\n\005KANJI\020B\022\014\n\010"
    "KATAKANA\020C\022\r\n\tCAPS_LOCK\020D\022\021\n\rUNDEFINED_K"
    "EY\020E\022\t\n\005COMMA\020F\022\t\n\005CLEAR\020G\022\020\n\014VIRTUAL_LE"
    "FT\020H\022\021\n\rVIRTUAL_RIGHT\020I\022\021\n\rVIRTUAL_ENTER"
    "\020J\022\023\n\017NUM_SPECIALKEYS\020K\"\261\001\n\013ModifierKey\022"
    "\010\n\004CTRL\020\001\022\007\n\003ALT\020\002\022\t\n\005SHIFT\020\004\022\014\n\010KEY_DOW"
    "N\020\010\022\n\n\006KEY_UP\020\020\022\r\n\tLEFT_CTRL\020 \022\014\n\010LEFT_A"
    "LT\020@\022\017\n\nLEFT_SHIFT\020\200\001\022\017\n\nRIGHT_CTRL\020\200\002\022\016"
    "\n\tRIGHT_ALT\020\200\004\022\020\n\013RIGHT_SHIFT\020\200\010\022\t\n\004CAPS"
    "\020\200\020\":\n\nInputStyle\022\017\n\013FOLLOW_MODE\020\000\022\t\n\005AS"
    "_IS\020\001\022\020\n\014DIRECT_INPUT\020\002\"\273\001\n\023GenericStora"
    "geEntry\022<\n\004type\030\001 \001(\0162..mozc.commands.Ge"
    "nericStorageEntry.StorageType\022\013\n\003key\030\002 \001"
    "(\t\022\r\n\005value\030\003 \003(\014\"J\n\013StorageType\022\022\n\016SYMB"
    "OL_HISTORY\020\000\022\024\n\020EMOTICON_HISTORY\020\001\022\021\n\rEM"
    "OJI_HISTORY\020\002\"\230\t\n\016SessionCommand\0227\n\004type"
    "\030\001 \002(\0162).mozc.commands.SessionCommand.Co"
    "mmandType\022\n\n\002id\030\002 \001(\005\0228\n\020composition_mod"
    "e\030\003 \001(\0162\036.mozc.commands.CompositionMode\022"
    "\014\n\004text\030\004 \001(\t\022\027\n\017cursor_position\030\005 \001(\r\022H"
    "\n\021usage_stats_event\030\007 \001(\0162-.mozc.command"
    "s.SessionCommand.UsageStatsEvent\022#\n\033usag"
    "e_stats_event_int_value\030\t \001(\005\0221\n\017caret_r"
    "ectangle\030\010 \001(\0132\030.mozc.commands.Rectangle"
    "\022\037\n\027asynchronous_request_id\030\n \001(\005\"\205\004\n\013Co"
    "mmandType\022\n\n\006REVERT\020\001\022\n\n\006SUBMIT\020\002\022\024\n\020SEL"
    "ECT_CANDIDATE\020\003\022\027\n\023HIGHLIGHT_CANDIDATE\020\004"
    "\022\025\n\021SWITCH_INPUT_MODE\020\005\022\016\n\nGET_STATUS\020\006\022"
    "\024\n\020SUBMIT_CANDIDATE\020\007\022\023\n\017CONVERT_REVERSE"
    "\020\010\022\010\n\004UNDO\020\t\022\021\n\rRESET_CONTEXT\020\n\022\017\n\013MOVE_"
    "CURSOR\020\013\022\033\n\027SWITCH_INPUT_FIELD_TYPE\020\014\022\025\n"
    "\021USAGE_STATS_EVENT\020\r\022\022\n\016UNDO_OR_REWIND\020\016"
    "\022\025\n\021EXPAND_SUGGESTION\020\017\022\027\n\023SEND_CARET_LO"
    "CATION\020\020\022&\n\"OBSOLETE_SEND_LANGUAGE_BAR_C"
    "OMMAND\020\021\022\024\n\020GET_ASYNC_RESULT\020\022\022\023\n\017COMMIT"
    "_RAW_TEXT\020\023\022\025\n\021CONVERT_PREV_PAGE\020\024\022\025\n\021CO"
    "NVERT_NEXT_PAGE\020\025\022\017\n\013TURN_ON_IME\020\026\022\020\n\014TU"
    "RN_OFF_IME\020\027\022\023\n\017NUM_OF_COMMANDS\020\030\"\224\002\n\017Us"
    "ageStatsEvent\022\030\n\024INFOLIST_WINDOW_SHOW\020\001\022"
    "\030\n\024INFOLIST_WINDOW_HIDE\020\002\022\032\n\026HANDWRITING"
    "_OPEN_EVENT\020\003\022\034\n\030HANDWRITING_COMMIT_EVEN"
    "T\020\004\022 \n\034CHARACTER_PALETTE_OPEN_EVENT\020\005\022\"\n"
    "\036CHARACTER_PALETTE_COMMIT_EVENT\020\006\022&\n\"SOF"
    "TWARE_KEYBOARD_LAYOUT_LANDSCAPE\020\007\022%\n!SOF"
    "TWARE_KEYBOARD_LAYOUT_PORTRAIT\020\010\"\223\002\n\007Con"
    "text\022\026\n\016preceding_text\030\001 \001(\t\022\026\n\016followin"
    "g_text\030\002 \001(\t\022\"\n\023suppress_suggestion\030\003 \001("
    "\010:\005false\022\?\n\020input_field_type\030\004 \001(\0162%.moz"
    "c.commands.Context.InputFieldType\022\023\n\010rev"
    "ision\030\005 \001(\005:\0010\022\035\n\025experimental_features\030"
    "d \003(\t\"\?\n\016InputFieldType\022\n\n\006NORMAL\020\001\022\014\n\010P"
    "ASSWORD\020\002\022\007\n\003TEL\020\003\022\n\n\006NUMBER\020\004\"\320\001\n\nCapab"
    "ility\022h\n\rtext_deletion\030\001 \001(\01624.mozc.comm"
    "ands.Capability.TextDeletionCapabilityTy"
    "pe:\033NO_TEXT_DELETION_CAPABILITY\"X\n\032TextD"
    "eletionCapabilityType\022\037\n\033NO_TEXT_DELETIO"
    "N_CAPABILITY\020\000\022\031\n\025DELETE_PRECEDING_TEXT\020"
    "\001\"\335\r\n\007Request\022$\n\025zero_query_suggestion\030\001"
    " \001(\010:\005false\022\037\n\020mixed_conversion\030\002 \001(\010:\005f"
    "alse\022#\n\024combine_all_segments\030\003 \001(\010:\005fals"
    "e\022X\n\025special_romanji_table\030\004 \001(\0162*.mozc."
    "commands.Request.SpecialRomanjiTable:\rDE"
    "FAULT_TABLE\022o\n\025space_on_alphanumeric\030\006 \001"
    "(\0162*.mozc.commands.Request.SpaceOnAlphan"
    "umeric:$SPACE_OR_CONVERT_KEEPING_COMPOSI"
    "TION\022\025\n\rkeyboard_name\030\007 \001(\t\0225\n\'update_in"
    "put_mode_from_surrounding_text\030\010 \001(\010:\004tr"
    "ue\0223\n$kana_modifier_insensitive_conversi"
    "on\030\t \001(\010:\005false\022&\n\027auto_partial_suggesti"
    "on\030\n \001(\010:\005false\022\"\n\027available_emoji_carri"
    "er\030\013 \001(\005:\0011\022$\n\031emoji_rewriter_capability"
    "\030\014 \001(\005:\0011\022W\n\026crossing_edge_behavior\030\r \001("
    "\0162+.mozc.commands.Request.CrossingEdgeBe"
    "havior:\nDO_NOTHING\022p\n\024language_aware_inp"
    "ut\030\016 \001(\01621.mozc.commands.Request.Languag"
    "eAwareInputBehavior:\037DEFAULT_LANGUAGE_AW"
    "ARE_BEHAVIOR\"\335\003\n\023SpecialRomanjiTable\022\021\n\r"
    "DEFAULT_TABLE\020\000\022\033\n\027TWELVE_KEYS_TO_HIRAGA"
    "NA\020\n\022!\n\035TWELVE_KEYS_TO_HALFWIDTHASCII\020\013\022"
    "\031\n\025TWELVE_KEYS_TO_NUMBER\020\014\022\025\n\021FLICK_TO_H"
    "IRAGANA\020\r\022\033\n\027FLICK_TO_HALFWIDTHASCII\020\016\022\023"
    "\n\017FLICK_TO_NUMBER\020\017\022\034\n\030TOGGLE_FLICK_TO_H"
    "IRAGANA\020\020\022\"\n\036TOGGLE_FLICK_TO_HALFWIDTHAS"
    "CII\020\021\022\032\n\026TOGGLE_FLICK_TO_NUMBER\020\022\022\035\n\031QWE"
    "RTY_MOBILE_TO_HIRAGANA\020\024\022$\n QWERTY_MOBIL"
    "E_TO_HIRAGANA_NUMBER\020\025\022#\n\037QWERTY_MOBILE_"
    "TO_HALFWIDTHASCII\020\026\022\025\n\021GODAN_TO_HIRAGANA"
    "\020\036\022\033\n\027GODAN_TO_HALFWIDTHASCII\020\037\022\023\n\017GODAN"
    "_TO_NUMBER\020 \"w\n\023SpaceOnAlphanumeric\022(\n$S"
    "PACE_OR_CONVERT_KEEPING_COMPOSITION\020\000\022*\n"
    "&SPACE_OR_CONVERT_COMMITING_COMPOSITION\020"
    "\001\022\n\n\006COMMIT\020\002\"[\n\020EmojiCarrierType\022\021\n\rUNI"
    "CODE_EMOJI\020\001\022\020\n\014DOCOMO_EMOJI\020\002\022\022\n\016SOFTBA"
    "NK_EMOJI\020\004\022\016\n\nKDDI_EMOJI\020\010\"`\n\022RewriterCa"
    "pability\022\021\n\rNOT_AVAILABLE\020\000\022\016\n\nCONVERSIO"
    "N\020\001\022\016\n\nPREDICTION\020\002\022\016\n\nSUGGESTION\020\004\022\007\n\003A"
    "LL\020\007\"D\n\024CrossingEdgeBehavior\022\016\n\nDO_NOTHI"
    "NG\020\000\022\034\n\030COMMIT_WITHOUT_CONSUMING\020\001\"}\n\032La"
    "nguageAwareInputBehavior\022#\n\037DEFAULT_LANG"
    "UAGE_AWARE_BEHAVIOR\020\000\022\033\n\027NO_LANGUAGE_AWA"
    "RE_INPUT\020\001\022\035\n\031LANGUAGE_AWARE_SUGGESTION\020"
    "\002\"Q\n\017ApplicationInfo\022\022\n\nprocess_id\030\001 \001(\r"
    "\022\021\n\tthread_id\030\002 \001(\r\022\027\n\017timezone_offset\030\003"
    " \001(\005\"\217\013\n\005Input\022.\n\004type\030\001 \002(\0162 .mozc.comm"
    "ands.Input.CommandType\022\n\n\002id\030\002 \001(\004\022$\n\003ke"
    "y\030\003 \001(\0132\027.mozc.commands.KeyEvent\022.\n\007comm"
    "and\030\004 \001(\0132\035.mozc.commands.SessionCommand"
    "\022#\n\006config\030\005 \001(\0132\023.mozc.config.Config\022\'\n"
    "\007context\030\006 \001(\0132\026.mozc.commands.Context\022-"
    "\n\ncapability\030\007 \001(\0132\031.mozc.commands.Capab"
    "ility\0228\n\020application_info\030\010 \001(\0132\036.mozc.c"
    "ommands.ApplicationInfo\022\'\n\007request\030\t \001(\013"
    "2\026.mozc.commands.Request\0229\n\rstorage_entr"
    "y\030\n \001(\0132\".mozc.commands.GenericStorageEn"
    "try\0225\n\014touch_events\030\014 \003(\0132\037.mozc.command"
    "s.Input.TouchEvent\022L\n\027user_dictionary_co"
    "mmand\030\r \001(\0132+.mozc.user_dictionary.UserD"
    "ictionaryCommand\022 \n\022request_suggestion\030\016"
    " \001(\010:\004true\032j\n\rTouchPosition\0220\n\006action\030\001 "
    "\001(\0162 .mozc.commands.Input.TouchAction\022\t\n"
    "\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\021\n\ttimestamp\030\004 \001(\003\032S"
    "\n\nTouchEvent\022\021\n\tsource_id\030\001 \001(\r\0222\n\006strok"
    "e\030\002 \003(\0132\".mozc.commands.Input.TouchPosit"
    "ion\"\263\004\n\013CommandType\022\010\n\004NONE\020\000\022\022\n\016CREATE_"
    "SESSION\020\001\022\022\n\016DELETE_SESSION\020\002\022\014\n\010SEND_KE"
    "Y\020\003\022\021\n\rTEST_SEND_KEY\020\004\022\020\n\014SEND_COMMAND\020\005"
    "\022\016\n\nGET_CONFIG\020\006\022\016\n\nSET_CONFIG\020\007\022\026\n\022SET_"
    "IMPOSED_CONFIG\020\026\022\017\n\013SET_REQUEST\020\021\022\r\n\tSYN"
    "C_DATA\020\010\022\014\n\010SHUTDOWN\020\t\022\n\n\006RELOAD\020\n\022\026\n\022CL"
    "EAR_USER_HISTORY\020\013\022\031\n\025CLEAR_USER_PREDICT"
    "ION\020\014\022 \n\034CLEAR_UNUSED_USER_PREDICTION\020\020\022"
    "\013\n\007CLEANUP\020\r\022\020\n\014NO_OPERATION\020\016\022\035\n\031OBSOLE"
    "TE_START_CLOUD_SYNC\020\022\022\"\n\036OBSOLETE_GET_CL"
    "OUD_SYNC_STATUS\020\027\022\032\n\026OBSOLETE_ADD_AUTH_C"
    "ODE\020\030\022\025\n\021INSERT_TO_STORAGE\020\024\022\031\n\025READ_ALL"
    "_FROM_STORAGE\020\025\022\021\n\rCLEAR_STORAGE\020\031\022 \n\034SE"
    "ND_USER_DICTIONARY_COMMAND\020\032\022\023\n\017NUM_OF_C"
    "OMMANDS\020\033\";\n\013TouchAction\022\016\n\nTOUCH_DOWN\020\001"
    "\022\016\n\nTOUCH_MOVE\020\002\022\014\n\010TOUCH_UP\020\003\"\222\001\n\006Resul"
    "t\022.\n\004type\030\001 \002(\0162 .mozc.commands.Result.R"
    "esultType\022\r\n\005value\030\002 \002(\t\022\013\n\003key\030\003 \001(\t\022\030\n"
    "\rcursor_offset\030\004 \001(\005:\0010\"\"\n\nResultType\022\010\n"
    "\004NONE\020\000\022\n\n\006STRING\020\001\"\233\002\n\007Preedit\022\016\n\006curso"
    "r\030\001 \002(\r\022/\n\007segment\030\002 \003(\n2\036.mozc.commands"
    ".Preedit.Segment\022\034\n\024highlighted_position"
    "\030\003 \001(\r\032\260\001\n\007Segment\022=\n\nannotation\030\003 \002(\0162)"
    ".mozc.commands.Preedit.Segment.Annotatio"
    "n\022\r\n\005value\030\004 \002(\t\022\024\n\014value_length\030\005 \002(\r\022\013"
    "\n\003key\030\006 \001(\t\"4\n\nAnnotation\022\010\n\004NONE\020\000\022\r\n\tU"
    "NDERLINE\020\001\022\r\n\tHIGHLIGHT\020\002\"\200\001\n\006Status\022\021\n\t"
    "activated\030\001 \001(\010\022,\n\004mode\030\002 \001(\0162\036.mozc.com"
    "mands.CompositionMode\0225\n\rcomeback_mode\030\003"
    " \001(\0162\036.mozc.commands.CompositionMode\"/\n\r"
    "DeletionRange\022\016\n\006offset\030\001 \001(\005\022\016\n\006length\030"
    "\002 \001(\005\"\354\010\n\006Output\022\n\n\002id\030\001 \001(\004\022,\n\004mode\030\002 \001"
    "(\0162\036.mozc.commands.CompositionMode\022\020\n\010co"
    "nsumed\030\003 \001(\010\022%\n\006result\030\004 \001(\0132\025.mozc.comm"
    "ands.Result\022\'\n\007preedit\030\005 \001(\0132\026.mozc.comm"
    "ands.Preedit\022-\n\ncandidates\030\006 \001(\0132\031.mozc."
    "commands.Candidates\022$\n\003key\030\007 \001(\0132\027.mozc."
    "commands.KeyEvent\022\013\n\003url\030\010 \001(\t\022#\n\006config"
    "\030\t \001(\0132\023.mozc.config.Config\022B\n\016preedit_m"
    "ethod\030\n \001(\0162#.mozc.commands.Output.Preed"
    "itMethod:\005ASCII\022D\n\nerror_code\030\013 \001(\0162\037.mo"
    "zc.commands.Output.ErrorCode:\017SESSION_SU"
    "CCESS\022%\n\006status\030\r \001(\0132\025.mozc.commands.St"
    "atus\0229\n\023all_candidate_words\030\016 \001(\0132\034.mozc"
    ".commands.CandidateList\0224\n\016deletion_rang"
    "e\030\020 \001(\0132\034.mozc.commands.DeletionRange\022A\n"
    "\020launch_tool_mode\030\021 \001(\0162\036.mozc.commands."
    "Output.ToolMode:\007NO_TOOL\0220\n\010callback\030\022 \001"
    "(\0132\036.mozc.commands.Output.Callback\0229\n\rst"
    "orage_entry\030\023 \001(\0132\".mozc.commands.Generi"
    "cStorageEntry\022Y\n\036user_dictionary_command"
    "_status\030\025 \001(\01321.mozc.user_dictionary.Use"
    "rDictionaryCommandStatus\032Z\n\010Callback\0226\n\017"
    "session_command\030\001 \001(\0132\035.mozc.commands.Se"
    "ssionCommand\022\026\n\016delay_millisec\030\002 \001(\r\"$\n\r"
    "PreeditMethod\022\t\n\005ASCII\020\000\022\010\n\004KANA\020\001\"5\n\tEr"
    "rorCode\022\023\n\017SESSION_SUCCESS\020\000\022\023\n\017SESSION_"
    "FAILURE\020\001\"Y\n\010ToolMode\022\013\n\007NO_TOOL\020\000\022\021\n\rCO"
    "NFIG_DIALOG\020\001\022\023\n\017DICTIONARY_TOOL\020\002\022\030\n\024WO"
    "RD_REGISTER_DIALOG\020\003\"U\n\007Command\022#\n\005input"
    "\030\001 \002(\0132\024.mozc.commands.Input\022%\n\006output\030\002"
    " \002(\0132\025.mozc.commands.Output\"7\n\013CommandLi"
    "st\022(\n\010commands\030\001 \003(\0132\026.mozc.commands.Com"
    "mand*\212\001\n\017CompositionMode\022\n\n\006DIRECT\020\000\022\014\n\010"
    "HIRAGANA\020\001\022\021\n\rFULL_KATAKANA\020\002\022\016\n\nHALF_AS"
    "CII\020\003\022\016\n\nFULL_ASCII\020\004\022\021\n\rHALF_KATAKANA\020\005"
    "\022\027\n\023NUM_OF_COMPOSITIONS\020\006B\?\n.org.mozc.an"
    "droid.inputmethod.japanese.protobufB\rPro"
    "toCommands", 9050);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "session/commands.proto", &protobuf_RegisterTypes);
  KeyEvent::default_instance_ = new KeyEvent();
  KeyEvent_ProbableKeyEvent::default_instance_ = new KeyEvent_ProbableKeyEvent();
  GenericStorageEntry::default_instance_ = new GenericStorageEntry();
  SessionCommand::default_instance_ = new SessionCommand();
  Context::default_instance_ = new Context();
  Capability::default_instance_ = new Capability();
  Request::default_instance_ = new Request();
  ApplicationInfo::default_instance_ = new ApplicationInfo();
  Input::default_instance_ = new Input();
  Input_TouchPosition::default_instance_ = new Input_TouchPosition();
  Input_TouchEvent::default_instance_ = new Input_TouchEvent();
  Result::default_instance_ = new Result();
  Preedit::default_instance_ = new Preedit();
  Preedit_Segment::default_instance_ = new Preedit_Segment();
  Status::default_instance_ = new Status();
  DeletionRange::default_instance_ = new DeletionRange();
  Output::default_instance_ = new Output();
  Output_Callback::default_instance_ = new Output_Callback();
  Command::default_instance_ = new Command();
  CommandList::default_instance_ = new CommandList();
  KeyEvent::default_instance_->InitAsDefaultInstance();
  KeyEvent_ProbableKeyEvent::default_instance_->InitAsDefaultInstance();
  GenericStorageEntry::default_instance_->InitAsDefaultInstance();
  SessionCommand::default_instance_->InitAsDefaultInstance();
  Context::default_instance_->InitAsDefaultInstance();
  Capability::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  ApplicationInfo::default_instance_->InitAsDefaultInstance();
  Input::default_instance_->InitAsDefaultInstance();
  Input_TouchPosition::default_instance_->InitAsDefaultInstance();
  Input_TouchEvent::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  Preedit::default_instance_->InitAsDefaultInstance();
  Preedit_Segment::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  DeletionRange::default_instance_->InitAsDefaultInstance();
  Output::default_instance_->InitAsDefaultInstance();
  Output_Callback::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  CommandList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_session_2fcommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_session_2fcommands_2eproto {
  StaticDescriptorInitializer_session_2fcommands_2eproto() {
    protobuf_AddDesc_session_2fcommands_2eproto();
  }
} static_descriptor_initializer_session_2fcommands_2eproto_;
const ::google::protobuf::EnumDescriptor* CompositionMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositionMode_descriptor_;
}
bool CompositionMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KeyEvent_SpecialKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_SpecialKey_descriptor_;
}
bool KeyEvent_SpecialKey_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeyEvent_SpecialKey KeyEvent::NO_SPECIALKEY;
const KeyEvent_SpecialKey KeyEvent::DIGIT;
const KeyEvent_SpecialKey KeyEvent::ON;
const KeyEvent_SpecialKey KeyEvent::OFF;
const KeyEvent_SpecialKey KeyEvent::SPACE;
const KeyEvent_SpecialKey KeyEvent::ENTER;
const KeyEvent_SpecialKey KeyEvent::LEFT;
const KeyEvent_SpecialKey KeyEvent::RIGHT;
const KeyEvent_SpecialKey KeyEvent::UP;
const KeyEvent_SpecialKey KeyEvent::DOWN;
const KeyEvent_SpecialKey KeyEvent::ESCAPE;
const KeyEvent_SpecialKey KeyEvent::DEL;
const KeyEvent_SpecialKey KeyEvent::BACKSPACE;
const KeyEvent_SpecialKey KeyEvent::HENKAN;
const KeyEvent_SpecialKey KeyEvent::MUHENKAN;
const KeyEvent_SpecialKey KeyEvent::KANA;
const KeyEvent_SpecialKey KeyEvent::HOME;
const KeyEvent_SpecialKey KeyEvent::END;
const KeyEvent_SpecialKey KeyEvent::TAB;
const KeyEvent_SpecialKey KeyEvent::F1;
const KeyEvent_SpecialKey KeyEvent::F2;
const KeyEvent_SpecialKey KeyEvent::F3;
const KeyEvent_SpecialKey KeyEvent::F4;
const KeyEvent_SpecialKey KeyEvent::F5;
const KeyEvent_SpecialKey KeyEvent::F6;
const KeyEvent_SpecialKey KeyEvent::F7;
const KeyEvent_SpecialKey KeyEvent::F8;
const KeyEvent_SpecialKey KeyEvent::F9;
const KeyEvent_SpecialKey KeyEvent::F10;
const KeyEvent_SpecialKey KeyEvent::F11;
const KeyEvent_SpecialKey KeyEvent::F12;
const KeyEvent_SpecialKey KeyEvent::PAGE_UP;
const KeyEvent_SpecialKey KeyEvent::PAGE_DOWN;
const KeyEvent_SpecialKey KeyEvent::INSERT;
const KeyEvent_SpecialKey KeyEvent::F13;
const KeyEvent_SpecialKey KeyEvent::F14;
const KeyEvent_SpecialKey KeyEvent::F15;
const KeyEvent_SpecialKey KeyEvent::F16;
const KeyEvent_SpecialKey KeyEvent::F17;
const KeyEvent_SpecialKey KeyEvent::F18;
const KeyEvent_SpecialKey KeyEvent::F19;
const KeyEvent_SpecialKey KeyEvent::F20;
const KeyEvent_SpecialKey KeyEvent::F21;
const KeyEvent_SpecialKey KeyEvent::F22;
const KeyEvent_SpecialKey KeyEvent::F23;
const KeyEvent_SpecialKey KeyEvent::F24;
const KeyEvent_SpecialKey KeyEvent::EISU;
const KeyEvent_SpecialKey KeyEvent::NUMPAD0;
const KeyEvent_SpecialKey KeyEvent::NUMPAD1;
const KeyEvent_SpecialKey KeyEvent::NUMPAD2;
const KeyEvent_SpecialKey KeyEvent::NUMPAD3;
const KeyEvent_SpecialKey KeyEvent::NUMPAD4;
const KeyEvent_SpecialKey KeyEvent::NUMPAD5;
const KeyEvent_SpecialKey KeyEvent::NUMPAD6;
const KeyEvent_SpecialKey KeyEvent::NUMPAD7;
const KeyEvent_SpecialKey KeyEvent::NUMPAD8;
const KeyEvent_SpecialKey KeyEvent::NUMPAD9;
const KeyEvent_SpecialKey KeyEvent::MULTIPLY;
const KeyEvent_SpecialKey KeyEvent::ADD;
const KeyEvent_SpecialKey KeyEvent::SEPARATOR;
const KeyEvent_SpecialKey KeyEvent::SUBTRACT;
const KeyEvent_SpecialKey KeyEvent::DECIMAL;
const KeyEvent_SpecialKey KeyEvent::DIVIDE;
const KeyEvent_SpecialKey KeyEvent::EQUALS;
const KeyEvent_SpecialKey KeyEvent::TEXT_INPUT;
const KeyEvent_SpecialKey KeyEvent::HANKAKU;
const KeyEvent_SpecialKey KeyEvent::KANJI;
const KeyEvent_SpecialKey KeyEvent::KATAKANA;
const KeyEvent_SpecialKey KeyEvent::CAPS_LOCK;
const KeyEvent_SpecialKey KeyEvent::UNDEFINED_KEY;
const KeyEvent_SpecialKey KeyEvent::COMMA;
const KeyEvent_SpecialKey KeyEvent::CLEAR;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_LEFT;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_RIGHT;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_ENTER;
const KeyEvent_SpecialKey KeyEvent::NUM_SPECIALKEYS;
const KeyEvent_SpecialKey KeyEvent::SpecialKey_MIN;
const KeyEvent_SpecialKey KeyEvent::SpecialKey_MAX;
const int KeyEvent::SpecialKey_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* KeyEvent_ModifierKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_ModifierKey_descriptor_;
}
bool KeyEvent_ModifierKey_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeyEvent_ModifierKey KeyEvent::CTRL;
const KeyEvent_ModifierKey KeyEvent::ALT;
const KeyEvent_ModifierKey KeyEvent::SHIFT;
const KeyEvent_ModifierKey KeyEvent::KEY_DOWN;
const KeyEvent_ModifierKey KeyEvent::KEY_UP;
const KeyEvent_ModifierKey KeyEvent::LEFT_CTRL;
const KeyEvent_ModifierKey KeyEvent::LEFT_ALT;
const KeyEvent_ModifierKey KeyEvent::LEFT_SHIFT;
const KeyEvent_ModifierKey KeyEvent::RIGHT_CTRL;
const KeyEvent_ModifierKey KeyEvent::RIGHT_ALT;
const KeyEvent_ModifierKey KeyEvent::RIGHT_SHIFT;
const KeyEvent_ModifierKey KeyEvent::CAPS;
const KeyEvent_ModifierKey KeyEvent::ModifierKey_MIN;
const KeyEvent_ModifierKey KeyEvent::ModifierKey_MAX;
const int KeyEvent::ModifierKey_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* KeyEvent_InputStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_InputStyle_descriptor_;
}
bool KeyEvent_InputStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeyEvent_InputStyle KeyEvent::FOLLOW_MODE;
const KeyEvent_InputStyle KeyEvent::AS_IS;
const KeyEvent_InputStyle KeyEvent::DIRECT_INPUT;
const KeyEvent_InputStyle KeyEvent::InputStyle_MIN;
const KeyEvent_InputStyle KeyEvent::InputStyle_MAX;
const int KeyEvent::InputStyle_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int KeyEvent_ProbableKeyEvent::kKeyCodeFieldNumber;
const int KeyEvent_ProbableKeyEvent::kSpecialKeyFieldNumber;
const int KeyEvent_ProbableKeyEvent::kModifierKeysFieldNumber;
const int KeyEvent_ProbableKeyEvent::kProbabilityFieldNumber;
#endif  // !_MSC_VER

KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyEvent_ProbableKeyEvent::InitAsDefaultInstance() {
}

KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent(const KeyEvent_ProbableKeyEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyEvent_ProbableKeyEvent::SharedCtor() {
  _cached_size_ = 0;
  key_code_ = 0u;
  special_key_ = 0;
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent_ProbableKeyEvent::~KeyEvent_ProbableKeyEvent() {
  SharedDtor();
}

void KeyEvent_ProbableKeyEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyEvent_ProbableKeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyEvent_ProbableKeyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_ProbableKeyEvent_descriptor_;
}

const KeyEvent_ProbableKeyEvent& KeyEvent_ProbableKeyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

KeyEvent_ProbableKeyEvent* KeyEvent_ProbableKeyEvent::default_instance_ = NULL;

KeyEvent_ProbableKeyEvent* KeyEvent_ProbableKeyEvent::New() const {
  return new KeyEvent_ProbableKeyEvent;
}

void KeyEvent_ProbableKeyEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_code_ = 0u;
    special_key_ = 0;
    probability_ = 0;
  }
  modifier_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyEvent_ProbableKeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_code_)));
          set_has_key_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_special_key;
        break;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_key:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_SpecialKey_IsValid(value)) {
            set_special_key(static_cast< ::mozc::commands::KeyEvent_SpecialKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        break;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifier_keys:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_ModifierKey_IsValid(value)) {
            add_modifier_keys(static_cast< ::mozc::commands::KeyEvent_ModifierKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::mozc::commands::KeyEvent_ModifierKey_IsValid,
                 this->mutable_modifier_keys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        if (input->ExpectTag(81)) goto parse_probability;
        break;
      }

      // optional double probability = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyEvent_ProbableKeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_code(), output);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->special_key(), output);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modifier_keys(i), output);
  }

  // optional double probability = 10;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->probability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyEvent_ProbableKeyEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_code(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->modifier_keys(i), target);
  }

  // optional double probability = 10;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->probability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyEvent_ProbableKeyEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key_code = 1;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_code());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (has_special_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_key());
    }

    // optional double probability = 10;
    if (has_probability()) {
      total_size += 1 + 8;
    }

  }
  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->modifier_keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->modifier_keys(i));
    }
    total_size += 1 * this->modifier_keys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyEvent_ProbableKeyEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyEvent_ProbableKeyEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const KeyEvent_ProbableKeyEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  modifier_keys_.MergeFrom(from.modifier_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_code()) {
      set_key_code(from.key_code());
    }
    if (from.has_special_key()) {
      set_special_key(from.special_key());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const KeyEvent_ProbableKeyEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent_ProbableKeyEvent::IsInitialized() const {

  return true;
}

void KeyEvent_ProbableKeyEvent::Swap(KeyEvent_ProbableKeyEvent* other) {
  if (other != this) {
    std::swap(key_code_, other->key_code_);
    std::swap(special_key_, other->special_key_);
    modifier_keys_.Swap(&other->modifier_keys_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyEvent_ProbableKeyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyEvent_ProbableKeyEvent_descriptor_;
  metadata.reflection = KeyEvent_ProbableKeyEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int KeyEvent::kKeyCodeFieldNumber;
const int KeyEvent::kModifiersFieldNumber;
const int KeyEvent::kSpecialKeyFieldNumber;
const int KeyEvent::kModifierKeysFieldNumber;
const int KeyEvent::kKeyStringFieldNumber;
const int KeyEvent::kInputStyleFieldNumber;
const int KeyEvent::kModeFieldNumber;
const int KeyEvent::kProbableKeyEventFieldNumber;
const int KeyEvent::kActivatedFieldNumber;
#endif  // !_MSC_VER

KeyEvent::KeyEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyEvent::InitAsDefaultInstance() {
}

KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyEvent::SharedCtor() {
  _cached_size_ = 0;
  key_code_ = 0u;
  modifiers_ = 0u;
  special_key_ = 0;
  key_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_style_ = 0;
  mode_ = 0;
  activated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent::~KeyEvent() {
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  if (key_string_ != &::google::protobuf::internal::kEmptyString) {
    delete key_string_;
  }
  if (this != default_instance_) {
  }
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_descriptor_;
}

const KeyEvent& KeyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

KeyEvent* KeyEvent::default_instance_ = NULL;

KeyEvent* KeyEvent::New() const {
  return new KeyEvent;
}

void KeyEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_code_ = 0u;
    modifiers_ = 0u;
    special_key_ = 0;
    if (has_key_string()) {
      if (key_string_ != &::google::protobuf::internal::kEmptyString) {
        key_string_->clear();
      }
    }
    input_style_ = 0;
    mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    activated_ = false;
  }
  modifier_keys_.Clear();
  probable_key_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_code_)));
          set_has_key_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modifiers;
        break;
      }

      // optional uint32 modifiers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
          set_has_modifiers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_special_key;
        break;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_key:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_SpecialKey_IsValid(value)) {
            set_special_key(static_cast< ::mozc::commands::KeyEvent_SpecialKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        break;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifier_keys:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_ModifierKey_IsValid(value)) {
            add_modifier_keys(static_cast< ::mozc::commands::KeyEvent_ModifierKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::mozc::commands::KeyEvent_ModifierKey_IsValid,
                 this->mutable_modifier_keys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        if (input->ExpectTag(42)) goto parse_key_string;
        break;
      }

      // optional string key_string = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_string().data(), this->key_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_input_style;
        break;
      }

      // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_InputStyle_IsValid(value)) {
            set_input_style(static_cast< ::mozc::commands::KeyEvent_InputStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_probable_key_event;
        break;
      }

      // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_probable_key_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_probable_key_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_probable_key_event;
        if (input->ExpectTag(72)) goto parse_activated;
        break;
      }

      // optional bool activated = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
          set_has_activated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_code(), output);
  }

  // optional uint32 modifiers = 2;
  if (has_modifiers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modifiers(), output);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->special_key(), output);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modifier_keys(i), output);
  }

  // optional string key_string = 5;
  if (has_key_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_string().data(), this->key_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->key_string(), output);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (has_input_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->input_style(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mode(), output);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (int i = 0; i < this->probable_key_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->probable_key_event(i), output);
  }

  // optional bool activated = 9;
  if (has_activated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->activated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_code(), target);
  }

  // optional uint32 modifiers = 2;
  if (has_modifiers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modifiers(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->modifier_keys(i), target);
  }

  // optional string key_string = 5;
  if (has_key_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_string().data(), this->key_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key_string(), target);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (has_input_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->input_style(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mode(), target);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (int i = 0; i < this->probable_key_event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->probable_key_event(i), target);
  }

  // optional bool activated = 9;
  if (has_activated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->activated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key_code = 1;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_code());
    }

    // optional uint32 modifiers = 2;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (has_special_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_key());
    }

    // optional string key_string = 5;
    if (has_key_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_string());
    }

    // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
    if (has_input_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_style());
    }

    // optional .mozc.commands.CompositionMode mode = 7;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool activated = 9;
    if (has_activated()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->modifier_keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->modifier_keys(i));
    }
    total_size += 1 * this->modifier_keys_size() + data_size;
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  total_size += 1 * this->probable_key_event_size();
  for (int i = 0; i < this->probable_key_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->probable_key_event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  modifier_keys_.MergeFrom(from.modifier_keys_);
  probable_key_event_.MergeFrom(from.probable_key_event_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_code()) {
      set_key_code(from.key_code());
    }
    if (from.has_modifiers()) {
      set_modifiers(from.modifiers());
    }
    if (from.has_special_key()) {
      set_special_key(from.special_key());
    }
    if (from.has_key_string()) {
      set_key_string(from.key_string());
    }
    if (from.has_input_style()) {
      set_input_style(from.input_style());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activated()) {
      set_activated(from.activated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {

  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other != this) {
    std::swap(key_code_, other->key_code_);
    std::swap(modifiers_, other->modifiers_);
    std::swap(special_key_, other->special_key_);
    modifier_keys_.Swap(&other->modifier_keys_);
    std::swap(key_string_, other->key_string_);
    std::swap(input_style_, other->input_style_);
    std::swap(mode_, other->mode_);
    probable_key_event_.Swap(&other->probable_key_event_);
    std::swap(activated_, other->activated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyEvent_descriptor_;
  metadata.reflection = KeyEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GenericStorageEntry_StorageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericStorageEntry_StorageType_descriptor_;
}
bool GenericStorageEntry_StorageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GenericStorageEntry_StorageType GenericStorageEntry::SYMBOL_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::EMOTICON_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::EMOJI_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MIN;
const GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MAX;
const int GenericStorageEntry::StorageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GenericStorageEntry::kTypeFieldNumber;
const int GenericStorageEntry::kKeyFieldNumber;
const int GenericStorageEntry::kValueFieldNumber;
#endif  // !_MSC_VER

GenericStorageEntry::GenericStorageEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericStorageEntry::InitAsDefaultInstance() {
}

GenericStorageEntry::GenericStorageEntry(const GenericStorageEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericStorageEntry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericStorageEntry::~GenericStorageEntry() {
  SharedDtor();
}

void GenericStorageEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void GenericStorageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericStorageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericStorageEntry_descriptor_;
}

const GenericStorageEntry& GenericStorageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

GenericStorageEntry* GenericStorageEntry::default_instance_ = NULL;

GenericStorageEntry* GenericStorageEntry::New() const {
  return new GenericStorageEntry;
}

void GenericStorageEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericStorageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::GenericStorageEntry_StorageType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::GenericStorageEntry_StorageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericStorageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // repeated bytes value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericStorageEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // repeated bytes value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericStorageEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  // repeated bytes value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericStorageEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericStorageEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericStorageEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericStorageEntry::MergeFrom(const GenericStorageEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericStorageEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericStorageEntry::CopyFrom(const GenericStorageEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericStorageEntry::IsInitialized() const {

  return true;
}

void GenericStorageEntry::Swap(GenericStorageEntry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericStorageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericStorageEntry_descriptor_;
  metadata.reflection = GenericStorageEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SessionCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCommand_CommandType_descriptor_;
}
bool SessionCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SessionCommand_CommandType SessionCommand::REVERT;
const SessionCommand_CommandType SessionCommand::SUBMIT;
const SessionCommand_CommandType SessionCommand::SELECT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::HIGHLIGHT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::SWITCH_INPUT_MODE;
const SessionCommand_CommandType SessionCommand::GET_STATUS;
const SessionCommand_CommandType SessionCommand::SUBMIT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::CONVERT_REVERSE;
const SessionCommand_CommandType SessionCommand::UNDO;
const SessionCommand_CommandType SessionCommand::RESET_CONTEXT;
const SessionCommand_CommandType SessionCommand::MOVE_CURSOR;
const SessionCommand_CommandType SessionCommand::SWITCH_INPUT_FIELD_TYPE;
const SessionCommand_CommandType SessionCommand::USAGE_STATS_EVENT;
const SessionCommand_CommandType SessionCommand::UNDO_OR_REWIND;
const SessionCommand_CommandType SessionCommand::EXPAND_SUGGESTION;
const SessionCommand_CommandType SessionCommand::SEND_CARET_LOCATION;
const SessionCommand_CommandType SessionCommand::OBSOLETE_SEND_LANGUAGE_BAR_COMMAND;
const SessionCommand_CommandType SessionCommand::GET_ASYNC_RESULT;
const SessionCommand_CommandType SessionCommand::COMMIT_RAW_TEXT;
const SessionCommand_CommandType SessionCommand::CONVERT_PREV_PAGE;
const SessionCommand_CommandType SessionCommand::CONVERT_NEXT_PAGE;
const SessionCommand_CommandType SessionCommand::TURN_ON_IME;
const SessionCommand_CommandType SessionCommand::TURN_OFF_IME;
const SessionCommand_CommandType SessionCommand::NUM_OF_COMMANDS;
const SessionCommand_CommandType SessionCommand::CommandType_MIN;
const SessionCommand_CommandType SessionCommand::CommandType_MAX;
const int SessionCommand::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SessionCommand_UsageStatsEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCommand_UsageStatsEvent_descriptor_;
}
bool SessionCommand_UsageStatsEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_SHOW;
const SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_HIDE;
const SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_COMMIT_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_COMMIT_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MIN;
const SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MAX;
const int SessionCommand::UsageStatsEvent_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SessionCommand::kTypeFieldNumber;
const int SessionCommand::kIdFieldNumber;
const int SessionCommand::kCompositionModeFieldNumber;
const int SessionCommand::kTextFieldNumber;
const int SessionCommand::kCursorPositionFieldNumber;
const int SessionCommand::kUsageStatsEventFieldNumber;
const int SessionCommand::kUsageStatsEventIntValueFieldNumber;
const int SessionCommand::kCaretRectangleFieldNumber;
const int SessionCommand::kAsynchronousRequestIdFieldNumber;
#endif  // !_MSC_VER

SessionCommand::SessionCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionCommand::InitAsDefaultInstance() {
  caret_rectangle_ = const_cast< ::mozc::commands::Rectangle*>(&::mozc::commands::Rectangle::default_instance());
}

SessionCommand::SessionCommand(const SessionCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  composition_mode_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cursor_position_ = 0u;
  usage_stats_event_ = 1;
  usage_stats_event_int_value_ = 0;
  caret_rectangle_ = NULL;
  asynchronous_request_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionCommand::~SessionCommand() {
  SharedDtor();
}

void SessionCommand::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete caret_rectangle_;
  }
}

void SessionCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCommand_descriptor_;
}

const SessionCommand& SessionCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

SessionCommand* SessionCommand::default_instance_ = NULL;

SessionCommand* SessionCommand::New() const {
  return new SessionCommand;
}

void SessionCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    id_ = 0;
    composition_mode_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    cursor_position_ = 0u;
    usage_stats_event_ = 1;
    usage_stats_event_int_value_ = 0;
    if (has_caret_rectangle()) {
      if (caret_rectangle_ != NULL) caret_rectangle_->::mozc::commands::Rectangle::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    asynchronous_request_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.SessionCommand.CommandType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::SessionCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::SessionCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_composition_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode composition_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_composition_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_composition_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cursor_position;
        break;
      }

      // optional uint32 cursor_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_position_)));
          set_has_cursor_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usage_stats_event;
        break;
      }

      // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_stats_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::SessionCommand_UsageStatsEvent_IsValid(value)) {
            set_usage_stats_event(static_cast< ::mozc::commands::SessionCommand_UsageStatsEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_caret_rectangle;
        break;
      }

      // optional .mozc.commands.Rectangle caret_rectangle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caret_rectangle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caret_rectangle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_usage_stats_event_int_value;
        break;
      }

      // optional int32 usage_stats_event_int_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_stats_event_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usage_stats_event_int_value_)));
          set_has_usage_stats_event_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_asynchronous_request_id;
        break;
      }

      // optional int32 asynchronous_request_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asynchronous_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asynchronous_request_id_)));
          set_has_asynchronous_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (has_composition_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->composition_mode(), output);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(), output);
  }

  // optional uint32 cursor_position = 5;
  if (has_cursor_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cursor_position(), output);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (has_usage_stats_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->usage_stats_event(), output);
  }

  // optional .mozc.commands.Rectangle caret_rectangle = 8;
  if (has_caret_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->caret_rectangle(), output);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (has_usage_stats_event_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->usage_stats_event_int_value(), output);
  }

  // optional int32 asynchronous_request_id = 10;
  if (has_asynchronous_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->asynchronous_request_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (has_composition_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->composition_mode(), target);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional uint32 cursor_position = 5;
  if (has_cursor_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cursor_position(), target);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (has_usage_stats_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->usage_stats_event(), target);
  }

  // optional .mozc.commands.Rectangle caret_rectangle = 8;
  if (has_caret_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->caret_rectangle(), target);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (has_usage_stats_event_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->usage_stats_event_int_value(), target);
  }

  // optional int32 asynchronous_request_id = 10;
  if (has_asynchronous_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->asynchronous_request_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.commands.SessionCommand.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .mozc.commands.CompositionMode composition_mode = 3;
    if (has_composition_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->composition_mode());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 cursor_position = 5;
    if (has_cursor_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor_position());
    }

    // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
    if (has_usage_stats_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage_stats_event());
    }

    // optional int32 usage_stats_event_int_value = 9;
    if (has_usage_stats_event_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usage_stats_event_int_value());
    }

    // optional .mozc.commands.Rectangle caret_rectangle = 8;
    if (has_caret_rectangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caret_rectangle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 asynchronous_request_id = 10;
    if (has_asynchronous_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asynchronous_request_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionCommand::MergeFrom(const SessionCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_composition_mode()) {
      set_composition_mode(from.composition_mode());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_cursor_position()) {
      set_cursor_position(from.cursor_position());
    }
    if (from.has_usage_stats_event()) {
      set_usage_stats_event(from.usage_stats_event());
    }
    if (from.has_usage_stats_event_int_value()) {
      set_usage_stats_event_int_value(from.usage_stats_event_int_value());
    }
    if (from.has_caret_rectangle()) {
      mutable_caret_rectangle()->::mozc::commands::Rectangle::MergeFrom(from.caret_rectangle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_asynchronous_request_id()) {
      set_asynchronous_request_id(from.asynchronous_request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCommand::CopyFrom(const SessionCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_caret_rectangle()) {
    if (!this->caret_rectangle().IsInitialized()) return false;
  }
  return true;
}

void SessionCommand::Swap(SessionCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(composition_mode_, other->composition_mode_);
    std::swap(text_, other->text_);
    std::swap(cursor_position_, other->cursor_position_);
    std::swap(usage_stats_event_, other->usage_stats_event_);
    std::swap(usage_stats_event_int_value_, other->usage_stats_event_int_value_);
    std::swap(caret_rectangle_, other->caret_rectangle_);
    std::swap(asynchronous_request_id_, other->asynchronous_request_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionCommand_descriptor_;
  metadata.reflection = SessionCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Context_InputFieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_InputFieldType_descriptor_;
}
bool Context_InputFieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Context_InputFieldType Context::NORMAL;
const Context_InputFieldType Context::PASSWORD;
const Context_InputFieldType Context::TEL;
const Context_InputFieldType Context::NUMBER;
const Context_InputFieldType Context::InputFieldType_MIN;
const Context_InputFieldType Context::InputFieldType_MAX;
const int Context::InputFieldType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Context::kPrecedingTextFieldNumber;
const int Context::kFollowingTextFieldNumber;
const int Context::kSuppressSuggestionFieldNumber;
const int Context::kInputFieldTypeFieldNumber;
const int Context::kRevisionFieldNumber;
const int Context::kExperimentalFeaturesFieldNumber;
#endif  // !_MSC_VER

Context::Context()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Context::InitAsDefaultInstance() {
}

Context::Context(const Context& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Context::SharedCtor() {
  _cached_size_ = 0;
  preceding_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  following_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suppress_suggestion_ = false;
  input_field_type_ = 1;
  revision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Context::~Context() {
  SharedDtor();
}

void Context::SharedDtor() {
  if (preceding_text_ != &::google::protobuf::internal::kEmptyString) {
    delete preceding_text_;
  }
  if (following_text_ != &::google::protobuf::internal::kEmptyString) {
    delete following_text_;
  }
  if (this != default_instance_) {
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Context* Context::default_instance_ = NULL;

Context* Context::New() const {
  return new Context;
}

void Context::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_preceding_text()) {
      if (preceding_text_ != &::google::protobuf::internal::kEmptyString) {
        preceding_text_->clear();
      }
    }
    if (has_following_text()) {
      if (following_text_ != &::google::protobuf::internal::kEmptyString) {
        following_text_->clear();
      }
    }
    suppress_suggestion_ = false;
    input_field_type_ = 1;
    revision_ = 0;
  }
  experimental_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string preceding_text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preceding_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preceding_text().data(), this->preceding_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_text;
        break;
      }

      // optional string following_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_following_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->following_text().data(), this->following_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suppress_suggestion;
        break;
      }

      // optional bool suppress_suggestion = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suppress_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_suggestion_)));
          set_has_suppress_suggestion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_field_type;
        break;
      }

      // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Context_InputFieldType_IsValid(value)) {
            set_input_field_type(static_cast< ::mozc::commands::Context_InputFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_revision;
        break;
      }

      // optional int32 revision = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_experimental_features;
        break;
      }

      // repeated string experimental_features = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_experimental_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_experimental_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->experimental_features(this->experimental_features_size() - 1).data(),
            this->experimental_features(this->experimental_features_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_experimental_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string preceding_text = 1;
  if (has_preceding_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preceding_text().data(), this->preceding_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->preceding_text(), output);
  }

  // optional string following_text = 2;
  if (has_following_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_text().data(), this->following_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->following_text(), output);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (has_suppress_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->suppress_suggestion(), output);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (has_input_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->input_field_type(), output);
  }

  // optional int32 revision = 5 [default = 0];
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->revision(), output);
  }

  // repeated string experimental_features = 100;
  for (int i = 0; i < this->experimental_features_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->experimental_features(i).data(), this->experimental_features(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->experimental_features(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Context::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string preceding_text = 1;
  if (has_preceding_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preceding_text().data(), this->preceding_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->preceding_text(), target);
  }

  // optional string following_text = 2;
  if (has_following_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_text().data(), this->following_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->following_text(), target);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (has_suppress_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->suppress_suggestion(), target);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (has_input_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->input_field_type(), target);
  }

  // optional int32 revision = 5 [default = 0];
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->revision(), target);
  }

  // repeated string experimental_features = 100;
  for (int i = 0; i < this->experimental_features_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->experimental_features(i).data(), this->experimental_features(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->experimental_features(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Context::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string preceding_text = 1;
    if (has_preceding_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preceding_text());
    }

    // optional string following_text = 2;
    if (has_following_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->following_text());
    }

    // optional bool suppress_suggestion = 3 [default = false];
    if (has_suppress_suggestion()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
    if (has_input_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_field_type());
    }

    // optional int32 revision = 5 [default = 0];
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revision());
    }

  }
  // repeated string experimental_features = 100;
  total_size += 2 * this->experimental_features_size();
  for (int i = 0; i < this->experimental_features_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->experimental_features(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Context* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Context*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
  GOOGLE_CHECK_NE(&from, this);
  experimental_features_.MergeFrom(from.experimental_features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preceding_text()) {
      set_preceding_text(from.preceding_text());
    }
    if (from.has_following_text()) {
      set_following_text(from.following_text());
    }
    if (from.has_suppress_suggestion()) {
      set_suppress_suggestion(from.suppress_suggestion());
    }
    if (from.has_input_field_type()) {
      set_input_field_type(from.input_field_type());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {

  return true;
}

void Context::Swap(Context* other) {
  if (other != this) {
    std::swap(preceding_text_, other->preceding_text_);
    std::swap(following_text_, other->following_text_);
    std::swap(suppress_suggestion_, other->suppress_suggestion_);
    std::swap(input_field_type_, other->input_field_type_);
    std::swap(revision_, other->revision_);
    experimental_features_.Swap(&other->experimental_features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Capability_TextDeletionCapabilityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capability_TextDeletionCapabilityType_descriptor_;
}
bool Capability_TextDeletionCapabilityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Capability_TextDeletionCapabilityType Capability::NO_TEXT_DELETION_CAPABILITY;
const Capability_TextDeletionCapabilityType Capability::DELETE_PRECEDING_TEXT;
const Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MIN;
const Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MAX;
const int Capability::TextDeletionCapabilityType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Capability::kTextDeletionFieldNumber;
#endif  // !_MSC_VER

Capability::Capability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Capability::InitAsDefaultInstance() {
}

Capability::Capability(const Capability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Capability::SharedCtor() {
  _cached_size_ = 0;
  text_deletion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Capability::~Capability() {
  SharedDtor();
}

void Capability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capability_descriptor_;
}

const Capability& Capability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Capability* Capability::default_instance_ = NULL;

Capability* Capability::New() const {
  return new Capability;
}

void Capability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    text_deletion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Capability_TextDeletionCapabilityType_IsValid(value)) {
            set_text_deletion(static_cast< ::mozc::commands::Capability_TextDeletionCapabilityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (has_text_deletion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->text_deletion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Capability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (has_text_deletion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->text_deletion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Capability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
    if (has_text_deletion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_deletion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Capability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Capability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text_deletion()) {
      set_text_deletion(from.text_deletion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {

  return true;
}

void Capability::Swap(Capability* other) {
  if (other != this) {
    std::swap(text_deletion_, other->text_deletion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Capability_descriptor_;
  metadata.reflection = Capability_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_SpecialRomanjiTable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SpecialRomanjiTable_descriptor_;
}
bool Request_SpecialRomanjiTable_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_SpecialRomanjiTable Request::DEFAULT_TABLE;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_NUMBER;
const Request_SpecialRomanjiTable Request::FLICK_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::FLICK_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::FLICK_TO_NUMBER;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_NUMBER;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HIRAGANA_NUMBER;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::GODAN_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::GODAN_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::GODAN_TO_NUMBER;
const Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MIN;
const Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MAX;
const int Request::SpecialRomanjiTable_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_SpaceOnAlphanumeric_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SpaceOnAlphanumeric_descriptor_;
}
bool Request_SpaceOnAlphanumeric_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_KEEPING_COMPOSITION;
const Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_COMMITING_COMPOSITION;
const Request_SpaceOnAlphanumeric Request::COMMIT;
const Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MIN;
const Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MAX;
const int Request::SpaceOnAlphanumeric_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_EmojiCarrierType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_EmojiCarrierType_descriptor_;
}
bool Request_EmojiCarrierType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_EmojiCarrierType Request::UNICODE_EMOJI;
const Request_EmojiCarrierType Request::DOCOMO_EMOJI;
const Request_EmojiCarrierType Request::SOFTBANK_EMOJI;
const Request_EmojiCarrierType Request::KDDI_EMOJI;
const Request_EmojiCarrierType Request::EmojiCarrierType_MIN;
const Request_EmojiCarrierType Request::EmojiCarrierType_MAX;
const int Request::EmojiCarrierType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_RewriterCapability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RewriterCapability_descriptor_;
}
bool Request_RewriterCapability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RewriterCapability Request::NOT_AVAILABLE;
const Request_RewriterCapability Request::CONVERSION;
const Request_RewriterCapability Request::PREDICTION;
const Request_RewriterCapability Request::SUGGESTION;
const Request_RewriterCapability Request::ALL;
const Request_RewriterCapability Request::RewriterCapability_MIN;
const Request_RewriterCapability Request::RewriterCapability_MAX;
const int Request::RewriterCapability_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_CrossingEdgeBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CrossingEdgeBehavior_descriptor_;
}
bool Request_CrossingEdgeBehavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_CrossingEdgeBehavior Request::DO_NOTHING;
const Request_CrossingEdgeBehavior Request::COMMIT_WITHOUT_CONSUMING;
const Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MIN;
const Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MAX;
const int Request::CrossingEdgeBehavior_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_LanguageAwareInputBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_LanguageAwareInputBehavior_descriptor_;
}
bool Request_LanguageAwareInputBehavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_LanguageAwareInputBehavior Request::DEFAULT_LANGUAGE_AWARE_BEHAVIOR;
const Request_LanguageAwareInputBehavior Request::NO_LANGUAGE_AWARE_INPUT;
const Request_LanguageAwareInputBehavior Request::LANGUAGE_AWARE_SUGGESTION;
const Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MIN;
const Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MAX;
const int Request::LanguageAwareInputBehavior_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kZeroQuerySuggestionFieldNumber;
const int Request::kMixedConversionFieldNumber;
const int Request::kCombineAllSegmentsFieldNumber;
const int Request::kSpecialRomanjiTableFieldNumber;
const int Request::kSpaceOnAlphanumericFieldNumber;
const int Request::kKeyboardNameFieldNumber;
const int Request::kUpdateInputModeFromSurroundingTextFieldNumber;
const int Request::kKanaModifierInsensitiveConversionFieldNumber;
const int Request::kAutoPartialSuggestionFieldNumber;
const int Request::kAvailableEmojiCarrierFieldNumber;
const int Request::kEmojiRewriterCapabilityFieldNumber;
const int Request::kCrossingEdgeBehaviorFieldNumber;
const int Request::kLanguageAwareInputFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  zero_query_suggestion_ = false;
  mixed_conversion_ = false;
  combine_all_segments_ = false;
  special_romanji_table_ = 0;
  space_on_alphanumeric_ = 0;
  keyboard_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_input_mode_from_surrounding_text_ = true;
  kana_modifier_insensitive_conversion_ = false;
  auto_partial_suggestion_ = false;
  available_emoji_carrier_ = 1;
  emoji_rewriter_capability_ = 1;
  crossing_edge_behavior_ = 0;
  language_aware_input_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (keyboard_name_ != &::google::protobuf::internal::kEmptyString) {
    delete keyboard_name_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zero_query_suggestion_ = false;
    mixed_conversion_ = false;
    combine_all_segments_ = false;
    special_romanji_table_ = 0;
    space_on_alphanumeric_ = 0;
    if (has_keyboard_name()) {
      if (keyboard_name_ != &::google::protobuf::internal::kEmptyString) {
        keyboard_name_->clear();
      }
    }
    update_input_mode_from_surrounding_text_ = true;
    kana_modifier_insensitive_conversion_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    auto_partial_suggestion_ = false;
    available_emoji_carrier_ = 1;
    emoji_rewriter_capability_ = 1;
    crossing_edge_behavior_ = 0;
    language_aware_input_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool zero_query_suggestion = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zero_query_suggestion_)));
          set_has_zero_query_suggestion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mixed_conversion;
        break;
      }

      // optional bool mixed_conversion = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mixed_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mixed_conversion_)));
          set_has_mixed_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combine_all_segments;
        break;
      }

      // optional bool combine_all_segments = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_all_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &combine_all_segments_)));
          set_has_combine_all_segments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_special_romanji_table;
        break;
      }

      // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_romanji_table:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_SpecialRomanjiTable_IsValid(value)) {
            set_special_romanji_table(static_cast< ::mozc::commands::Request_SpecialRomanjiTable >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_space_on_alphanumeric;
        break;
      }

      // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_on_alphanumeric:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_SpaceOnAlphanumeric_IsValid(value)) {
            set_space_on_alphanumeric(static_cast< ::mozc::commands::Request_SpaceOnAlphanumeric >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_keyboard_name;
        break;
      }

      // optional string keyboard_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyboard_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyboard_name().data(), this->keyboard_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_update_input_mode_from_surrounding_text;
        break;
      }

      // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_input_mode_from_surrounding_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_input_mode_from_surrounding_text_)));
          set_has_update_input_mode_from_surrounding_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_kana_modifier_insensitive_conversion;
        break;
      }

      // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kana_modifier_insensitive_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kana_modifier_insensitive_conversion_)));
          set_has_kana_modifier_insensitive_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_auto_partial_suggestion;
        break;
      }

      // optional bool auto_partial_suggestion = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_partial_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_partial_suggestion_)));
          set_has_auto_partial_suggestion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_available_emoji_carrier;
        break;
      }

      // optional int32 available_emoji_carrier = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available_emoji_carrier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_emoji_carrier_)));
          set_has_available_emoji_carrier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_emoji_rewriter_capability;
        break;
      }

      // optional int32 emoji_rewriter_capability = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emoji_rewriter_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emoji_rewriter_capability_)));
          set_has_emoji_rewriter_capability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_crossing_edge_behavior;
        break;
      }

      // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crossing_edge_behavior:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_CrossingEdgeBehavior_IsValid(value)) {
            set_crossing_edge_behavior(static_cast< ::mozc::commands::Request_CrossingEdgeBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_language_aware_input;
        break;
      }

      // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language_aware_input:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_LanguageAwareInputBehavior_IsValid(value)) {
            set_language_aware_input(static_cast< ::mozc::commands::Request_LanguageAwareInputBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool zero_query_suggestion = 1 [default = false];
  if (has_zero_query_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->zero_query_suggestion(), output);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (has_mixed_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mixed_conversion(), output);
  }

  // optional bool combine_all_segments = 3 [default = false];
  if (has_combine_all_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->combine_all_segments(), output);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (has_special_romanji_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->special_romanji_table(), output);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (has_space_on_alphanumeric()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->space_on_alphanumeric(), output);
  }

  // optional string keyboard_name = 7;
  if (has_keyboard_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyboard_name().data(), this->keyboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->keyboard_name(), output);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (has_update_input_mode_from_surrounding_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->update_input_mode_from_surrounding_text(), output);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (has_kana_modifier_insensitive_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->kana_modifier_insensitive_conversion(), output);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (has_auto_partial_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->auto_partial_suggestion(), output);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (has_available_emoji_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->available_emoji_carrier(), output);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (has_emoji_rewriter_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->emoji_rewriter_capability(), output);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (has_crossing_edge_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->crossing_edge_behavior(), output);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (has_language_aware_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->language_aware_input(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool zero_query_suggestion = 1 [default = false];
  if (has_zero_query_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->zero_query_suggestion(), target);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (has_mixed_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mixed_conversion(), target);
  }

  // optional bool combine_all_segments = 3 [default = false];
  if (has_combine_all_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->combine_all_segments(), target);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (has_special_romanji_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->special_romanji_table(), target);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (has_space_on_alphanumeric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->space_on_alphanumeric(), target);
  }

  // optional string keyboard_name = 7;
  if (has_keyboard_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyboard_name().data(), this->keyboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->keyboard_name(), target);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (has_update_input_mode_from_surrounding_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->update_input_mode_from_surrounding_text(), target);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (has_kana_modifier_insensitive_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->kana_modifier_insensitive_conversion(), target);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (has_auto_partial_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->auto_partial_suggestion(), target);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (has_available_emoji_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->available_emoji_carrier(), target);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (has_emoji_rewriter_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->emoji_rewriter_capability(), target);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (has_crossing_edge_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->crossing_edge_behavior(), target);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (has_language_aware_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->language_aware_input(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool zero_query_suggestion = 1 [default = false];
    if (has_zero_query_suggestion()) {
      total_size += 1 + 1;
    }

    // optional bool mixed_conversion = 2 [default = false];
    if (has_mixed_conversion()) {
      total_size += 1 + 1;
    }

    // optional bool combine_all_segments = 3 [default = false];
    if (has_combine_all_segments()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
    if (has_special_romanji_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_romanji_table());
    }

    // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
    if (has_space_on_alphanumeric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space_on_alphanumeric());
    }

    // optional string keyboard_name = 7;
    if (has_keyboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyboard_name());
    }

    // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
    if (has_update_input_mode_from_surrounding_text()) {
      total_size += 1 + 1;
    }

    // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
    if (has_kana_modifier_insensitive_conversion()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool auto_partial_suggestion = 10 [default = false];
    if (has_auto_partial_suggestion()) {
      total_size += 1 + 1;
    }

    // optional int32 available_emoji_carrier = 11 [default = 1];
    if (has_available_emoji_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available_emoji_carrier());
    }

    // optional int32 emoji_rewriter_capability = 12 [default = 1];
    if (has_emoji_rewriter_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emoji_rewriter_capability());
    }

    // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
    if (has_crossing_edge_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crossing_edge_behavior());
    }

    // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
    if (has_language_aware_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language_aware_input());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zero_query_suggestion()) {
      set_zero_query_suggestion(from.zero_query_suggestion());
    }
    if (from.has_mixed_conversion()) {
      set_mixed_conversion(from.mixed_conversion());
    }
    if (from.has_combine_all_segments()) {
      set_combine_all_segments(from.combine_all_segments());
    }
    if (from.has_special_romanji_table()) {
      set_special_romanji_table(from.special_romanji_table());
    }
    if (from.has_space_on_alphanumeric()) {
      set_space_on_alphanumeric(from.space_on_alphanumeric());
    }
    if (from.has_keyboard_name()) {
      set_keyboard_name(from.keyboard_name());
    }
    if (from.has_update_input_mode_from_surrounding_text()) {
      set_update_input_mode_from_surrounding_text(from.update_input_mode_from_surrounding_text());
    }
    if (from.has_kana_modifier_insensitive_conversion()) {
      set_kana_modifier_insensitive_conversion(from.kana_modifier_insensitive_conversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auto_partial_suggestion()) {
      set_auto_partial_suggestion(from.auto_partial_suggestion());
    }
    if (from.has_available_emoji_carrier()) {
      set_available_emoji_carrier(from.available_emoji_carrier());
    }
    if (from.has_emoji_rewriter_capability()) {
      set_emoji_rewriter_capability(from.emoji_rewriter_capability());
    }
    if (from.has_crossing_edge_behavior()) {
      set_crossing_edge_behavior(from.crossing_edge_behavior());
    }
    if (from.has_language_aware_input()) {
      set_language_aware_input(from.language_aware_input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(zero_query_suggestion_, other->zero_query_suggestion_);
    std::swap(mixed_conversion_, other->mixed_conversion_);
    std::swap(combine_all_segments_, other->combine_all_segments_);
    std::swap(special_romanji_table_, other->special_romanji_table_);
    std::swap(space_on_alphanumeric_, other->space_on_alphanumeric_);
    std::swap(keyboard_name_, other->keyboard_name_);
    std::swap(update_input_mode_from_surrounding_text_, other->update_input_mode_from_surrounding_text_);
    std::swap(kana_modifier_insensitive_conversion_, other->kana_modifier_insensitive_conversion_);
    std::swap(auto_partial_suggestion_, other->auto_partial_suggestion_);
    std::swap(available_emoji_carrier_, other->available_emoji_carrier_);
    std::swap(emoji_rewriter_capability_, other->emoji_rewriter_capability_);
    std::swap(crossing_edge_behavior_, other->crossing_edge_behavior_);
    std::swap(language_aware_input_, other->language_aware_input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationInfo::kProcessIdFieldNumber;
const int ApplicationInfo::kThreadIdFieldNumber;
const int ApplicationInfo::kTimezoneOffsetFieldNumber;
#endif  // !_MSC_VER

ApplicationInfo::ApplicationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationInfo::InitAsDefaultInstance() {
}

ApplicationInfo::ApplicationInfo(const ApplicationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationInfo::SharedCtor() {
  _cached_size_ = 0;
  process_id_ = 0u;
  thread_id_ = 0u;
  timezone_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationInfo::~ApplicationInfo() {
  SharedDtor();
}

void ApplicationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplicationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationInfo_descriptor_;
}

const ApplicationInfo& ApplicationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

ApplicationInfo* ApplicationInfo::default_instance_ = NULL;

ApplicationInfo* ApplicationInfo::New() const {
  return new ApplicationInfo;
}

void ApplicationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    process_id_ = 0u;
    thread_id_ = 0u;
    timezone_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 process_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }

      // optional uint32 thread_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 process_id = 1;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->process_id(), output);
  }

  // optional uint32 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_id(), output);
  }

  // optional int32 timezone_offset = 3;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timezone_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 process_id = 1;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->process_id(), target);
  }

  // optional uint32 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_id(), target);
  }

  // optional int32 timezone_offset = 3;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timezone_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 process_id = 1;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional int32 timezone_offset = 3;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationInfo::MergeFrom(const ApplicationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInfo::CopyFrom(const ApplicationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInfo::IsInitialized() const {

  return true;
}

void ApplicationInfo::Swap(ApplicationInfo* other) {
  if (other != this) {
    std::swap(process_id_, other->process_id_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(timezone_offset_, other->timezone_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationInfo_descriptor_;
  metadata.reflection = ApplicationInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Input_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_CommandType_descriptor_;
}
bool Input_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Input_CommandType Input::NONE;
const Input_CommandType Input::CREATE_SESSION;
const Input_CommandType Input::DELETE_SESSION;
const Input_CommandType Input::SEND_KEY;
const Input_CommandType Input::TEST_SEND_KEY;
const Input_CommandType Input::SEND_COMMAND;
const Input_CommandType Input::GET_CONFIG;
const Input_CommandType Input::SET_CONFIG;
const Input_CommandType Input::SET_IMPOSED_CONFIG;
const Input_CommandType Input::SET_REQUEST;
const Input_CommandType Input::SYNC_DATA;
const Input_CommandType Input::SHUTDOWN;
const Input_CommandType Input::RELOAD;
const Input_CommandType Input::CLEAR_USER_HISTORY;
const Input_CommandType Input::CLEAR_USER_PREDICTION;
const Input_CommandType Input::CLEAR_UNUSED_USER_PREDICTION;
const Input_CommandType Input::CLEANUP;
const Input_CommandType Input::NO_OPERATION;
const Input_CommandType Input::OBSOLETE_START_CLOUD_SYNC;
const Input_CommandType Input::OBSOLETE_GET_CLOUD_SYNC_STATUS;
const Input_CommandType Input::OBSOLETE_ADD_AUTH_CODE;
const Input_CommandType Input::INSERT_TO_STORAGE;
const Input_CommandType Input::READ_ALL_FROM_STORAGE;
const Input_CommandType Input::CLEAR_STORAGE;
const Input_CommandType Input::SEND_USER_DICTIONARY_COMMAND;
const Input_CommandType Input::NUM_OF_COMMANDS;
const Input_CommandType Input::CommandType_MIN;
const Input_CommandType Input::CommandType_MAX;
const int Input::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Input_TouchAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_TouchAction_descriptor_;
}
bool Input_TouchAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Input_TouchAction Input::TOUCH_DOWN;
const Input_TouchAction Input::TOUCH_MOVE;
const Input_TouchAction Input::TOUCH_UP;
const Input_TouchAction Input::TouchAction_MIN;
const Input_TouchAction Input::TouchAction_MAX;
const int Input::TouchAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Input_TouchPosition::kActionFieldNumber;
const int Input_TouchPosition::kXFieldNumber;
const int Input_TouchPosition::kYFieldNumber;
const int Input_TouchPosition::kTimestampFieldNumber;
#endif  // !_MSC_VER

Input_TouchPosition::Input_TouchPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Input_TouchPosition::InitAsDefaultInstance() {
}

Input_TouchPosition::Input_TouchPosition(const Input_TouchPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Input_TouchPosition::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  x_ = 0;
  y_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input_TouchPosition::~Input_TouchPosition() {
  SharedDtor();
}

void Input_TouchPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Input_TouchPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input_TouchPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_TouchPosition_descriptor_;
}

const Input_TouchPosition& Input_TouchPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Input_TouchPosition* Input_TouchPosition::default_instance_ = NULL;

Input_TouchPosition* Input_TouchPosition::New() const {
  return new Input_TouchPosition;
}

void Input_TouchPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    x_ = 0;
    y_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Input_TouchPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Input.TouchAction action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Input_TouchAction_IsValid(value)) {
            set_action(static_cast< ::mozc::commands::Input_TouchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input_TouchPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Input_TouchPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Input_TouchPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mozc.commands.Input.TouchAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input_TouchPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Input_TouchPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Input_TouchPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Input_TouchPosition::MergeFrom(const Input_TouchPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Input_TouchPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchPosition::CopyFrom(const Input_TouchPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchPosition::IsInitialized() const {

  return true;
}

void Input_TouchPosition::Swap(Input_TouchPosition* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Input_TouchPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_TouchPosition_descriptor_;
  metadata.reflection = Input_TouchPosition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Input_TouchEvent::kSourceIdFieldNumber;
const int Input_TouchEvent::kStrokeFieldNumber;
#endif  // !_MSC_VER

Input_TouchEvent::Input_TouchEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Input_TouchEvent::InitAsDefaultInstance() {
}

Input_TouchEvent::Input_TouchEvent(const Input_TouchEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Input_TouchEvent::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input_TouchEvent::~Input_TouchEvent() {
  SharedDtor();
}

void Input_TouchEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Input_TouchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input_TouchEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_TouchEvent_descriptor_;
}

const Input_TouchEvent& Input_TouchEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Input_TouchEvent* Input_TouchEvent::default_instance_ = NULL;

Input_TouchEvent* Input_TouchEvent::New() const {
  return new Input_TouchEvent;
}

void Input_TouchEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_id_ = 0u;
  }
  stroke_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Input_TouchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stroke;
        break;
      }

      // repeated .mozc.commands.Input.TouchPosition stroke = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stroke;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input_TouchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 source_id = 1;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_id(), output);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (int i = 0; i < this->stroke_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroke(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Input_TouchEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 source_id = 1;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_id(), target);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (int i = 0; i < this->stroke_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroke(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Input_TouchEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }

  }
  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  total_size += 1 * this->stroke_size();
  for (int i = 0; i < this->stroke_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stroke(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input_TouchEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Input_TouchEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Input_TouchEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Input_TouchEvent::MergeFrom(const Input_TouchEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  stroke_.MergeFrom(from.stroke_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Input_TouchEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchEvent::CopyFrom(const Input_TouchEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchEvent::IsInitialized() const {

  return true;
}

void Input_TouchEvent::Swap(Input_TouchEvent* other) {
  if (other != this) {
    std::swap(source_id_, other->source_id_);
    stroke_.Swap(&other->stroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Input_TouchEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_TouchEvent_descriptor_;
  metadata.reflection = Input_TouchEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Input::kTypeFieldNumber;
const int Input::kIdFieldNumber;
const int Input::kKeyFieldNumber;
const int Input::kCommandFieldNumber;
const int Input::kConfigFieldNumber;
const int Input::kContextFieldNumber;
const int Input::kCapabilityFieldNumber;
const int Input::kApplicationInfoFieldNumber;
const int Input::kRequestFieldNumber;
const int Input::kStorageEntryFieldNumber;
const int Input::kTouchEventsFieldNumber;
const int Input::kUserDictionaryCommandFieldNumber;
const int Input::kRequestSuggestionFieldNumber;
#endif  // !_MSC_VER

Input::Input()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Input::InitAsDefaultInstance() {
  key_ = const_cast< ::mozc::commands::KeyEvent*>(&::mozc::commands::KeyEvent::default_instance());
  command_ = const_cast< ::mozc::commands::SessionCommand*>(&::mozc::commands::SessionCommand::default_instance());
  config_ = const_cast< ::mozc::config::Config*>(&::mozc::config::Config::default_instance());
  context_ = const_cast< ::mozc::commands::Context*>(&::mozc::commands::Context::default_instance());
  capability_ = const_cast< ::mozc::commands::Capability*>(&::mozc::commands::Capability::default_instance());
  application_info_ = const_cast< ::mozc::commands::ApplicationInfo*>(&::mozc::commands::ApplicationInfo::default_instance());
  request_ = const_cast< ::mozc::commands::Request*>(&::mozc::commands::Request::default_instance());
  storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(&::mozc::commands::GenericStorageEntry::default_instance());
  user_dictionary_command_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommand*>(&::mozc::user_dictionary::UserDictionaryCommand::default_instance());
}

Input::Input(const Input& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Input::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  command_ = NULL;
  config_ = NULL;
  context_ = NULL;
  capability_ = NULL;
  application_info_ = NULL;
  request_ = NULL;
  storage_entry_ = NULL;
  user_dictionary_command_ = NULL;
  request_suggestion_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input::~Input() {
  SharedDtor();
}

void Input::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete command_;
    delete config_;
    delete context_;
    delete capability_;
    delete application_info_;
    delete request_;
    delete storage_entry_;
    delete user_dictionary_command_;
  }
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_descriptor_;
}

const Input& Input::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Input* Input::default_instance_ = NULL;

Input* Input::New() const {
  return new Input;
}

void Input::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != NULL) key_->::mozc::commands::KeyEvent::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::mozc::commands::SessionCommand::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::mozc::config::Config::Clear();
    }
    if (has_context()) {
      if (context_ != NULL) context_->::mozc::commands::Context::Clear();
    }
    if (has_capability()) {
      if (capability_ != NULL) capability_->::mozc::commands::Capability::Clear();
    }
    if (has_application_info()) {
      if (application_info_ != NULL) application_info_->::mozc::commands::ApplicationInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::mozc::commands::Request::Clear();
    }
    if (has_storage_entry()) {
      if (storage_entry_ != NULL) storage_entry_->::mozc::commands::GenericStorageEntry::Clear();
    }
    if (has_user_dictionary_command()) {
      if (user_dictionary_command_ != NULL) user_dictionary_command_->::mozc::user_dictionary::UserDictionaryCommand::Clear();
    }
    request_suggestion_ = true;
  }
  touch_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Input.CommandType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Input_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::Input_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional .mozc.commands.KeyEvent key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_command;
        break;
      }

      // optional .mozc.commands.SessionCommand command = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional .mozc.config.Config config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_context;
        break;
      }

      // optional .mozc.commands.Context context = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_capability;
        break;
      }

      // optional .mozc.commands.Capability capability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_application_info;
        break;
      }

      // optional .mozc.commands.ApplicationInfo application_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_request;
        break;
      }

      // optional .mozc.commands.Request request = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_storage_entry;
        break;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_touch_events;
        break;
      }

      // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touch_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touch_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_touch_events;
        if (input->ExpectTag(106)) goto parse_user_dictionary_command;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_dictionary_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_dictionary_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_request_suggestion;
        break;
      }

      // optional bool request_suggestion = 14 [default = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_suggestion_)));
          set_has_request_suggestion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.commands.Input.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->key(), output);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->command(), output);
  }

  // optional .mozc.config.Config config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->config(), output);
  }

  // optional .mozc.commands.Context context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->context(), output);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->capability(), output);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (has_application_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->application_info(), output);
  }

  // optional .mozc.commands.Request request = 9;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->request(), output);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (has_storage_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->storage_entry(), output);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (int i = 0; i < this->touch_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->touch_events(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (has_user_dictionary_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->user_dictionary_command(), output);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (has_request_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->request_suggestion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Input::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.commands.Input.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->key(), target);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->command(), target);
  }

  // optional .mozc.config.Config config = 5;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->config(), target);
  }

  // optional .mozc.commands.Context context = 6;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->context(), target);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->capability(), target);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (has_application_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->application_info(), target);
  }

  // optional .mozc.commands.Request request = 9;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->request(), target);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (has_storage_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->storage_entry(), target);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (int i = 0; i < this->touch_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->touch_events(i), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (has_user_dictionary_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->user_dictionary_command(), target);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (has_request_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->request_suggestion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Input::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.commands.Input.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .mozc.commands.KeyEvent key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .mozc.commands.SessionCommand command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .mozc.config.Config config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional .mozc.commands.Context context = 6;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }

    // optional .mozc.commands.Capability capability = 7;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capability());
    }

    // optional .mozc.commands.ApplicationInfo application_info = 8;
    if (has_application_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mozc.commands.Request request = 9;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
    if (has_storage_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage_entry());
    }

    // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
    if (has_user_dictionary_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_dictionary_command());
    }

    // optional bool request_suggestion = 14 [default = true];
    if (has_request_suggestion()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  total_size += 1 * this->touch_events_size();
  for (int i = 0; i < this->touch_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touch_events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Input* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Input*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
  GOOGLE_CHECK_NE(&from, this);
  touch_events_.MergeFrom(from.touch_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from.key());
    }
    if (from.has_command()) {
      mutable_command()->::mozc::commands::SessionCommand::MergeFrom(from.command());
    }
    if (from.has_config()) {
      mutable_config()->::mozc::config::Config::MergeFrom(from.config());
    }
    if (from.has_context()) {
      mutable_context()->::mozc::commands::Context::MergeFrom(from.context());
    }
    if (from.has_capability()) {
      mutable_capability()->::mozc::commands::Capability::MergeFrom(from.capability());
    }
    if (from.has_application_info()) {
      mutable_application_info()->::mozc::commands::ApplicationInfo::MergeFrom(from.application_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_request()) {
      mutable_request()->::mozc::commands::Request::MergeFrom(from.request());
    }
    if (from.has_storage_entry()) {
      mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from.storage_entry());
    }
    if (from.has_user_dictionary_command()) {
      mutable_user_dictionary_command()->::mozc::user_dictionary::UserDictionaryCommand::MergeFrom(from.user_dictionary_command());
    }
    if (from.has_request_suggestion()) {
      set_request_suggestion(from.request_suggestion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_user_dictionary_command()) {
    if (!this->user_dictionary_command().IsInitialized()) return false;
  }
  return true;
}

void Input::Swap(Input* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(command_, other->command_);
    std::swap(config_, other->config_);
    std::swap(context_, other->context_);
    std::swap(capability_, other->capability_);
    std::swap(application_info_, other->application_info_);
    std::swap(request_, other->request_);
    std::swap(storage_entry_, other->storage_entry_);
    touch_events_.Swap(&other->touch_events_);
    std::swap(user_dictionary_command_, other->user_dictionary_command_);
    std::swap(request_suggestion_, other->request_suggestion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_descriptor_;
  metadata.reflection = Input_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Result_ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_ResultType_descriptor_;
}
bool Result_ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Result_ResultType Result::NONE;
const Result_ResultType Result::STRING;
const Result_ResultType Result::ResultType_MIN;
const Result_ResultType Result::ResultType_MAX;
const int Result::ResultType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Result::kTypeFieldNumber;
const int Result::kValueFieldNumber;
const int Result::kKeyFieldNumber;
const int Result::kCursorOffsetFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cursor_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  SharedDtor();
}

void Result::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    cursor_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Result.ResultType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Result_ResultType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::Result_ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cursor_offset;
        break;
      }

      // optional int32 cursor_offset = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursor_offset_)));
          set_has_cursor_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.commands.Result.ResultType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (has_cursor_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cursor_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.commands.Result.ResultType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (has_cursor_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cursor_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.commands.Result.ResultType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 cursor_offset = 4 [default = 0];
    if (has_cursor_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursor_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_cursor_offset()) {
      set_cursor_offset(from.cursor_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(key_, other->key_);
    std::swap(cursor_offset_, other->cursor_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Preedit_Segment_Annotation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preedit_Segment_Annotation_descriptor_;
}
bool Preedit_Segment_Annotation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Preedit_Segment_Annotation Preedit_Segment::NONE;
const Preedit_Segment_Annotation Preedit_Segment::UNDERLINE;
const Preedit_Segment_Annotation Preedit_Segment::HIGHLIGHT;
const Preedit_Segment_Annotation Preedit_Segment::Annotation_MIN;
const Preedit_Segment_Annotation Preedit_Segment::Annotation_MAX;
const int Preedit_Segment::Annotation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Preedit_Segment::kAnnotationFieldNumber;
const int Preedit_Segment::kValueFieldNumber;
const int Preedit_Segment::kValueLengthFieldNumber;
const int Preedit_Segment::kKeyFieldNumber;
#endif  // !_MSC_VER

Preedit_Segment::Preedit_Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Preedit_Segment::InitAsDefaultInstance() {
}

Preedit_Segment::Preedit_Segment(const Preedit_Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Preedit_Segment::SharedCtor() {
  _cached_size_ = 0;
  annotation_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_length_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Preedit_Segment::~Preedit_Segment() {
  SharedDtor();
}

void Preedit_Segment::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Preedit_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preedit_Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preedit_Segment_descriptor_;
}

const Preedit_Segment& Preedit_Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Preedit_Segment* Preedit_Segment::default_instance_ = NULL;

Preedit_Segment* Preedit_Segment::New() const {
  return new Preedit_Segment;
}

void Preedit_Segment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    annotation_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    value_length_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Preedit_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Preedit_Segment_Annotation_IsValid(value)) {
            set_annotation(static_cast< ::mozc::commands::Preedit_Segment_Annotation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value_length;
        break;
      }

      // required uint32 value_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_length_)));
          set_has_value_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // optional string key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Preedit_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->annotation(), output);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  // required uint32 value_length = 5;
  if (has_value_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value_length(), output);
  }

  // optional string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Preedit_Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->annotation(), target);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // required uint32 value_length = 5;
  if (has_value_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value_length(), target);
  }

  // optional string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Preedit_Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation());
    }

    // required string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // required uint32 value_length = 5;
    if (has_value_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_length());
    }

    // optional string key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preedit_Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Preedit_Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Preedit_Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Preedit_Segment::MergeFrom(const Preedit_Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_annotation()) {
      set_annotation(from.annotation());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value_length()) {
      set_value_length(from.value_length());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Preedit_Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit_Segment::CopyFrom(const Preedit_Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit_Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Preedit_Segment::Swap(Preedit_Segment* other) {
  if (other != this) {
    std::swap(annotation_, other->annotation_);
    std::swap(value_, other->value_);
    std::swap(value_length_, other->value_length_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Preedit_Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Preedit_Segment_descriptor_;
  metadata.reflection = Preedit_Segment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Preedit::kCursorFieldNumber;
const int Preedit::kSegmentFieldNumber;
const int Preedit::kHighlightedPositionFieldNumber;
#endif  // !_MSC_VER

Preedit::Preedit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Preedit::InitAsDefaultInstance() {
}

Preedit::Preedit(const Preedit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Preedit::SharedCtor() {
  _cached_size_ = 0;
  cursor_ = 0u;
  highlighted_position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Preedit::~Preedit() {
  SharedDtor();
}

void Preedit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Preedit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preedit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preedit_descriptor_;
}

const Preedit& Preedit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Preedit* Preedit::default_instance_ = NULL;

Preedit* Preedit::New() const {
  return new Preedit;
}

void Preedit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cursor_ = 0u;
    highlighted_position_ = 0u;
  }
  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Preedit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cursor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
          set_has_cursor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_segment;
        break;
      }

      // repeated group Segment = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_segment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_segment;
        if (input->ExpectTag(24)) goto parse_highlighted_position;
        break;
      }

      // optional uint32 highlighted_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highlighted_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlighted_position_)));
          set_has_highlighted_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Preedit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cursor = 1;
  if (has_cursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursor(), output);
  }

  // repeated group Segment = 2 {
  for (int i = 0; i < this->segment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->segment(i), output);
  }

  // optional uint32 highlighted_position = 3;
  if (has_highlighted_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->highlighted_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Preedit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cursor = 1;
  if (has_cursor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cursor(), target);
  }

  // repeated group Segment = 2 {
  for (int i = 0; i < this->segment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->segment(i), target);
  }

  // optional uint32 highlighted_position = 3;
  if (has_highlighted_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->highlighted_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Preedit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cursor = 1;
    if (has_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor());
    }

    // optional uint32 highlighted_position = 3;
    if (has_highlighted_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highlighted_position());
    }

  }
  // repeated group Segment = 2 {
  total_size += 2 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->segment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preedit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Preedit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Preedit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Preedit::MergeFrom(const Preedit& from) {
  GOOGLE_CHECK_NE(&from, this);
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor()) {
      set_cursor(from.cursor());
    }
    if (from.has_highlighted_position()) {
      set_highlighted_position(from.highlighted_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Preedit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit::CopyFrom(const Preedit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < segment_size(); i++) {
    if (!this->segment(i).IsInitialized()) return false;
  }
  return true;
}

void Preedit::Swap(Preedit* other) {
  if (other != this) {
    std::swap(cursor_, other->cursor_);
    segment_.Swap(&other->segment_);
    std::swap(highlighted_position_, other->highlighted_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Preedit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Preedit_descriptor_;
  metadata.reflection = Preedit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kActivatedFieldNumber;
const int Status::kModeFieldNumber;
const int Status::kComebackModeFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  activated_ = false;
  mode_ = 0;
  comeback_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activated_ = false;
    mode_ = 0;
    comeback_mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool activated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
          set_has_activated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_comeback_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode comeback_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comeback_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_comeback_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool activated = 1;
  if (has_activated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->activated(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (has_comeback_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->comeback_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool activated = 1;
  if (has_activated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->activated(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (has_comeback_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->comeback_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool activated = 1;
    if (has_activated()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .mozc.commands.CompositionMode comeback_mode = 3;
    if (has_comeback_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comeback_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activated()) {
      set_activated(from.activated());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_comeback_mode()) {
      set_comeback_mode(from.comeback_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(activated_, other->activated_);
    std::swap(mode_, other->mode_);
    std::swap(comeback_mode_, other->comeback_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletionRange::kOffsetFieldNumber;
const int DeletionRange::kLengthFieldNumber;
#endif  // !_MSC_VER

DeletionRange::DeletionRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletionRange::InitAsDefaultInstance() {
}

DeletionRange::DeletionRange(const DeletionRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletionRange::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletionRange::~DeletionRange() {
  SharedDtor();
}

void DeletionRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletionRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletionRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletionRange_descriptor_;
}

const DeletionRange& DeletionRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

DeletionRange* DeletionRange::default_instance_ = NULL;

DeletionRange* DeletionRange::New() const {
  return new DeletionRange;
}

void DeletionRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletionRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeletionRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletionRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletionRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletionRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletionRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletionRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletionRange::MergeFrom(const DeletionRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletionRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletionRange::CopyFrom(const DeletionRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletionRange::IsInitialized() const {

  return true;
}

void DeletionRange::Swap(DeletionRange* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletionRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletionRange_descriptor_;
  metadata.reflection = DeletionRange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Output_PreeditMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_PreeditMethod_descriptor_;
}
bool Output_PreeditMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Output_PreeditMethod Output::ASCII;
const Output_PreeditMethod Output::KANA;
const Output_PreeditMethod Output::PreeditMethod_MIN;
const Output_PreeditMethod Output::PreeditMethod_MAX;
const int Output::PreeditMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Output_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_ErrorCode_descriptor_;
}
bool Output_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Output_ErrorCode Output::SESSION_SUCCESS;
const Output_ErrorCode Output::SESSION_FAILURE;
const Output_ErrorCode Output::ErrorCode_MIN;
const Output_ErrorCode Output::ErrorCode_MAX;
const int Output::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Output_ToolMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_ToolMode_descriptor_;
}
bool Output_ToolMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Output_ToolMode Output::NO_TOOL;
const Output_ToolMode Output::CONFIG_DIALOG;
const Output_ToolMode Output::DICTIONARY_TOOL;
const Output_ToolMode Output::WORD_REGISTER_DIALOG;
const Output_ToolMode Output::ToolMode_MIN;
const Output_ToolMode Output::ToolMode_MAX;
const int Output::ToolMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Output_Callback::kSessionCommandFieldNumber;
const int Output_Callback::kDelayMillisecFieldNumber;
#endif  // !_MSC_VER

Output_Callback::Output_Callback()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Output_Callback::InitAsDefaultInstance() {
  session_command_ = const_cast< ::mozc::commands::SessionCommand*>(&::mozc::commands::SessionCommand::default_instance());
}

Output_Callback::Output_Callback(const Output_Callback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Output_Callback::SharedCtor() {
  _cached_size_ = 0;
  session_command_ = NULL;
  delay_millisec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Output_Callback::~Output_Callback() {
  SharedDtor();
}

void Output_Callback::SharedDtor() {
  if (this != default_instance_) {
    delete session_command_;
  }
}

void Output_Callback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output_Callback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_Callback_descriptor_;
}

const Output_Callback& Output_Callback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Output_Callback* Output_Callback::default_instance_ = NULL;

Output_Callback* Output_Callback::New() const {
  return new Output_Callback;
}

void Output_Callback::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_command()) {
      if (session_command_ != NULL) session_command_->::mozc::commands::SessionCommand::Clear();
    }
    delay_millisec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Output_Callback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.SessionCommand session_command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delay_millisec;
        break;
      }

      // optional uint32 delay_millisec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_millisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_millisec_)));
          set_has_delay_millisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Output_Callback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (has_session_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session_command(), output);
  }

  // optional uint32 delay_millisec = 2;
  if (has_delay_millisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay_millisec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Output_Callback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (has_session_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session_command(), target);
  }

  // optional uint32 delay_millisec = 2;
  if (has_delay_millisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay_millisec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Output_Callback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mozc.commands.SessionCommand session_command = 1;
    if (has_session_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_command());
    }

    // optional uint32 delay_millisec = 2;
    if (has_delay_millisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_millisec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output_Callback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Output_Callback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Output_Callback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Output_Callback::MergeFrom(const Output_Callback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_command()) {
      mutable_session_command()->::mozc::commands::SessionCommand::MergeFrom(from.session_command());
    }
    if (from.has_delay_millisec()) {
      set_delay_millisec(from.delay_millisec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Output_Callback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output_Callback::CopyFrom(const Output_Callback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output_Callback::IsInitialized() const {

  if (has_session_command()) {
    if (!this->session_command().IsInitialized()) return false;
  }
  return true;
}

void Output_Callback::Swap(Output_Callback* other) {
  if (other != this) {
    std::swap(session_command_, other->session_command_);
    std::swap(delay_millisec_, other->delay_millisec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Output_Callback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Output_Callback_descriptor_;
  metadata.reflection = Output_Callback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Output::kIdFieldNumber;
const int Output::kModeFieldNumber;
const int Output::kConsumedFieldNumber;
const int Output::kResultFieldNumber;
const int Output::kPreeditFieldNumber;
const int Output::kCandidatesFieldNumber;
const int Output::kKeyFieldNumber;
const int Output::kUrlFieldNumber;
const int Output::kConfigFieldNumber;
const int Output::kPreeditMethodFieldNumber;
const int Output::kErrorCodeFieldNumber;
const int Output::kStatusFieldNumber;
const int Output::kAllCandidateWordsFieldNumber;
const int Output::kDeletionRangeFieldNumber;
const int Output::kLaunchToolModeFieldNumber;
const int Output::kCallbackFieldNumber;
const int Output::kStorageEntryFieldNumber;
const int Output::kUserDictionaryCommandStatusFieldNumber;
#endif  // !_MSC_VER

Output::Output()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Output::InitAsDefaultInstance() {
  result_ = const_cast< ::mozc::commands::Result*>(&::mozc::commands::Result::default_instance());
  preedit_ = const_cast< ::mozc::commands::Preedit*>(&::mozc::commands::Preedit::default_instance());
  candidates_ = const_cast< ::mozc::commands::Candidates*>(&::mozc::commands::Candidates::default_instance());
  key_ = const_cast< ::mozc::commands::KeyEvent*>(&::mozc::commands::KeyEvent::default_instance());
  config_ = const_cast< ::mozc::config::Config*>(&::mozc::config::Config::default_instance());
  status_ = const_cast< ::mozc::commands::Status*>(&::mozc::commands::Status::default_instance());
  all_candidate_words_ = const_cast< ::mozc::commands::CandidateList*>(&::mozc::commands::CandidateList::default_instance());
  deletion_range_ = const_cast< ::mozc::commands::DeletionRange*>(&::mozc::commands::DeletionRange::default_instance());
  callback_ = const_cast< ::mozc::commands::Output_Callback*>(&::mozc::commands::Output_Callback::default_instance());
  storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(&::mozc::commands::GenericStorageEntry::default_instance());
  user_dictionary_command_status_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus*>(&::mozc::user_dictionary::UserDictionaryCommandStatus::default_instance());
}

Output::Output(const Output& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Output::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  mode_ = 0;
  consumed_ = false;
  result_ = NULL;
  preedit_ = NULL;
  candidates_ = NULL;
  key_ = NULL;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = NULL;
  preedit_method_ = 0;
  error_code_ = 0;
  status_ = NULL;
  all_candidate_words_ = NULL;
  deletion_range_ = NULL;
  launch_tool_mode_ = 0;
  callback_ = NULL;
  storage_entry_ = NULL;
  user_dictionary_command_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Output::~Output() {
  SharedDtor();
}

void Output::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
    delete result_;
    delete preedit_;
    delete candidates_;
    delete key_;
    delete config_;
    delete status_;
    delete all_candidate_words_;
    delete deletion_range_;
    delete callback_;
    delete storage_entry_;
    delete user_dictionary_command_status_;
  }
}

void Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_descriptor_;
}

const Output& Output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Output* Output::default_instance_ = NULL;

Output* Output::New() const {
  return new Output;
}

void Output::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    mode_ = 0;
    consumed_ = false;
    if (has_result()) {
      if (result_ != NULL) result_->::mozc::commands::Result::Clear();
    }
    if (has_preedit()) {
      if (preedit_ != NULL) preedit_->::mozc::commands::Preedit::Clear();
    }
    if (has_candidates()) {
      if (candidates_ != NULL) candidates_->::mozc::commands::Candidates::Clear();
    }
    if (has_key()) {
      if (key_ != NULL) key_->::mozc::commands::KeyEvent::Clear();
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::mozc::config::Config::Clear();
    }
    preedit_method_ = 0;
    error_code_ = 0;
    if (has_status()) {
      if (status_ != NULL) status_->::mozc::commands::Status::Clear();
    }
    if (has_all_candidate_words()) {
      if (all_candidate_words_ != NULL) all_candidate_words_->::mozc::commands::CandidateList::Clear();
    }
    if (has_deletion_range()) {
      if (deletion_range_ != NULL) deletion_range_->::mozc::commands::DeletionRange::Clear();
    }
    launch_tool_mode_ = 0;
    if (has_callback()) {
      if (callback_ != NULL) callback_->::mozc::commands::Output_Callback::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_storage_entry()) {
      if (storage_entry_ != NULL) storage_entry_->::mozc::commands::GenericStorageEntry::Clear();
    }
    if (has_user_dictionary_command_status()) {
      if (user_dictionary_command_status_ != NULL) user_dictionary_command_status_->::mozc::user_dictionary::UserDictionaryCommandStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consumed;
        break;
      }

      // optional bool consumed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consumed_)));
          set_has_consumed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // optional .mozc.commands.Result result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_preedit;
        break;
      }

      // optional .mozc.commands.Preedit preedit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preedit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preedit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_candidates;
        break;
      }

      // optional .mozc.commands.Candidates candidates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional .mozc.commands.KeyEvent key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional string url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_config;
        break;
      }

      // optional .mozc.config.Config config = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preedit_method;
        break;
      }

      // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preedit_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_PreeditMethod_IsValid(value)) {
            set_preedit_method(static_cast< ::mozc::commands::Output_PreeditMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_error_code;
        break;
      }

      // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::mozc::commands::Output_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_status;
        break;
      }

      // optional .mozc.commands.Status status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_all_candidate_words;
        break;
      }

      // optional .mozc.commands.CandidateList all_candidate_words = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_candidate_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_candidate_words()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_deletion_range;
        break;
      }

      // optional .mozc.commands.DeletionRange deletion_range = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deletion_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletion_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_launch_tool_mode;
        break;
      }

      // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launch_tool_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_ToolMode_IsValid(value)) {
            set_launch_tool_mode(static_cast< ::mozc::commands::Output_ToolMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_callback;
        break;
      }

      // optional .mozc.commands.Output.Callback callback = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callback()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_storage_entry;
        break;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_user_dictionary_command_status;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_dictionary_command_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_dictionary_command_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional bool consumed = 3;
  if (has_consumed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->consumed(), output);
  }

  // optional .mozc.commands.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (has_preedit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->preedit(), output);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (has_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->candidates(), output);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->key(), output);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->url(), output);
  }

  // optional .mozc.config.Config config = 9;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->config(), output);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (has_preedit_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->preedit_method(), output);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error_code(), output);
  }

  // optional .mozc.commands.Status status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->status(), output);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (has_all_candidate_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->all_candidate_words(), output);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (has_deletion_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->deletion_range(), output);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (has_launch_tool_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->launch_tool_mode(), output);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (has_callback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->callback(), output);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (has_storage_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->storage_entry(), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (has_user_dictionary_command_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->user_dictionary_command_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Output::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional bool consumed = 3;
  if (has_consumed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->consumed(), target);
  }

  // optional .mozc.commands.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (has_preedit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->preedit(), target);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (has_candidates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->candidates(), target);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->key(), target);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional .mozc.config.Config config = 9;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->config(), target);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (has_preedit_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->preedit_method(), target);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->error_code(), target);
  }

  // optional .mozc.commands.Status status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->status(), target);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (has_all_candidate_words()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->all_candidate_words(), target);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (has_deletion_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->deletion_range(), target);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (has_launch_tool_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->launch_tool_mode(), target);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (has_callback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->callback(), target);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (has_storage_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->storage_entry(), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (has_user_dictionary_command_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->user_dictionary_command_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Output::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional bool consumed = 3;
    if (has_consumed()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .mozc.commands.Preedit preedit = 5;
    if (has_preedit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preedit());
    }

    // optional .mozc.commands.Candidates candidates = 6;
    if (has_candidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->candidates());
    }

    // optional .mozc.commands.KeyEvent key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mozc.config.Config config = 9;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
    if (has_preedit_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_method());
    }

    // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .mozc.commands.Status status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .mozc.commands.CandidateList all_candidate_words = 14;
    if (has_all_candidate_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_candidate_words());
    }

    // optional .mozc.commands.DeletionRange deletion_range = 16;
    if (has_deletion_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletion_range());
    }

    // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
    if (has_launch_tool_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->launch_tool_mode());
    }

    // optional .mozc.commands.Output.Callback callback = 18;
    if (has_callback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callback());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
    if (has_storage_entry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage_entry());
    }

    // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
    if (has_user_dictionary_command_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_dictionary_command_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Output* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Output*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_consumed()) {
      set_consumed(from.consumed());
    }
    if (from.has_result()) {
      mutable_result()->::mozc::commands::Result::MergeFrom(from.result());
    }
    if (from.has_preedit()) {
      mutable_preedit()->::mozc::commands::Preedit::MergeFrom(from.preedit());
    }
    if (from.has_candidates()) {
      mutable_candidates()->::mozc::commands::Candidates::MergeFrom(from.candidates());
    }
    if (from.has_key()) {
      mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from.key());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_config()) {
      mutable_config()->::mozc::config::Config::MergeFrom(from.config());
    }
    if (from.has_preedit_method()) {
      set_preedit_method(from.preedit_method());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_status()) {
      mutable_status()->::mozc::commands::Status::MergeFrom(from.status());
    }
    if (from.has_all_candidate_words()) {
      mutable_all_candidate_words()->::mozc::commands::CandidateList::MergeFrom(from.all_candidate_words());
    }
    if (from.has_deletion_range()) {
      mutable_deletion_range()->::mozc::commands::DeletionRange::MergeFrom(from.deletion_range());
    }
    if (from.has_launch_tool_mode()) {
      set_launch_tool_mode(from.launch_tool_mode());
    }
    if (from.has_callback()) {
      mutable_callback()->::mozc::commands::Output_Callback::MergeFrom(from.callback());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_storage_entry()) {
      mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from.storage_entry());
    }
    if (from.has_user_dictionary_command_status()) {
      mutable_user_dictionary_command_status()->::mozc::user_dictionary::UserDictionaryCommandStatus::MergeFrom(from.user_dictionary_command_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_preedit()) {
    if (!this->preedit().IsInitialized()) return false;
  }
  if (has_candidates()) {
    if (!this->candidates().IsInitialized()) return false;
  }
  if (has_callback()) {
    if (!this->callback().IsInitialized()) return false;
  }
  if (has_user_dictionary_command_status()) {
    if (!this->user_dictionary_command_status().IsInitialized()) return false;
  }
  return true;
}

void Output::Swap(Output* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mode_, other->mode_);
    std::swap(consumed_, other->consumed_);
    std::swap(result_, other->result_);
    std::swap(preedit_, other->preedit_);
    std::swap(candidates_, other->candidates_);
    std::swap(key_, other->key_);
    std::swap(url_, other->url_);
    std::swap(config_, other->config_);
    std::swap(preedit_method_, other->preedit_method_);
    std::swap(error_code_, other->error_code_);
    std::swap(status_, other->status_);
    std::swap(all_candidate_words_, other->all_candidate_words_);
    std::swap(deletion_range_, other->deletion_range_);
    std::swap(launch_tool_mode_, other->launch_tool_mode_);
    std::swap(callback_, other->callback_);
    std::swap(storage_entry_, other->storage_entry_);
    std::swap(user_dictionary_command_status_, other->user_dictionary_command_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Output_descriptor_;
  metadata.reflection = Output_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kInputFieldNumber;
const int Command::kOutputFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  input_ = const_cast< ::mozc::commands::Input*>(&::mozc::commands::Input::default_instance());
  output_ = const_cast< ::mozc::commands::Output*>(&::mozc::commands::Output::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  input_ = NULL;
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete input_;
    delete output_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_input()) {
      if (input_ != NULL) input_->::mozc::commands::Input::Clear();
    }
    if (has_output()) {
      if (output_ != NULL) output_->::mozc::commands::Output::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Input input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // required .mozc.commands.Output output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mozc.commands.Input input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->input(), output);
  }

  // required .mozc.commands.Output output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->output(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mozc.commands.Input input = 1;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->input(), target);
  }

  // required .mozc.commands.Output output = 2;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->output(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mozc.commands.Input input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input());
    }

    // required .mozc.commands.Output output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      mutable_input()->::mozc::commands::Input::MergeFrom(from.input());
    }
    if (from.has_output()) {
      mutable_output()->::mozc::commands::Output::MergeFrom(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_input()) {
    if (!this->input().IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(input_, other->input_);
    std::swap(output_, other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandList::kCommandsFieldNumber;
#endif  // !_MSC_VER

CommandList::CommandList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandList::InitAsDefaultInstance() {
}

CommandList::CommandList(const CommandList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandList::~CommandList() {
  SharedDtor();
}

void CommandList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandList_descriptor_;
}

const CommandList& CommandList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcommands_2eproto();
  return *default_instance_;
}

CommandList* CommandList::default_instance_ = NULL;

CommandList* CommandList::New() const {
  return new CommandList;
}

void CommandList::Clear() {
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mozc.commands.Command commands = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mozc.commands.Command commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mozc.commands.Command commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandList::ByteSize() const {
  int total_size = 0;

  // repeated .mozc.commands.Command commands = 1;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandList::MergeFrom(const CommandList& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandList::CopyFrom(const CommandList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandList::IsInitialized() const {

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void CommandList::Swap(CommandList* other) {
  if (other != this) {
    commands_.Swap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandList_descriptor_;
  metadata.reflection = CommandList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
