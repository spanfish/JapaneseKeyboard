// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session/candidates.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session/candidates.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* Annotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Information_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Information_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rectangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rectangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* InformationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InformationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Footer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Footer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Candidates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Candidates_reflection_ = NULL;
const ::google::protobuf::Descriptor* Candidates_Candidate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Candidates_Candidate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Candidates_Direction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Candidates_CandidateWindowLocation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Category_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DisplayType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_session_2fcandidates_2eproto() {
  protobuf_AddDesc_session_2fcandidates_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "session/candidates.proto");
  GOOGLE_CHECK(file != NULL);
  Annotation_descriptor_ = file->message_type(0);
  static const int Annotation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, deletable_),
  };
  Annotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotation_descriptor_,
      Annotation::default_instance_,
      Annotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotation));
  Information_descriptor_ = file->message_type(1);
  static const int Information_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, candidate_id_),
  };
  Information_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Information_descriptor_,
      Information::default_instance_,
      Information_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Information));
  Rectangle_descriptor_ = file->message_type(2);
  static const int Rectangle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, height_),
  };
  Rectangle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rectangle_descriptor_,
      Rectangle::default_instance_,
      Rectangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rectangle));
  InformationList_descriptor_ = file->message_type(3);
  static const int InformationList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, focused_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, display_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, delay_),
  };
  InformationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InformationList_descriptor_,
      InformationList::default_instance_,
      InformationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InformationList));
  Footer_descriptor_ = file->message_type(4);
  static const int Footer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, index_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, logo_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, sub_label_),
  };
  Footer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Footer_descriptor_,
      Footer::default_instance_,
      Footer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Footer));
  CandidateWord_descriptor_ = file->message_type(5);
  static const int CandidateWord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, annotation_),
  };
  CandidateWord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CandidateWord_descriptor_,
      CandidateWord::default_instance_,
      CandidateWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CandidateWord));
  CandidateList_descriptor_ = file->message_type(6);
  static const int CandidateList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, focused_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, category_),
  };
  CandidateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CandidateList_descriptor_,
      CandidateList::default_instance_,
      CandidateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CandidateList));
  Candidates_descriptor_ = file->message_type(7);
  static const int Candidates_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, focused_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, candidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, subcandidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, usages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, display_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, composition_rectangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, caret_rectangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, window_location_),
  };
  Candidates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Candidates_descriptor_,
      Candidates::default_instance_,
      Candidates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Candidates));
  Candidates_Candidate_descriptor_ = Candidates_descriptor_->nested_type(0);
  static const int Candidates_Candidate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, annotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, information_id_),
  };
  Candidates_Candidate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Candidates_Candidate_descriptor_,
      Candidates_Candidate::default_instance_,
      Candidates_Candidate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Candidates_Candidate));
  Candidates_Direction_descriptor_ = Candidates_descriptor_->enum_type(0);
  Candidates_CandidateWindowLocation_descriptor_ = Candidates_descriptor_->enum_type(1);
  Category_descriptor_ = file->enum_type(0);
  DisplayType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_session_2fcandidates_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotation_descriptor_, &Annotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Information_descriptor_, &Information::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rectangle_descriptor_, &Rectangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InformationList_descriptor_, &InformationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Footer_descriptor_, &Footer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CandidateWord_descriptor_, &CandidateWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CandidateList_descriptor_, &CandidateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Candidates_descriptor_, &Candidates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Candidates_Candidate_descriptor_, &Candidates_Candidate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_session_2fcandidates_2eproto() {
  delete Annotation::default_instance_;
  delete Annotation_reflection_;
  delete Information::default_instance_;
  delete Information_reflection_;
  delete Rectangle::default_instance_;
  delete Rectangle_reflection_;
  delete InformationList::default_instance_;
  delete InformationList_reflection_;
  delete Footer::default_instance_;
  delete Footer_reflection_;
  delete CandidateWord::default_instance_;
  delete CandidateWord_reflection_;
  delete CandidateList::default_instance_;
  delete CandidateList_reflection_;
  delete Candidates::default_instance_;
  delete Candidates_reflection_;
  delete Candidates_Candidate::default_instance_;
  delete Candidates_Candidate_reflection_;
}

void protobuf_AddDesc_session_2fcandidates_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030session/candidates.proto\022\rmozc.command"
    "s\"m\n\nAnnotation\022\016\n\006prefix\030\001 \001(\t\022\016\n\006suffi"
    "x\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\020\n\010shortcut"
    "\030\004 \001(\t\022\030\n\tdeletable\030\005 \001(\010:\005false\"S\n\013Info"
    "rmation\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\023\n\013de"
    "scription\030\003 \001(\t\022\024\n\014candidate_id\030\004 \003(\005\"@\n"
    "\tRectangle\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\r\n\005widt"
    "h\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\"\337\001\n\017InformationL"
    "ist\022\025\n\rfocused_index\030\001 \001(\r\022/\n\013informatio"
    "n\030\002 \003(\0132\032.mozc.commands.Information\0225\n\010c"
    "ategory\030\003 \001(\0162\027.mozc.commands.Category:\n"
    "CONVERSION\0229\n\014display_type\030\004 \001(\0162\032.mozc."
    "commands.DisplayType:\007CASCADE\022\022\n\005delay\030\005"
    " \001(\r:\003500\"e\n\006Footer\022\r\n\005label\030\001 \001(\t\022\034\n\rin"
    "dex_visible\030\002 \001(\010:\005false\022\033\n\014logo_visible"
    "\030\003 \001(\010:\005false\022\021\n\tsub_label\030\004 \001(\t\"u\n\rCand"
    "idateWord\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001(\r\022\013\n\003"
    "key\030\003 \001(\t\022\r\n\005value\030\004 \001(\t\022-\n\nannotation\030\005"
    " \001(\0132\031.mozc.commands.Annotation\"\217\001\n\rCand"
    "idateList\022\025\n\rfocused_index\030\001 \001(\r\0220\n\ncand"
    "idates\030\002 \003(\0132\034.mozc.commands.CandidateWo"
    "rd\0225\n\010category\030\003 \001(\0162\027.mozc.commands.Cat"
    "egory:\nCONVERSION\"\315\006\n\nCandidates\022\025\n\rfocu"
    "sed_index\030\001 \001(\r\022\014\n\004size\030\002 \002(\r\0226\n\tcandida"
    "te\030\003 \003(\n2#.mozc.commands.Candidates.Cand"
    "idate\022\020\n\010position\030\006 \002(\r\0220\n\rsubcandidates"
    "\030\010 \001(\0132\031.mozc.commands.Candidates\022.\n\006usa"
    "ges\030\n \001(\0132\036.mozc.commands.InformationLis"
    "t\0225\n\010category\030\013 \001(\0162\027.mozc.commands.Cate"
    "gory:\nCONVERSION\0226\n\014display_type\030\014 \001(\0162\032"
    ".mozc.commands.DisplayType:\004MAIN\022%\n\006foot"
    "er\030\r \001(\0132\025.mozc.commands.Footer\022@\n\tdirec"
    "tion\030\016 \001(\0162#.mozc.commands.Candidates.Di"
    "rection:\010VERTICAL\0227\n\025composition_rectang"
    "le\030\017 \001(\0132\030.mozc.commands.Rectangle\0221\n\017ca"
    "ret_rectangle\030\020 \001(\0132\030.mozc.commands.Rect"
    "angle\022J\n\017window_location\030\021 \001(\01621.mozc.co"
    "mmands.Candidates.CandidateWindowLocatio"
    "n\032|\n\tCandidate\022\r\n\005index\030\004 \002(\r\022\r\n\005value\030\005"
    " \002(\t\022\n\n\002id\030\t \001(\005\022-\n\nannotation\030\007 \001(\0132\031.m"
    "ozc.commands.Annotation\022\026\n\016information_i"
    "d\030\n \001(\005\")\n\tDirection\022\014\n\010VERTICAL\020\000\022\016\n\nHO"
    "RIZONTAL\020\001\"5\n\027CandidateWindowLocation\022\t\n"
    "\005CARET\020\000\022\017\n\013COMPOSITION\020\001*Z\n\010Category\022\016\n"
    "\nCONVERSION\020\000\022\016\n\nPREDICTION\020\001\022\016\n\nSUGGEST"
    "ION\020\002\022\023\n\017TRANSLITERATION\020\003\022\t\n\005USAGE\020\004*$\n"
    "\013DisplayType\022\010\n\004MAIN\020\000\022\013\n\007CASCADE\020\001BA\n.o"
    "rg.mozc.android.inputmethod.japanese.pro"
    "tobufB\017ProtoCandidates", 1942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "session/candidates.proto", &protobuf_RegisterTypes);
  Annotation::default_instance_ = new Annotation();
  Information::default_instance_ = new Information();
  Rectangle::default_instance_ = new Rectangle();
  InformationList::default_instance_ = new InformationList();
  Footer::default_instance_ = new Footer();
  CandidateWord::default_instance_ = new CandidateWord();
  CandidateList::default_instance_ = new CandidateList();
  Candidates::default_instance_ = new Candidates();
  Candidates_Candidate::default_instance_ = new Candidates_Candidate();
  Annotation::default_instance_->InitAsDefaultInstance();
  Information::default_instance_->InitAsDefaultInstance();
  Rectangle::default_instance_->InitAsDefaultInstance();
  InformationList::default_instance_->InitAsDefaultInstance();
  Footer::default_instance_->InitAsDefaultInstance();
  CandidateWord::default_instance_->InitAsDefaultInstance();
  CandidateList::default_instance_->InitAsDefaultInstance();
  Candidates::default_instance_->InitAsDefaultInstance();
  Candidates_Candidate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_session_2fcandidates_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_session_2fcandidates_2eproto {
  StaticDescriptorInitializer_session_2fcandidates_2eproto() {
    protobuf_AddDesc_session_2fcandidates_2eproto();
  }
} static_descriptor_initializer_session_2fcandidates_2eproto_;
const ::google::protobuf::EnumDescriptor* Category_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Category_descriptor_;
}
bool Category_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisplayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayType_descriptor_;
}
bool DisplayType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Annotation::kPrefixFieldNumber;
const int Annotation::kSuffixFieldNumber;
const int Annotation::kDescriptionFieldNumber;
const int Annotation::kShortcutFieldNumber;
const int Annotation::kDeletableFieldNumber;
#endif  // !_MSC_VER

Annotation::Annotation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotation::InitAsDefaultInstance() {
}

Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotation::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortcut_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deletable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotation::~Annotation() {
  SharedDtor();
}

void Annotation::SharedDtor() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (shortcut_ != &::google::protobuf::internal::kEmptyString) {
    delete shortcut_;
  }
  if (this != default_instance_) {
  }
}

void Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotation_descriptor_;
}

const Annotation& Annotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

Annotation* Annotation::default_instance_ = NULL;

Annotation* Annotation::New() const {
  return new Annotation;
}

void Annotation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
    if (has_suffix()) {
      if (suffix_ != &::google::protobuf::internal::kEmptyString) {
        suffix_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_shortcut()) {
      if (shortcut_ != &::google::protobuf::internal::kEmptyString) {
        shortcut_->clear();
      }
    }
    deletable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_suffix;
        break;
      }

      // optional string suffix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shortcut;
        break;
      }

      // optional string shortcut = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortcut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcut()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shortcut().data(), this->shortcut().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deletable;
        break;
      }

      // optional bool deletable = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletable_)));
          set_has_deletable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prefix(), output);
  }

  // optional string suffix = 2;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->suffix(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // optional string shortcut = 4;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortcut().data(), this->shortcut().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->shortcut(), output);
  }

  // optional bool deletable = 5 [default = false];
  if (has_deletable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deletable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // optional string suffix = 2;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->suffix(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string shortcut = 4;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shortcut().data(), this->shortcut().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shortcut(), target);
  }

  // optional bool deletable = 5 [default = false];
  if (has_deletable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deletable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional string suffix = 2;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string shortcut = 4;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcut());
    }

    // optional bool deletable = 5 [default = false];
    if (has_deletable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_suffix()) {
      set_suffix(from.suffix());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_shortcut()) {
      set_shortcut(from.shortcut());
    }
    if (from.has_deletable()) {
      set_deletable(from.deletable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {

  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    std::swap(suffix_, other->suffix_);
    std::swap(description_, other->description_);
    std::swap(shortcut_, other->shortcut_);
    std::swap(deletable_, other->deletable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotation_descriptor_;
  metadata.reflection = Annotation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Information::kIdFieldNumber;
const int Information::kTitleFieldNumber;
const int Information::kDescriptionFieldNumber;
const int Information::kCandidateIdFieldNumber;
#endif  // !_MSC_VER

Information::Information()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Information::InitAsDefaultInstance() {
}

Information::Information(const Information& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Information::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Information::~Information() {
  SharedDtor();
}

void Information::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Information::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Information::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Information_descriptor_;
}

const Information& Information::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

Information* Information::default_instance_ = NULL;

Information* Information::New() const {
  return new Information;
}

void Information::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  candidate_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_candidate_id;
        break;
      }

      // repeated int32 candidate_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_candidate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_candidate_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_candidate_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_candidate_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // repeated int32 candidate_id = 4;
  for (int i = 0; i < this->candidate_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->candidate_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Information::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated int32 candidate_id = 4;
  for (int i = 0; i < this->candidate_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->candidate_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Information::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated int32 candidate_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->candidate_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->candidate_id(i));
    }
    total_size += 1 * this->candidate_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Information::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Information* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Information*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Information::MergeFrom(const Information& from) {
  GOOGLE_CHECK_NE(&from, this);
  candidate_id_.MergeFrom(from.candidate_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Information::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Information::CopyFrom(const Information& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Information::IsInitialized() const {

  return true;
}

void Information::Swap(Information* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    candidate_id_.Swap(&other->candidate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Information::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Information_descriptor_;
  metadata.reflection = Information_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rectangle::kXFieldNumber;
const int Rectangle::kYFieldNumber;
const int Rectangle::kWidthFieldNumber;
const int Rectangle::kHeightFieldNumber;
#endif  // !_MSC_VER

Rectangle::Rectangle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rectangle::InitAsDefaultInstance() {
}

Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rectangle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rectangle::~Rectangle() {
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rectangle_descriptor_;
}

const Rectangle& Rectangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

Rectangle* Rectangle::default_instance_ = NULL;

Rectangle* Rectangle::New() const {
  return new Rectangle;
}

void Rectangle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // required int32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rectangle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rectangle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rectangle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rectangle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rectangle_descriptor_;
  metadata.reflection = Rectangle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InformationList::kFocusedIndexFieldNumber;
const int InformationList::kInformationFieldNumber;
const int InformationList::kCategoryFieldNumber;
const int InformationList::kDisplayTypeFieldNumber;
const int InformationList::kDelayFieldNumber;
#endif  // !_MSC_VER

InformationList::InformationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InformationList::InitAsDefaultInstance() {
}

InformationList::InformationList(const InformationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InformationList::SharedCtor() {
  _cached_size_ = 0;
  focused_index_ = 0u;
  category_ = 0;
  display_type_ = 1;
  delay_ = 500u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InformationList::~InformationList() {
  SharedDtor();
}

void InformationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InformationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InformationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InformationList_descriptor_;
}

const InformationList& InformationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

InformationList* InformationList::default_instance_ = NULL;

InformationList* InformationList::New() const {
  return new InformationList;
}

void InformationList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    focused_index_ = 0u;
    category_ = 0;
    display_type_ = 1;
    delay_ = 500u;
  }
  information_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InformationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
          set_has_focused_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_information;
        break;
      }

      // repeated .mozc.commands.Information information = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_information()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_information;
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_display_type;
        break;
      }

      // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::mozc::commands::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 5 [default = 500];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InformationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // repeated .mozc.commands.Information information = 2;
  for (int i = 0; i < this->information_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->information(i), output);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (has_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->display_type(), output);
  }

  // optional uint32 delay = 5 [default = 500];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InformationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // repeated .mozc.commands.Information information = 2;
  for (int i = 0; i < this->information_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->information(i), target);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (has_display_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->display_type(), target);
  }

  // optional uint32 delay = 5 [default = 500];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InformationList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

    // optional uint32 delay = 5 [default = 500];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  // repeated .mozc.commands.Information information = 2;
  total_size += 1 * this->information_size();
  for (int i = 0; i < this->information_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->information(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InformationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InformationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InformationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InformationList::MergeFrom(const InformationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  information_.MergeFrom(from.information_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focused_index()) {
      set_focused_index(from.focused_index());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_display_type()) {
      set_display_type(from.display_type());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InformationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformationList::CopyFrom(const InformationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformationList::IsInitialized() const {

  return true;
}

void InformationList::Swap(InformationList* other) {
  if (other != this) {
    std::swap(focused_index_, other->focused_index_);
    information_.Swap(&other->information_);
    std::swap(category_, other->category_);
    std::swap(display_type_, other->display_type_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InformationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InformationList_descriptor_;
  metadata.reflection = InformationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Footer::kLabelFieldNumber;
const int Footer::kIndexVisibleFieldNumber;
const int Footer::kLogoVisibleFieldNumber;
const int Footer::kSubLabelFieldNumber;
#endif  // !_MSC_VER

Footer::Footer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Footer::InitAsDefaultInstance() {
}

Footer::Footer(const Footer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Footer::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_visible_ = false;
  logo_visible_ = false;
  sub_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Footer::~Footer() {
  SharedDtor();
}

void Footer::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (sub_label_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_label_;
  }
  if (this != default_instance_) {
  }
}

void Footer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Footer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Footer_descriptor_;
}

const Footer& Footer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

Footer* Footer::default_instance_ = NULL;

Footer* Footer::New() const {
  return new Footer;
}

void Footer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    index_visible_ = false;
    logo_visible_ = false;
    if (has_sub_label()) {
      if (sub_label_ != &::google::protobuf::internal::kEmptyString) {
        sub_label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Footer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_visible;
        break;
      }

      // optional bool index_visible = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_visible_)));
          set_has_index_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logo_visible;
        break;
      }

      // optional bool logo_visible = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logo_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logo_visible_)));
          set_has_logo_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sub_label;
        break;
      }

      // optional string sub_label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub_label().data(), this->sub_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Footer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }

  // optional bool index_visible = 2 [default = false];
  if (has_index_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->index_visible(), output);
  }

  // optional bool logo_visible = 3 [default = false];
  if (has_logo_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->logo_visible(), output);
  }

  // optional string sub_label = 4;
  if (has_sub_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_label().data(), this->sub_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sub_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Footer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool index_visible = 2 [default = false];
  if (has_index_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->index_visible(), target);
  }

  // optional bool logo_visible = 3 [default = false];
  if (has_logo_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->logo_visible(), target);
  }

  // optional string sub_label = 4;
  if (has_sub_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_label().data(), this->sub_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sub_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Footer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool index_visible = 2 [default = false];
    if (has_index_visible()) {
      total_size += 1 + 1;
    }

    // optional bool logo_visible = 3 [default = false];
    if (has_logo_visible()) {
      total_size += 1 + 1;
    }

    // optional string sub_label = 4;
    if (has_sub_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Footer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Footer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Footer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Footer::MergeFrom(const Footer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_index_visible()) {
      set_index_visible(from.index_visible());
    }
    if (from.has_logo_visible()) {
      set_logo_visible(from.logo_visible());
    }
    if (from.has_sub_label()) {
      set_sub_label(from.sub_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Footer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footer::CopyFrom(const Footer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footer::IsInitialized() const {

  return true;
}

void Footer::Swap(Footer* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(index_visible_, other->index_visible_);
    std::swap(logo_visible_, other->logo_visible_);
    std::swap(sub_label_, other->sub_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Footer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Footer_descriptor_;
  metadata.reflection = Footer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CandidateWord::kIdFieldNumber;
const int CandidateWord::kIndexFieldNumber;
const int CandidateWord::kKeyFieldNumber;
const int CandidateWord::kValueFieldNumber;
const int CandidateWord::kAnnotationFieldNumber;
#endif  // !_MSC_VER

CandidateWord::CandidateWord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CandidateWord::InitAsDefaultInstance() {
  annotation_ = const_cast< ::mozc::commands::Annotation*>(&::mozc::commands::Annotation::default_instance());
}

CandidateWord::CandidateWord(const CandidateWord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CandidateWord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  annotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandidateWord::~CandidateWord() {
  SharedDtor();
}

void CandidateWord::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete annotation_;
  }
}

void CandidateWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateWord_descriptor_;
}

const CandidateWord& CandidateWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

CandidateWord* CandidateWord::default_instance_ = NULL;

CandidateWord* CandidateWord::New() const {
  return new CandidateWord;
}

void CandidateWord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_annotation()) {
      if (annotation_ != NULL) annotation_->::mozc::commands::Annotation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CandidateWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_annotation;
        break;
      }

      // optional .mozc.commands.Annotation annotation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CandidateWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->annotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CandidateWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->annotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CandidateWord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .mozc.commands.Annotation annotation = 5;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateWord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CandidateWord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CandidateWord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandidateWord::MergeFrom(const CandidateWord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_annotation()) {
      mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from.annotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CandidateWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateWord::CopyFrom(const CandidateWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateWord::IsInitialized() const {

  return true;
}

void CandidateWord::Swap(CandidateWord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(annotation_, other->annotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CandidateWord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateWord_descriptor_;
  metadata.reflection = CandidateWord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CandidateList::kFocusedIndexFieldNumber;
const int CandidateList::kCandidatesFieldNumber;
const int CandidateList::kCategoryFieldNumber;
#endif  // !_MSC_VER

CandidateList::CandidateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CandidateList::InitAsDefaultInstance() {
}

CandidateList::CandidateList(const CandidateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CandidateList::SharedCtor() {
  _cached_size_ = 0;
  focused_index_ = 0u;
  category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandidateList::~CandidateList() {
  SharedDtor();
}

void CandidateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CandidateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateList_descriptor_;
}

const CandidateList& CandidateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

CandidateList* CandidateList::default_instance_ = NULL;

CandidateList* CandidateList::New() const {
  return new CandidateList;
}

void CandidateList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    focused_index_ = 0u;
    category_ = 0;
  }
  candidates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CandidateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
          set_has_focused_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_candidates;
        break;
      }

      // repeated .mozc.commands.CandidateWord candidates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_candidates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_candidates;
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CandidateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (int i = 0; i < this->candidates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->candidates(i), output);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CandidateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (int i = 0; i < this->candidates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->candidates(i), target);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CandidateList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

  }
  // repeated .mozc.commands.CandidateWord candidates = 2;
  total_size += 1 * this->candidates_size();
  for (int i = 0; i < this->candidates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CandidateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CandidateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandidateList::MergeFrom(const CandidateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  candidates_.MergeFrom(from.candidates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focused_index()) {
      set_focused_index(from.focused_index());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CandidateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateList::CopyFrom(const CandidateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateList::IsInitialized() const {

  return true;
}

void CandidateList::Swap(CandidateList* other) {
  if (other != this) {
    std::swap(focused_index_, other->focused_index_);
    candidates_.Swap(&other->candidates_);
    std::swap(category_, other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CandidateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateList_descriptor_;
  metadata.reflection = CandidateList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Candidates_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_Direction_descriptor_;
}
bool Candidates_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Candidates_Direction Candidates::VERTICAL;
const Candidates_Direction Candidates::HORIZONTAL;
const Candidates_Direction Candidates::Direction_MIN;
const Candidates_Direction Candidates::Direction_MAX;
const int Candidates::Direction_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Candidates_CandidateWindowLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_CandidateWindowLocation_descriptor_;
}
bool Candidates_CandidateWindowLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Candidates_CandidateWindowLocation Candidates::CARET;
const Candidates_CandidateWindowLocation Candidates::COMPOSITION;
const Candidates_CandidateWindowLocation Candidates::CandidateWindowLocation_MIN;
const Candidates_CandidateWindowLocation Candidates::CandidateWindowLocation_MAX;
const int Candidates::CandidateWindowLocation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Candidates_Candidate::kIndexFieldNumber;
const int Candidates_Candidate::kValueFieldNumber;
const int Candidates_Candidate::kIdFieldNumber;
const int Candidates_Candidate::kAnnotationFieldNumber;
const int Candidates_Candidate::kInformationIdFieldNumber;
#endif  // !_MSC_VER

Candidates_Candidate::Candidates_Candidate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Candidates_Candidate::InitAsDefaultInstance() {
  annotation_ = const_cast< ::mozc::commands::Annotation*>(&::mozc::commands::Annotation::default_instance());
}

Candidates_Candidate::Candidates_Candidate(const Candidates_Candidate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Candidates_Candidate::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  annotation_ = NULL;
  information_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Candidates_Candidate::~Candidates_Candidate() {
  SharedDtor();
}

void Candidates_Candidate::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete annotation_;
  }
}

void Candidates_Candidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Candidates_Candidate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_Candidate_descriptor_;
}

const Candidates_Candidate& Candidates_Candidate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

Candidates_Candidate* Candidates_Candidate::default_instance_ = NULL;

Candidates_Candidate* Candidates_Candidate::New() const {
  return new Candidates_Candidate;
}

void Candidates_Candidate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    id_ = 0;
    if (has_annotation()) {
      if (annotation_ != NULL) annotation_->::mozc::commands::Annotation::Clear();
    }
    information_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Candidates_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // required string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_annotation;
        break;
      }

      // optional .mozc.commands.Annotation annotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_id;
        break;
      }

      // optional int32 id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_information_id;
        break;
      }

      // optional int32 information_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_information_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &information_id_)));
          set_has_information_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Candidates_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->annotation(), output);
  }

  // optional int32 id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->id(), output);
  }

  // optional int32 information_id = 10;
  if (has_information_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->information_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Candidates_Candidate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->annotation(), target);
  }

  // optional int32 id = 9;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->id(), target);
  }

  // optional int32 information_id = 10;
  if (has_information_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->information_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Candidates_Candidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .mozc.commands.Annotation annotation = 7;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation());
    }

    // optional int32 information_id = 10;
    if (has_information_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->information_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Candidates_Candidate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Candidates_Candidate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Candidates_Candidate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Candidates_Candidate::MergeFrom(const Candidates_Candidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_annotation()) {
      mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from.annotation());
    }
    if (from.has_information_id()) {
      set_information_id(from.information_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Candidates_Candidate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates_Candidate::CopyFrom(const Candidates_Candidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates_Candidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Candidates_Candidate::Swap(Candidates_Candidate* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(annotation_, other->annotation_);
    std::swap(information_id_, other->information_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Candidates_Candidate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Candidates_Candidate_descriptor_;
  metadata.reflection = Candidates_Candidate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Candidates::kFocusedIndexFieldNumber;
const int Candidates::kSizeFieldNumber;
const int Candidates::kCandidateFieldNumber;
const int Candidates::kPositionFieldNumber;
const int Candidates::kSubcandidatesFieldNumber;
const int Candidates::kUsagesFieldNumber;
const int Candidates::kCategoryFieldNumber;
const int Candidates::kDisplayTypeFieldNumber;
const int Candidates::kFooterFieldNumber;
const int Candidates::kDirectionFieldNumber;
const int Candidates::kCompositionRectangleFieldNumber;
const int Candidates::kCaretRectangleFieldNumber;
const int Candidates::kWindowLocationFieldNumber;
#endif  // !_MSC_VER

Candidates::Candidates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Candidates::InitAsDefaultInstance() {
  subcandidates_ = const_cast< ::mozc::commands::Candidates*>(&::mozc::commands::Candidates::default_instance());
  usages_ = const_cast< ::mozc::commands::InformationList*>(&::mozc::commands::InformationList::default_instance());
  footer_ = const_cast< ::mozc::commands::Footer*>(&::mozc::commands::Footer::default_instance());
  composition_rectangle_ = const_cast< ::mozc::commands::Rectangle*>(&::mozc::commands::Rectangle::default_instance());
  caret_rectangle_ = const_cast< ::mozc::commands::Rectangle*>(&::mozc::commands::Rectangle::default_instance());
}

Candidates::Candidates(const Candidates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Candidates::SharedCtor() {
  _cached_size_ = 0;
  focused_index_ = 0u;
  size_ = 0u;
  position_ = 0u;
  subcandidates_ = NULL;
  usages_ = NULL;
  category_ = 0;
  display_type_ = 0;
  footer_ = NULL;
  direction_ = 0;
  composition_rectangle_ = NULL;
  caret_rectangle_ = NULL;
  window_location_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Candidates::~Candidates() {
  SharedDtor();
}

void Candidates::SharedDtor() {
  if (this != default_instance_) {
    delete subcandidates_;
    delete usages_;
    delete footer_;
    delete composition_rectangle_;
    delete caret_rectangle_;
  }
}

void Candidates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Candidates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_descriptor_;
}

const Candidates& Candidates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2fcandidates_2eproto();
  return *default_instance_;
}

Candidates* Candidates::default_instance_ = NULL;

Candidates* Candidates::New() const {
  return new Candidates;
}

void Candidates::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    focused_index_ = 0u;
    size_ = 0u;
    position_ = 0u;
    if (has_subcandidates()) {
      if (subcandidates_ != NULL) subcandidates_->::mozc::commands::Candidates::Clear();
    }
    if (has_usages()) {
      if (usages_ != NULL) usages_->::mozc::commands::InformationList::Clear();
    }
    category_ = 0;
    display_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_footer()) {
      if (footer_ != NULL) footer_->::mozc::commands::Footer::Clear();
    }
    direction_ = 0;
    if (has_composition_rectangle()) {
      if (composition_rectangle_ != NULL) composition_rectangle_->::mozc::commands::Rectangle::Clear();
    }
    if (has_caret_rectangle()) {
      if (caret_rectangle_ != NULL) caret_rectangle_->::mozc::commands::Rectangle::Clear();
    }
    window_location_ = 0;
  }
  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Candidates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
          set_has_focused_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(27)) goto parse_candidate;
        break;
      }

      // repeated group Candidate = 3 {
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                3, input, add_candidate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(27)) goto parse_candidate;
        if (input->ExpectTag(48)) goto parse_position;
        break;
      }

      // required uint32 position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subcandidates;
        break;
      }

      // optional .mozc.commands.Candidates subcandidates = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcandidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcandidates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_usages;
        break;
      }

      // optional .mozc.commands.InformationList usages = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_category;
        break;
      }

      // optional .mozc.commands.Category category = 11 [default = CONVERSION];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_display_type;
        break;
      }

      // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::mozc::commands::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_footer;
        break;
      }

      // optional .mozc.commands.Footer footer = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_direction;
        break;
      }

      // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Candidates_Direction_IsValid(value)) {
            set_direction(static_cast< ::mozc::commands::Candidates_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_composition_rectangle;
        break;
      }

      // optional .mozc.commands.Rectangle composition_rectangle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_composition_rectangle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_composition_rectangle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_caret_rectangle;
        break;
      }

      // optional .mozc.commands.Rectangle caret_rectangle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caret_rectangle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caret_rectangle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_window_location;
        break;
      }

      // optional .mozc.commands.Candidates.CandidateWindowLocation window_location = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_window_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Candidates_CandidateWindowLocation_IsValid(value)) {
            set_window_location(static_cast< ::mozc::commands::Candidates_CandidateWindowLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Candidates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // repeated group Candidate = 3 {
  for (int i = 0; i < this->candidate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      3, this->candidate(i), output);
  }

  // required uint32 position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->position(), output);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (has_subcandidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->subcandidates(), output);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (has_usages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->usages(), output);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->category(), output);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (has_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->display_type(), output);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (has_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->footer(), output);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->direction(), output);
  }

  // optional .mozc.commands.Rectangle composition_rectangle = 15;
  if (has_composition_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->composition_rectangle(), output);
  }

  // optional .mozc.commands.Rectangle caret_rectangle = 16;
  if (has_caret_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->caret_rectangle(), output);
  }

  // optional .mozc.commands.Candidates.CandidateWindowLocation window_location = 17;
  if (has_window_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->window_location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Candidates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // repeated group Candidate = 3 {
  for (int i = 0; i < this->candidate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        3, this->candidate(i), target);
  }

  // required uint32 position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->position(), target);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (has_subcandidates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->subcandidates(), target);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (has_usages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->usages(), target);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (has_display_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->display_type(), target);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (has_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->footer(), target);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->direction(), target);
  }

  // optional .mozc.commands.Rectangle composition_rectangle = 15;
  if (has_composition_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->composition_rectangle(), target);
  }

  // optional .mozc.commands.Rectangle caret_rectangle = 16;
  if (has_caret_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->caret_rectangle(), target);
  }

  // optional .mozc.commands.Candidates.CandidateWindowLocation window_location = 17;
  if (has_window_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->window_location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Candidates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // required uint32 position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional .mozc.commands.Candidates subcandidates = 8;
    if (has_subcandidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcandidates());
    }

    // optional .mozc.commands.InformationList usages = 10;
    if (has_usages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usages());
    }

    // optional .mozc.commands.Category category = 11 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mozc.commands.Footer footer = 13;
    if (has_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer());
    }

    // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional .mozc.commands.Rectangle composition_rectangle = 15;
    if (has_composition_rectangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->composition_rectangle());
    }

    // optional .mozc.commands.Rectangle caret_rectangle = 16;
    if (has_caret_rectangle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caret_rectangle());
    }

    // optional .mozc.commands.Candidates.CandidateWindowLocation window_location = 17;
    if (has_window_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->window_location());
    }

  }
  // repeated group Candidate = 3 {
  total_size += 2 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->candidate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Candidates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Candidates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Candidates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Candidates::MergeFrom(const Candidates& from) {
  GOOGLE_CHECK_NE(&from, this);
  candidate_.MergeFrom(from.candidate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focused_index()) {
      set_focused_index(from.focused_index());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_subcandidates()) {
      mutable_subcandidates()->::mozc::commands::Candidates::MergeFrom(from.subcandidates());
    }
    if (from.has_usages()) {
      mutable_usages()->::mozc::commands::InformationList::MergeFrom(from.usages());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_display_type()) {
      set_display_type(from.display_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_footer()) {
      mutable_footer()->::mozc::commands::Footer::MergeFrom(from.footer());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_composition_rectangle()) {
      mutable_composition_rectangle()->::mozc::commands::Rectangle::MergeFrom(from.composition_rectangle());
    }
    if (from.has_caret_rectangle()) {
      mutable_caret_rectangle()->::mozc::commands::Rectangle::MergeFrom(from.caret_rectangle());
    }
    if (from.has_window_location()) {
      set_window_location(from.window_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Candidates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates::CopyFrom(const Candidates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  for (int i = 0; i < candidate_size(); i++) {
    if (!this->candidate(i).IsInitialized()) return false;
  }
  if (has_subcandidates()) {
    if (!this->subcandidates().IsInitialized()) return false;
  }
  if (has_composition_rectangle()) {
    if (!this->composition_rectangle().IsInitialized()) return false;
  }
  if (has_caret_rectangle()) {
    if (!this->caret_rectangle().IsInitialized()) return false;
  }
  return true;
}

void Candidates::Swap(Candidates* other) {
  if (other != this) {
    std::swap(focused_index_, other->focused_index_);
    std::swap(size_, other->size_);
    candidate_.Swap(&other->candidate_);
    std::swap(position_, other->position_);
    std::swap(subcandidates_, other->subcandidates_);
    std::swap(usages_, other->usages_);
    std::swap(category_, other->category_);
    std::swap(display_type_, other->display_type_);
    std::swap(footer_, other->footer_);
    std::swap(direction_, other->direction_);
    std::swap(composition_rectangle_, other->composition_rectangle_);
    std::swap(caret_rectangle_, other->caret_rectangle_);
    std::swap(window_location_, other->window_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Candidates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Candidates_descriptor_;
  metadata.reflection = Candidates_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
