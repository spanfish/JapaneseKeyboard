// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session/state.proto

#ifndef PROTOBUF_session_2fstate_2eproto__INCLUDED
#define PROTOBUF_session_2fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "session/candidates.pb.h"
#include "session/commands.pb.h"
// @@protoc_insertion_point(includes)

namespace mozc {
namespace session {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_session_2fstate_2eproto();
void protobuf_AssignDesc_session_2fstate_2eproto();
void protobuf_ShutdownFile_session_2fstate_2eproto();

class SessionState;

// ===================================================================

class SessionState : public ::google::protobuf::Message {
 public:
  SessionState();
  virtual ~SessionState();

  SessionState(const SessionState& from);

  inline SessionState& operator=(const SessionState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionState& default_instance();

  void Swap(SessionState* other);

  // implements Message ----------------------------------------------

  SessionState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionState& from);
  void MergeFrom(const SessionState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 created_time = 2;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 created_time() const;
  inline void set_created_time(::google::protobuf::uint64 value);

  // optional bool committed = 3 [default = false];
  inline bool has_committed() const;
  inline void clear_committed();
  static const int kCommittedFieldNumber = 3;
  inline bool committed() const;
  inline void set_committed(bool value);

  // optional uint64 start_preedit_time = 10;
  inline bool has_start_preedit_time() const;
  inline void clear_start_preedit_time();
  static const int kStartPreeditTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 start_preedit_time() const;
  inline void set_start_preedit_time(::google::protobuf::uint64 value);

  // optional uint64 start_conversion_window_time = 11;
  inline bool has_start_conversion_window_time() const;
  inline void clear_start_conversion_window_time();
  static const int kStartConversionWindowTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 start_conversion_window_time() const;
  inline void set_start_conversion_window_time(::google::protobuf::uint64 value);

  // optional uint64 start_prediction_window_time = 12;
  inline bool has_start_prediction_window_time() const;
  inline void clear_start_prediction_window_time();
  static const int kStartPredictionWindowTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 start_prediction_window_time() const;
  inline void set_start_prediction_window_time(::google::protobuf::uint64 value);

  // optional uint64 start_suggestion_window_time = 13;
  inline bool has_start_suggestion_window_time() const;
  inline void clear_start_suggestion_window_time();
  static const int kStartSuggestionWindowTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 start_suggestion_window_time() const;
  inline void set_start_suggestion_window_time(::google::protobuf::uint64 value);

  // optional uint64 start_infolist_window_time = 14;
  inline bool has_start_infolist_window_time() const;
  inline void clear_start_infolist_window_time();
  static const int kStartInfolistWindowTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 start_infolist_window_time() const;
  inline void set_start_infolist_window_time(::google::protobuf::uint64 value);

  // optional .mozc.commands.Preedit preedit = 20;
  inline bool has_preedit() const;
  inline void clear_preedit();
  static const int kPreeditFieldNumber = 20;
  inline const ::mozc::commands::Preedit& preedit() const;
  inline ::mozc::commands::Preedit* mutable_preedit();
  inline ::mozc::commands::Preedit* release_preedit();
  inline void set_allocated_preedit(::mozc::commands::Preedit* preedit);

  // optional .mozc.commands.Candidates candidates = 21;
  inline bool has_candidates() const;
  inline void clear_candidates();
  static const int kCandidatesFieldNumber = 21;
  inline const ::mozc::commands::Candidates& candidates() const;
  inline ::mozc::commands::Candidates* mutable_candidates();
  inline ::mozc::commands::Candidates* release_candidates();
  inline void set_allocated_candidates(::mozc::commands::Candidates* candidates);

  // optional .mozc.commands.Result result = 23;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 23;
  inline const ::mozc::commands::Result& result() const;
  inline ::mozc::commands::Result* mutable_result();
  inline ::mozc::commands::Result* release_result();
  inline void set_allocated_result(::mozc::commands::Result* result);

  // optional .mozc.commands.Request request = 24;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 24;
  inline const ::mozc::commands::Request& request() const;
  inline ::mozc::commands::Request* mutable_request();
  inline ::mozc::commands::Request* release_request();
  inline void set_allocated_request(::mozc::commands::Request* request);

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  inline bool has_input_field_type() const;
  inline void clear_input_field_type();
  static const int kInputFieldTypeFieldNumber = 25;
  inline ::mozc::commands::Context_InputFieldType input_field_type() const;
  inline void set_input_field_type(::mozc::commands::Context_InputFieldType value);

  // @@protoc_insertion_point(class_scope:mozc.session.SessionState)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_committed();
  inline void clear_has_committed();
  inline void set_has_start_preedit_time();
  inline void clear_has_start_preedit_time();
  inline void set_has_start_conversion_window_time();
  inline void clear_has_start_conversion_window_time();
  inline void set_has_start_prediction_window_time();
  inline void clear_has_start_prediction_window_time();
  inline void set_has_start_suggestion_window_time();
  inline void clear_has_start_suggestion_window_time();
  inline void set_has_start_infolist_window_time();
  inline void clear_has_start_infolist_window_time();
  inline void set_has_preedit();
  inline void clear_has_preedit();
  inline void set_has_candidates();
  inline void clear_has_candidates();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_input_field_type();
  inline void clear_has_input_field_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 created_time_;
  ::google::protobuf::uint64 start_preedit_time_;
  ::google::protobuf::uint64 start_conversion_window_time_;
  ::google::protobuf::uint64 start_prediction_window_time_;
  ::google::protobuf::uint64 start_suggestion_window_time_;
  ::google::protobuf::uint64 start_infolist_window_time_;
  bool committed_;
  int input_field_type_;
  ::mozc::commands::Preedit* preedit_;
  ::mozc::commands::Candidates* candidates_;
  ::mozc::commands::Result* result_;
  ::mozc::commands::Request* request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_session_2fstate_2eproto();
  friend void protobuf_AssignDesc_session_2fstate_2eproto();
  friend void protobuf_ShutdownFile_session_2fstate_2eproto();

  void InitAsDefaultInstance();
  static SessionState* default_instance_;
};
// ===================================================================


// ===================================================================

// SessionState

// required uint64 id = 1;
inline bool SessionState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionState::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SessionState::id() const {
  return id_;
}
inline void SessionState::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 created_time = 2;
inline bool SessionState::has_created_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionState::set_has_created_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionState::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionState::clear_created_time() {
  created_time_ = GOOGLE_ULONGLONG(0);
  clear_has_created_time();
}
inline ::google::protobuf::uint64 SessionState::created_time() const {
  return created_time_;
}
inline void SessionState::set_created_time(::google::protobuf::uint64 value) {
  set_has_created_time();
  created_time_ = value;
}

// optional bool committed = 3 [default = false];
inline bool SessionState::has_committed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionState::set_has_committed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionState::clear_has_committed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionState::clear_committed() {
  committed_ = false;
  clear_has_committed();
}
inline bool SessionState::committed() const {
  return committed_;
}
inline void SessionState::set_committed(bool value) {
  set_has_committed();
  committed_ = value;
}

// optional uint64 start_preedit_time = 10;
inline bool SessionState::has_start_preedit_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionState::set_has_start_preedit_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionState::clear_has_start_preedit_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionState::clear_start_preedit_time() {
  start_preedit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_preedit_time();
}
inline ::google::protobuf::uint64 SessionState::start_preedit_time() const {
  return start_preedit_time_;
}
inline void SessionState::set_start_preedit_time(::google::protobuf::uint64 value) {
  set_has_start_preedit_time();
  start_preedit_time_ = value;
}

// optional uint64 start_conversion_window_time = 11;
inline bool SessionState::has_start_conversion_window_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionState::set_has_start_conversion_window_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionState::clear_has_start_conversion_window_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionState::clear_start_conversion_window_time() {
  start_conversion_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_conversion_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_conversion_window_time() const {
  return start_conversion_window_time_;
}
inline void SessionState::set_start_conversion_window_time(::google::protobuf::uint64 value) {
  set_has_start_conversion_window_time();
  start_conversion_window_time_ = value;
}

// optional uint64 start_prediction_window_time = 12;
inline bool SessionState::has_start_prediction_window_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionState::set_has_start_prediction_window_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionState::clear_has_start_prediction_window_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionState::clear_start_prediction_window_time() {
  start_prediction_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_prediction_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_prediction_window_time() const {
  return start_prediction_window_time_;
}
inline void SessionState::set_start_prediction_window_time(::google::protobuf::uint64 value) {
  set_has_start_prediction_window_time();
  start_prediction_window_time_ = value;
}

// optional uint64 start_suggestion_window_time = 13;
inline bool SessionState::has_start_suggestion_window_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionState::set_has_start_suggestion_window_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SessionState::clear_has_start_suggestion_window_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SessionState::clear_start_suggestion_window_time() {
  start_suggestion_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_suggestion_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_suggestion_window_time() const {
  return start_suggestion_window_time_;
}
inline void SessionState::set_start_suggestion_window_time(::google::protobuf::uint64 value) {
  set_has_start_suggestion_window_time();
  start_suggestion_window_time_ = value;
}

// optional uint64 start_infolist_window_time = 14;
inline bool SessionState::has_start_infolist_window_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SessionState::set_has_start_infolist_window_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SessionState::clear_has_start_infolist_window_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SessionState::clear_start_infolist_window_time() {
  start_infolist_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_infolist_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_infolist_window_time() const {
  return start_infolist_window_time_;
}
inline void SessionState::set_start_infolist_window_time(::google::protobuf::uint64 value) {
  set_has_start_infolist_window_time();
  start_infolist_window_time_ = value;
}

// optional .mozc.commands.Preedit preedit = 20;
inline bool SessionState::has_preedit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SessionState::set_has_preedit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SessionState::clear_has_preedit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SessionState::clear_preedit() {
  if (preedit_ != NULL) preedit_->::mozc::commands::Preedit::Clear();
  clear_has_preedit();
}
inline const ::mozc::commands::Preedit& SessionState::preedit() const {
  return preedit_ != NULL ? *preedit_ : *default_instance_->preedit_;
}
inline ::mozc::commands::Preedit* SessionState::mutable_preedit() {
  set_has_preedit();
  if (preedit_ == NULL) preedit_ = new ::mozc::commands::Preedit;
  return preedit_;
}
inline ::mozc::commands::Preedit* SessionState::release_preedit() {
  clear_has_preedit();
  ::mozc::commands::Preedit* temp = preedit_;
  preedit_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_preedit(::mozc::commands::Preedit* preedit) {
  delete preedit_;
  preedit_ = preedit;
  if (preedit) {
    set_has_preedit();
  } else {
    clear_has_preedit();
  }
}

// optional .mozc.commands.Candidates candidates = 21;
inline bool SessionState::has_candidates() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SessionState::set_has_candidates() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SessionState::clear_has_candidates() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SessionState::clear_candidates() {
  if (candidates_ != NULL) candidates_->::mozc::commands::Candidates::Clear();
  clear_has_candidates();
}
inline const ::mozc::commands::Candidates& SessionState::candidates() const {
  return candidates_ != NULL ? *candidates_ : *default_instance_->candidates_;
}
inline ::mozc::commands::Candidates* SessionState::mutable_candidates() {
  set_has_candidates();
  if (candidates_ == NULL) candidates_ = new ::mozc::commands::Candidates;
  return candidates_;
}
inline ::mozc::commands::Candidates* SessionState::release_candidates() {
  clear_has_candidates();
  ::mozc::commands::Candidates* temp = candidates_;
  candidates_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_candidates(::mozc::commands::Candidates* candidates) {
  delete candidates_;
  candidates_ = candidates;
  if (candidates) {
    set_has_candidates();
  } else {
    clear_has_candidates();
  }
}

// optional .mozc.commands.Result result = 23;
inline bool SessionState::has_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SessionState::set_has_result() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SessionState::clear_has_result() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SessionState::clear_result() {
  if (result_ != NULL) result_->::mozc::commands::Result::Clear();
  clear_has_result();
}
inline const ::mozc::commands::Result& SessionState::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::mozc::commands::Result* SessionState::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::mozc::commands::Result;
  return result_;
}
inline ::mozc::commands::Result* SessionState::release_result() {
  clear_has_result();
  ::mozc::commands::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_result(::mozc::commands::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
}

// optional .mozc.commands.Request request = 24;
inline bool SessionState::has_request() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SessionState::set_has_request() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SessionState::clear_has_request() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SessionState::clear_request() {
  if (request_ != NULL) request_->::mozc::commands::Request::Clear();
  clear_has_request();
}
inline const ::mozc::commands::Request& SessionState::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::mozc::commands::Request* SessionState::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::mozc::commands::Request;
  return request_;
}
inline ::mozc::commands::Request* SessionState::release_request() {
  clear_has_request();
  ::mozc::commands::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_request(::mozc::commands::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}

// optional .mozc.commands.Context.InputFieldType input_field_type = 25;
inline bool SessionState::has_input_field_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SessionState::set_has_input_field_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SessionState::clear_has_input_field_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SessionState::clear_input_field_type() {
  input_field_type_ = 1;
  clear_has_input_field_type();
}
inline ::mozc::commands::Context_InputFieldType SessionState::input_field_type() const {
  return static_cast< ::mozc::commands::Context_InputFieldType >(input_field_type_);
}
inline void SessionState::set_input_field_type(::mozc::commands::Context_InputFieldType value) {
  assert(::mozc::commands::Context_InputFieldType_IsValid(value));
  set_has_input_field_type();
  input_field_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace session
}  // namespace mozc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_session_2fstate_2eproto__INCLUDED
