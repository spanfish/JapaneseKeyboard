// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace config {

namespace {

const ::google::protobuf::Descriptor* GeneralConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* OBSOLETE_SyncConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OBSOLETE_SyncConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_CharacterFormRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_CharacterFormRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_InformationListConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_InformationListConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_PreeditMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_SessionKeymap_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_PunctuationMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_SymbolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_FundamentalCharacterForm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_HistoryLearningLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_SelectionShortcut_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_CharacterForm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_ShiftKeyModeSwitch_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_NumpadCharacterForm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_AutoConversionKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_YenSignCharacter_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2fconfig_2eproto() {
  protobuf_AddDesc_config_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config/config.proto");
  GOOGLE_CHECK(file != NULL);
  GeneralConfig_descriptor_ = file->message_type(0);
  static const int GeneralConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, config_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, last_modified_product_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, last_modified_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, ui_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, upload_usage_stats_),
  };
  GeneralConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralConfig_descriptor_,
      GeneralConfig::default_instance_,
      GeneralConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralConfig));
  OBSOLETE_SyncConfig_descriptor_ = file->message_type(1);
  static const int OBSOLETE_SyncConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, use_config_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, use_user_dictionary_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, use_user_history_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, use_learning_preference_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, use_contact_list_sync_),
  };
  OBSOLETE_SyncConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OBSOLETE_SyncConfig_descriptor_,
      OBSOLETE_SyncConfig::default_instance_,
      OBSOLETE_SyncConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBSOLETE_SyncConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OBSOLETE_SyncConfig));
  Config_descriptor_ = file->message_type(2);
  static const int Config_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, general_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, verbose_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, deprecated_log_all_commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, incognito_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, check_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, presentation_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, preedit_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, session_keymap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, custom_keymap_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, custom_roman_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, punctuation_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, symbol_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, space_character_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_keyboard_to_change_preedit_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, history_learning_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, selection_shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, character_form_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_auto_ime_turn_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_cascading_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, shift_key_mode_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, numpad_character_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_auto_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, auto_conversion_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, yen_sign_character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_japanese_layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_kana_modifier_insensitive_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_typing_correction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_date_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_single_kanji_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_symbol_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_number_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_emoticon_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_calculator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_t13n_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_zip_code_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_spelling_correction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_emoji_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, information_list_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_history_suggest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_dictionary_suggest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_realtime_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, suggestions_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_mode_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, obsolete_sync_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, allow_cloud_handwriting_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
  Config_CharacterFormRule_descriptor_ = Config_descriptor_->nested_type(0);
  static const int Config_CharacterFormRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, preedit_character_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, conversion_character_form_),
  };
  Config_CharacterFormRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_CharacterFormRule_descriptor_,
      Config_CharacterFormRule::default_instance_,
      Config_CharacterFormRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config_CharacterFormRule));
  Config_InformationListConfig_descriptor_ = Config_descriptor_->nested_type(1);
  static const int Config_InformationListConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_InformationListConfig, use_local_usage_dictionary_),
  };
  Config_InformationListConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_InformationListConfig_descriptor_,
      Config_InformationListConfig::default_instance_,
      Config_InformationListConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_InformationListConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_InformationListConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config_InformationListConfig));
  Config_PreeditMethod_descriptor_ = Config_descriptor_->enum_type(0);
  Config_SessionKeymap_descriptor_ = Config_descriptor_->enum_type(1);
  Config_PunctuationMethod_descriptor_ = Config_descriptor_->enum_type(2);
  Config_SymbolMethod_descriptor_ = Config_descriptor_->enum_type(3);
  Config_FundamentalCharacterForm_descriptor_ = Config_descriptor_->enum_type(4);
  Config_HistoryLearningLevel_descriptor_ = Config_descriptor_->enum_type(5);
  Config_SelectionShortcut_descriptor_ = Config_descriptor_->enum_type(6);
  Config_CharacterForm_descriptor_ = Config_descriptor_->enum_type(7);
  Config_ShiftKeyModeSwitch_descriptor_ = Config_descriptor_->enum_type(8);
  Config_NumpadCharacterForm_descriptor_ = Config_descriptor_->enum_type(9);
  Config_AutoConversionKey_descriptor_ = Config_descriptor_->enum_type(10);
  Config_YenSignCharacter_descriptor_ = Config_descriptor_->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralConfig_descriptor_, &GeneralConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OBSOLETE_SyncConfig_descriptor_, &OBSOLETE_SyncConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_CharacterFormRule_descriptor_, &Config_CharacterFormRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_InformationListConfig_descriptor_, &Config_InformationListConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2fconfig_2eproto() {
  delete GeneralConfig::default_instance_;
  delete GeneralConfig_reflection_;
  delete GeneralConfig::_default_last_modified_product_version_;
  delete OBSOLETE_SyncConfig::default_instance_;
  delete OBSOLETE_SyncConfig_reflection_;
  delete Config::default_instance_;
  delete Config_reflection_;
  delete Config_CharacterFormRule::default_instance_;
  delete Config_CharacterFormRule_reflection_;
  delete Config_InformationListConfig::default_instance_;
  delete Config_InformationListConfig_reflection_;
}

void protobuf_AddDesc_config_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023config/config.proto\022\013mozc.config\"\305\001\n\rG"
    "eneralConfig\022\031\n\016config_version\030\001 \001(\r:\0010\022"
    ".\n\035last_modified_product_version\030\002 \001(\t:\007"
    "0.0.0.0\022\035\n\022last_modified_time\030\003 \001(\004:\0010\022\022"
    "\n\010platform\030\004 \001(\t:\000\022\023\n\tui_locale\030\005 \001(\t:\000\022"
    "!\n\022upload_usage_stats\030\006 \001(\010:\005false\"\327\001\n\023O"
    "BSOLETE_SyncConfig\022\036\n\017use_config_sync\030\001 "
    "\001(\010:\005false\022\'\n\030use_user_dictionary_sync\030\002"
    " \001(\010:\005false\022$\n\025use_user_history_sync\030\003 \001"
    "(\010:\005false\022+\n\034use_learning_preference_syn"
    "c\030\004 \001(\010:\005false\022$\n\025use_contact_list_sync\030"
    "\005 \001(\010:\005false\"\276\034\n\006Config\0222\n\016general_confi"
    "g\030\001 \001(\0132\032.mozc.config.GeneralConfig\022\030\n\rv"
    "erbose_level\030\n \001(\005:\0010\022*\n\033DEPRECATED_log_"
    "all_commands\030\013 \001(\010:\005false\022\035\n\016incognito_m"
    "ode\030\024 \001(\010:\005false\022\033\n\rcheck_default\030\026 \001(\010:"
    "\004true\022 \n\021presentation_mode\030\027 \001(\010:\005false\022"
    "@\n\016preedit_method\030( \001(\0162!.mozc.config.Co"
    "nfig.PreeditMethod:\005ROMAN\022\?\n\016session_key"
    "map\030) \001(\0162!.mozc.config.Config.SessionKe"
    "ymap:\004NONE\022\033\n\023custom_keymap_table\030* \001(\014\022"
    "\032\n\022custom_roman_table\030+ \001(\014\022O\n\022punctuati"
    "on_method\030- \001(\0162%.mozc.config.Config.Pun"
    "ctuationMethod:\014KUTEN_TOUTEN\022R\n\rsymbol_m"
    "ethod\030. \001(\0162 .mozc.config.Config.SymbolM"
    "ethod:\031CORNER_BRACKET_MIDDLE_DOT\022b\n\024spac"
    "e_character_form\030/ \001(\0162,.mozc.config.Con"
    "fig.FundamentalCharacterForm:\026FUNDAMENTA"
    "L_INPUT_MODE\0224\n%use_keyboard_to_change_p"
    "reedit_method\0300 \001(\010:\005false\022Y\n\026history_le"
    "arning_level\0302 \001(\0162(.mozc.config.Config."
    "HistoryLearningLevel:\017DEFAULT_HISTORY\022U\n"
    "\022selection_shortcut\0304 \001(\0162%.mozc.config."
    "Config.SelectionShortcut:\022SHORTCUT_12345"
    "6789\022C\n\024character_form_rules\0306 \003(\0132%.moz"
    "c.config.Config.CharacterFormRule\022#\n\025use"
    "_auto_ime_turn_off\0308 \001(\010:\004true\022\"\n\024use_ca"
    "scading_window\030: \001(\010:\004true\022W\n\025shift_key_"
    "mode_switch\030; \001(\0162&.mozc.config.Config.S"
    "hiftKeyModeSwitch:\020ASCII_INPUT_MODE\022Y\n\025n"
    "umpad_character_form\030< \001(\0162\'.mozc.config"
    ".Config.NumpadCharacterForm:\021NUMPAD_HALF"
    "_WIDTH\022\"\n\023use_auto_conversion\030= \001(\010:\005fal"
    "se\022\037\n\023auto_conversion_key\030> \001(\r:\00213\022J\n\022y"
    "en_sign_character\030\? \001(\0162$.mozc.config.Co"
    "nfig.YenSignCharacter:\010YEN_SIGN\022\"\n\023use_j"
    "apanese_layout\030@ \001(\010:\005false\0227\n(use_kana_"
    "modifier_insensitive_conversion\030A \001(\010:\005f"
    "alse\022$\n\025use_typing_correction\030B \001(\010:\005fal"
    "se\022!\n\023use_date_conversion\030P \001(\010:\004true\022)\n"
    "\033use_single_kanji_conversion\030Q \001(\010:\004true"
    "\022#\n\025use_symbol_conversion\030R \001(\010:\004true\022#\n"
    "\025use_number_conversion\030S \001(\010:\004true\022%\n\027us"
    "e_emoticon_conversion\030T \001(\010:\004true\022\034\n\016use"
    "_calculator\030U \001(\010:\004true\022!\n\023use_t13n_conv"
    "ersion\030V \001(\010:\004true\022%\n\027use_zip_code_conve"
    "rsion\030W \001(\010:\004true\022%\n\027use_spelling_correc"
    "tion\030X \001(\010:\004true\022#\n\024use_emoji_conversion"
    "\030Y \001(\010:\005false\022J\n\027information_list_config"
    "\030Z \001(\0132).mozc.config.Config.InformationL"
    "istConfig\022!\n\023use_history_suggest\030d \001(\010:\004"
    "true\022$\n\026use_dictionary_suggest\030e \001(\010:\004tr"
    "ue\022%\n\027use_realtime_conversion\030f \001(\010:\004tru"
    "e\022\033\n\020suggestions_size\030n \001(\r:\0013\022 \n\022use_mo"
    "de_indicator\030x \001(\010:\004true\022\?\n\024OBSOLETE_syn"
    "c_config\030\254\002 \001(\0132 .mozc.config.OBSOLETE_S"
    "yncConfig\022\'\n\027allow_cloud_handwriting\030\255\002 "
    "\001(\010:\005false\032\303\001\n\021CharacterFormRule\022\r\n\005grou"
    "p\030\001 \001(\t\022M\n\026preedit_character_form\030\002 \001(\0162"
    "!.mozc.config.Config.CharacterForm:\nFULL"
    "_WIDTH\022P\n\031conversion_character_form\030\003 \001("
    "\0162!.mozc.config.Config.CharacterForm:\nFU"
    "LL_WIDTH\032A\n\025InformationListConfig\022(\n\032use"
    "_local_usage_dictionary\030\001 \001(\010:\004true\"$\n\rP"
    "reeditMethod\022\t\n\005ROMAN\020\000\022\010\n\004KANA\020\001\"j\n\rSes"
    "sionKeymap\022\021\n\004NONE\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006CUSTOM\020"
    "\000\022\010\n\004ATOK\020\001\022\t\n\005MSIME\020\002\022\013\n\007KOTOERI\020\003\022\n\n\006M"
    "OBILE\020\004\022\014\n\010CHROMEOS\020\005\"[\n\021PunctuationMeth"
    "od\022\020\n\014KUTEN_TOUTEN\020\000\022\020\n\014COMMA_PERIOD\020\001\022\020"
    "\n\014KUTEN_PERIOD\020\002\022\020\n\014COMMA_TOUTEN\020\003\"\200\001\n\014S"
    "ymbolMethod\022\035\n\031CORNER_BRACKET_MIDDLE_DOT"
    "\020\000\022\030\n\024SQUARE_BRACKET_SLASH\020\001\022\030\n\024CORNER_B"
    "RACKET_SLASH\020\002\022\035\n\031SQUARE_BRACKET_MIDDLE_"
    "DOT\020\003\"n\n\030FundamentalCharacterForm\022\032\n\026FUN"
    "DAMENTAL_INPUT_MODE\020\000\022\032\n\026FUNDAMENTAL_FUL"
    "L_WIDTH\020\001\022\032\n\026FUNDAMENTAL_HALF_WIDTH\020\002\"J\n"
    "\024HistoryLearningLevel\022\023\n\017DEFAULT_HISTORY"
    "\020\000\022\r\n\tREAD_ONLY\020\001\022\016\n\nNO_HISTORY\020\002\"T\n\021Sel"
    "ectionShortcut\022\017\n\013NO_SHORTCUT\020\000\022\026\n\022SHORT"
    "CUT_123456789\020\001\022\026\n\022SHORTCUT_ASDFGHJKL\020\002\""
    "Q\n\rCharacterForm\022\016\n\nHALF_WIDTH\020\000\022\016\n\nFULL"
    "_WIDTH\020\001\022\r\n\tLAST_FORM\020\002\022\021\n\rNO_CONVERSION"
    "\020\003\"L\n\022ShiftKeyModeSwitch\022\007\n\003OFF\020\000\022\024\n\020ASC"
    "II_INPUT_MODE\020\001\022\027\n\023KATAKANA_INPUT_MODE\020\002"
    "\"s\n\023NumpadCharacterForm\022\025\n\021NUMPAD_INPUT_"
    "MODE\020\000\022\025\n\021NUMPAD_FULL_WIDTH\020\001\022\025\n\021NUMPAD_"
    "HALF_WIDTH\020\002\022\027\n\023NUMPAD_DIRECT_INPUT\020\003\"\254\001"
    "\n\021AutoConversionKey\022\027\n\023AUTO_CONVERSION_O"
    "FF\020\000\022\031\n\025AUTO_CONVERSION_KUTEN\020\001\022\032\n\026AUTO_"
    "CONVERSION_TOUTEN\020\002\022!\n\035AUTO_CONVERSION_Q"
    "UESTION_MARK\020\004\022$\n AUTO_CONVERSION_EXCLAM"
    "ATION_MARK\020\010\"/\n\020YenSignCharacter\022\014\n\010YEN_"
    "SIGN\020\000\022\r\n\tBACKSLASH\020\001B=\n.org.mozc.androi"
    "d.inputmethod.japanese.protobufB\013ProtoCo"
    "nfig", 4164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config/config.proto", &protobuf_RegisterTypes);
  GeneralConfig::_default_last_modified_product_version_ =
      new ::std::string("0.0.0.0", 7);
  GeneralConfig::default_instance_ = new GeneralConfig();
  OBSOLETE_SyncConfig::default_instance_ = new OBSOLETE_SyncConfig();
  Config::default_instance_ = new Config();
  Config_CharacterFormRule::default_instance_ = new Config_CharacterFormRule();
  Config_InformationListConfig::default_instance_ = new Config_InformationListConfig();
  GeneralConfig::default_instance_->InitAsDefaultInstance();
  OBSOLETE_SyncConfig::default_instance_->InitAsDefaultInstance();
  Config::default_instance_->InitAsDefaultInstance();
  Config_CharacterFormRule::default_instance_->InitAsDefaultInstance();
  Config_InformationListConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2fconfig_2eproto {
  StaticDescriptorInitializer_config_2fconfig_2eproto() {
    protobuf_AddDesc_config_2fconfig_2eproto();
  }
} static_descriptor_initializer_config_2fconfig_2eproto_;

// ===================================================================

::std::string* GeneralConfig::_default_last_modified_product_version_ = NULL;
#ifndef _MSC_VER
const int GeneralConfig::kConfigVersionFieldNumber;
const int GeneralConfig::kLastModifiedProductVersionFieldNumber;
const int GeneralConfig::kLastModifiedTimeFieldNumber;
const int GeneralConfig::kPlatformFieldNumber;
const int GeneralConfig::kUiLocaleFieldNumber;
const int GeneralConfig::kUploadUsageStatsFieldNumber;
#endif  // !_MSC_VER

GeneralConfig::GeneralConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeneralConfig::InitAsDefaultInstance() {
}

GeneralConfig::GeneralConfig(const GeneralConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeneralConfig::SharedCtor() {
  _cached_size_ = 0;
  config_version_ = 0u;
  last_modified_product_version_ = const_cast< ::std::string*>(_default_last_modified_product_version_);
  last_modified_time_ = GOOGLE_ULONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ui_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upload_usage_stats_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralConfig::~GeneralConfig() {
  SharedDtor();
}

void GeneralConfig::SharedDtor() {
  if (last_modified_product_version_ != _default_last_modified_product_version_) {
    delete last_modified_product_version_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (ui_locale_ != &::google::protobuf::internal::kEmptyString) {
    delete ui_locale_;
  }
  if (this != default_instance_) {
  }
}

void GeneralConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralConfig_descriptor_;
}

const GeneralConfig& GeneralConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2fconfig_2eproto();
  return *default_instance_;
}

GeneralConfig* GeneralConfig::default_instance_ = NULL;

GeneralConfig* GeneralConfig::New() const {
  return new GeneralConfig;
}

void GeneralConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_version_ = 0u;
    if (has_last_modified_product_version()) {
      if (last_modified_product_version_ != _default_last_modified_product_version_) {
        last_modified_product_version_->assign(*_default_last_modified_product_version_);
      }
    }
    last_modified_time_ = GOOGLE_ULONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_ui_locale()) {
      if (ui_locale_ != &::google::protobuf::internal::kEmptyString) {
        ui_locale_->clear();
      }
    }
    upload_usage_stats_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_version = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_version_)));
          set_has_config_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_modified_product_version;
        break;
      }

      // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_modified_product_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_modified_product_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_modified_product_version().data(), this->last_modified_product_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_modified_time;
        break;
      }

      // optional uint64 last_modified_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_modified_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_modified_time_)));
          set_has_last_modified_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_platform;
        break;
      }

      // optional string platform = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ui_locale;
        break;
      }

      // optional string ui_locale = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ui_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ui_locale().data(), this->ui_locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upload_usage_stats;
        break;
      }

      // optional bool upload_usage_stats = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_usage_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_usage_stats_)));
          set_has_upload_usage_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 config_version = 1 [default = 0];
  if (has_config_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_version(), output);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (has_last_modified_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_modified_product_version().data(), this->last_modified_product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_modified_product_version(), output);
  }

  // optional uint64 last_modified_time = 3 [default = 0];
  if (has_last_modified_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_modified_time(), output);
  }

  // optional string platform = 4 [default = ""];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->platform(), output);
  }

  // optional string ui_locale = 5 [default = ""];
  if (has_ui_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ui_locale().data(), this->ui_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ui_locale(), output);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (has_upload_usage_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->upload_usage_stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeneralConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 config_version = 1 [default = 0];
  if (has_config_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_version(), target);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (has_last_modified_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_modified_product_version().data(), this->last_modified_product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_modified_product_version(), target);
  }

  // optional uint64 last_modified_time = 3 [default = 0];
  if (has_last_modified_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_modified_time(), target);
  }

  // optional string platform = 4 [default = ""];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }

  // optional string ui_locale = 5 [default = ""];
  if (has_ui_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ui_locale().data(), this->ui_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ui_locale(), target);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (has_upload_usage_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->upload_usage_stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeneralConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config_version = 1 [default = 0];
    if (has_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_version());
    }

    // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
    if (has_last_modified_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_modified_product_version());
    }

    // optional uint64 last_modified_time = 3 [default = 0];
    if (has_last_modified_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_modified_time());
    }

    // optional string platform = 4 [default = ""];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string ui_locale = 5 [default = ""];
    if (has_ui_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_locale());
    }

    // optional bool upload_usage_stats = 6 [default = false];
    if (has_upload_usage_stats()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralConfig::MergeFrom(const GeneralConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_version()) {
      set_config_version(from.config_version());
    }
    if (from.has_last_modified_product_version()) {
      set_last_modified_product_version(from.last_modified_product_version());
    }
    if (from.has_last_modified_time()) {
      set_last_modified_time(from.last_modified_time());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_ui_locale()) {
      set_ui_locale(from.ui_locale());
    }
    if (from.has_upload_usage_stats()) {
      set_upload_usage_stats(from.upload_usage_stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralConfig::CopyFrom(const GeneralConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralConfig::IsInitialized() const {

  return true;
}

void GeneralConfig::Swap(GeneralConfig* other) {
  if (other != this) {
    std::swap(config_version_, other->config_version_);
    std::swap(last_modified_product_version_, other->last_modified_product_version_);
    std::swap(last_modified_time_, other->last_modified_time_);
    std::swap(platform_, other->platform_);
    std::swap(ui_locale_, other->ui_locale_);
    std::swap(upload_usage_stats_, other->upload_usage_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeneralConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralConfig_descriptor_;
  metadata.reflection = GeneralConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OBSOLETE_SyncConfig::kUseConfigSyncFieldNumber;
const int OBSOLETE_SyncConfig::kUseUserDictionarySyncFieldNumber;
const int OBSOLETE_SyncConfig::kUseUserHistorySyncFieldNumber;
const int OBSOLETE_SyncConfig::kUseLearningPreferenceSyncFieldNumber;
const int OBSOLETE_SyncConfig::kUseContactListSyncFieldNumber;
#endif  // !_MSC_VER

OBSOLETE_SyncConfig::OBSOLETE_SyncConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OBSOLETE_SyncConfig::InitAsDefaultInstance() {
}

OBSOLETE_SyncConfig::OBSOLETE_SyncConfig(const OBSOLETE_SyncConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OBSOLETE_SyncConfig::SharedCtor() {
  _cached_size_ = 0;
  use_config_sync_ = false;
  use_user_dictionary_sync_ = false;
  use_user_history_sync_ = false;
  use_learning_preference_sync_ = false;
  use_contact_list_sync_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OBSOLETE_SyncConfig::~OBSOLETE_SyncConfig() {
  SharedDtor();
}

void OBSOLETE_SyncConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OBSOLETE_SyncConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OBSOLETE_SyncConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OBSOLETE_SyncConfig_descriptor_;
}

const OBSOLETE_SyncConfig& OBSOLETE_SyncConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2fconfig_2eproto();
  return *default_instance_;
}

OBSOLETE_SyncConfig* OBSOLETE_SyncConfig::default_instance_ = NULL;

OBSOLETE_SyncConfig* OBSOLETE_SyncConfig::New() const {
  return new OBSOLETE_SyncConfig;
}

void OBSOLETE_SyncConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_config_sync_ = false;
    use_user_dictionary_sync_ = false;
    use_user_history_sync_ = false;
    use_learning_preference_sync_ = false;
    use_contact_list_sync_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OBSOLETE_SyncConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_config_sync = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_config_sync_)));
          set_has_use_config_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_user_dictionary_sync;
        break;
      }

      // optional bool use_user_dictionary_sync = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_user_dictionary_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_user_dictionary_sync_)));
          set_has_use_user_dictionary_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_user_history_sync;
        break;
      }

      // optional bool use_user_history_sync = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_user_history_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_user_history_sync_)));
          set_has_use_user_history_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_learning_preference_sync;
        break;
      }

      // optional bool use_learning_preference_sync = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_learning_preference_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_learning_preference_sync_)));
          set_has_use_learning_preference_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_contact_list_sync;
        break;
      }

      // optional bool use_contact_list_sync = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_contact_list_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_contact_list_sync_)));
          set_has_use_contact_list_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OBSOLETE_SyncConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool use_config_sync = 1 [default = false];
  if (has_use_config_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_config_sync(), output);
  }

  // optional bool use_user_dictionary_sync = 2 [default = false];
  if (has_use_user_dictionary_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_user_dictionary_sync(), output);
  }

  // optional bool use_user_history_sync = 3 [default = false];
  if (has_use_user_history_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_user_history_sync(), output);
  }

  // optional bool use_learning_preference_sync = 4 [default = false];
  if (has_use_learning_preference_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_learning_preference_sync(), output);
  }

  // optional bool use_contact_list_sync = 5 [default = false];
  if (has_use_contact_list_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_contact_list_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OBSOLETE_SyncConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool use_config_sync = 1 [default = false];
  if (has_use_config_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_config_sync(), target);
  }

  // optional bool use_user_dictionary_sync = 2 [default = false];
  if (has_use_user_dictionary_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_user_dictionary_sync(), target);
  }

  // optional bool use_user_history_sync = 3 [default = false];
  if (has_use_user_history_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_user_history_sync(), target);
  }

  // optional bool use_learning_preference_sync = 4 [default = false];
  if (has_use_learning_preference_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_learning_preference_sync(), target);
  }

  // optional bool use_contact_list_sync = 5 [default = false];
  if (has_use_contact_list_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_contact_list_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OBSOLETE_SyncConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool use_config_sync = 1 [default = false];
    if (has_use_config_sync()) {
      total_size += 1 + 1;
    }

    // optional bool use_user_dictionary_sync = 2 [default = false];
    if (has_use_user_dictionary_sync()) {
      total_size += 1 + 1;
    }

    // optional bool use_user_history_sync = 3 [default = false];
    if (has_use_user_history_sync()) {
      total_size += 1 + 1;
    }

    // optional bool use_learning_preference_sync = 4 [default = false];
    if (has_use_learning_preference_sync()) {
      total_size += 1 + 1;
    }

    // optional bool use_contact_list_sync = 5 [default = false];
    if (has_use_contact_list_sync()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OBSOLETE_SyncConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OBSOLETE_SyncConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OBSOLETE_SyncConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OBSOLETE_SyncConfig::MergeFrom(const OBSOLETE_SyncConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_config_sync()) {
      set_use_config_sync(from.use_config_sync());
    }
    if (from.has_use_user_dictionary_sync()) {
      set_use_user_dictionary_sync(from.use_user_dictionary_sync());
    }
    if (from.has_use_user_history_sync()) {
      set_use_user_history_sync(from.use_user_history_sync());
    }
    if (from.has_use_learning_preference_sync()) {
      set_use_learning_preference_sync(from.use_learning_preference_sync());
    }
    if (from.has_use_contact_list_sync()) {
      set_use_contact_list_sync(from.use_contact_list_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OBSOLETE_SyncConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBSOLETE_SyncConfig::CopyFrom(const OBSOLETE_SyncConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_SyncConfig::IsInitialized() const {

  return true;
}

void OBSOLETE_SyncConfig::Swap(OBSOLETE_SyncConfig* other) {
  if (other != this) {
    std::swap(use_config_sync_, other->use_config_sync_);
    std::swap(use_user_dictionary_sync_, other->use_user_dictionary_sync_);
    std::swap(use_user_history_sync_, other->use_user_history_sync_);
    std::swap(use_learning_preference_sync_, other->use_learning_preference_sync_);
    std::swap(use_contact_list_sync_, other->use_contact_list_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OBSOLETE_SyncConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OBSOLETE_SyncConfig_descriptor_;
  metadata.reflection = OBSOLETE_SyncConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Config_PreeditMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_PreeditMethod_descriptor_;
}
bool Config_PreeditMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_PreeditMethod Config::ROMAN;
const Config_PreeditMethod Config::KANA;
const Config_PreeditMethod Config::PreeditMethod_MIN;
const Config_PreeditMethod Config::PreeditMethod_MAX;
const int Config::PreeditMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_SessionKeymap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_SessionKeymap_descriptor_;
}
bool Config_SessionKeymap_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_SessionKeymap Config::NONE;
const Config_SessionKeymap Config::CUSTOM;
const Config_SessionKeymap Config::ATOK;
const Config_SessionKeymap Config::MSIME;
const Config_SessionKeymap Config::KOTOERI;
const Config_SessionKeymap Config::MOBILE;
const Config_SessionKeymap Config::CHROMEOS;
const Config_SessionKeymap Config::SessionKeymap_MIN;
const Config_SessionKeymap Config::SessionKeymap_MAX;
const int Config::SessionKeymap_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_PunctuationMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_PunctuationMethod_descriptor_;
}
bool Config_PunctuationMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_PunctuationMethod Config::KUTEN_TOUTEN;
const Config_PunctuationMethod Config::COMMA_PERIOD;
const Config_PunctuationMethod Config::KUTEN_PERIOD;
const Config_PunctuationMethod Config::COMMA_TOUTEN;
const Config_PunctuationMethod Config::PunctuationMethod_MIN;
const Config_PunctuationMethod Config::PunctuationMethod_MAX;
const int Config::PunctuationMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_SymbolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_SymbolMethod_descriptor_;
}
bool Config_SymbolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_SymbolMethod Config::CORNER_BRACKET_MIDDLE_DOT;
const Config_SymbolMethod Config::SQUARE_BRACKET_SLASH;
const Config_SymbolMethod Config::CORNER_BRACKET_SLASH;
const Config_SymbolMethod Config::SQUARE_BRACKET_MIDDLE_DOT;
const Config_SymbolMethod Config::SymbolMethod_MIN;
const Config_SymbolMethod Config::SymbolMethod_MAX;
const int Config::SymbolMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_FundamentalCharacterForm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_FundamentalCharacterForm_descriptor_;
}
bool Config_FundamentalCharacterForm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_INPUT_MODE;
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_FULL_WIDTH;
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_HALF_WIDTH;
const Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MIN;
const Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MAX;
const int Config::FundamentalCharacterForm_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_HistoryLearningLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_HistoryLearningLevel_descriptor_;
}
bool Config_HistoryLearningLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_HistoryLearningLevel Config::DEFAULT_HISTORY;
const Config_HistoryLearningLevel Config::READ_ONLY;
const Config_HistoryLearningLevel Config::NO_HISTORY;
const Config_HistoryLearningLevel Config::HistoryLearningLevel_MIN;
const Config_HistoryLearningLevel Config::HistoryLearningLevel_MAX;
const int Config::HistoryLearningLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_SelectionShortcut_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_SelectionShortcut_descriptor_;
}
bool Config_SelectionShortcut_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_SelectionShortcut Config::NO_SHORTCUT;
const Config_SelectionShortcut Config::SHORTCUT_123456789;
const Config_SelectionShortcut Config::SHORTCUT_ASDFGHJKL;
const Config_SelectionShortcut Config::SelectionShortcut_MIN;
const Config_SelectionShortcut Config::SelectionShortcut_MAX;
const int Config::SelectionShortcut_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_CharacterForm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_CharacterForm_descriptor_;
}
bool Config_CharacterForm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_CharacterForm Config::HALF_WIDTH;
const Config_CharacterForm Config::FULL_WIDTH;
const Config_CharacterForm Config::LAST_FORM;
const Config_CharacterForm Config::NO_CONVERSION;
const Config_CharacterForm Config::CharacterForm_MIN;
const Config_CharacterForm Config::CharacterForm_MAX;
const int Config::CharacterForm_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_ShiftKeyModeSwitch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_ShiftKeyModeSwitch_descriptor_;
}
bool Config_ShiftKeyModeSwitch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_ShiftKeyModeSwitch Config::OFF;
const Config_ShiftKeyModeSwitch Config::ASCII_INPUT_MODE;
const Config_ShiftKeyModeSwitch Config::KATAKANA_INPUT_MODE;
const Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MIN;
const Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MAX;
const int Config::ShiftKeyModeSwitch_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_NumpadCharacterForm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_NumpadCharacterForm_descriptor_;
}
bool Config_NumpadCharacterForm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_NumpadCharacterForm Config::NUMPAD_INPUT_MODE;
const Config_NumpadCharacterForm Config::NUMPAD_FULL_WIDTH;
const Config_NumpadCharacterForm Config::NUMPAD_HALF_WIDTH;
const Config_NumpadCharacterForm Config::NUMPAD_DIRECT_INPUT;
const Config_NumpadCharacterForm Config::NumpadCharacterForm_MIN;
const Config_NumpadCharacterForm Config::NumpadCharacterForm_MAX;
const int Config::NumpadCharacterForm_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_AutoConversionKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_AutoConversionKey_descriptor_;
}
bool Config_AutoConversionKey_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_AutoConversionKey Config::AUTO_CONVERSION_OFF;
const Config_AutoConversionKey Config::AUTO_CONVERSION_KUTEN;
const Config_AutoConversionKey Config::AUTO_CONVERSION_TOUTEN;
const Config_AutoConversionKey Config::AUTO_CONVERSION_QUESTION_MARK;
const Config_AutoConversionKey Config::AUTO_CONVERSION_EXCLAMATION_MARK;
const Config_AutoConversionKey Config::AutoConversionKey_MIN;
const Config_AutoConversionKey Config::AutoConversionKey_MAX;
const int Config::AutoConversionKey_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_YenSignCharacter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_YenSignCharacter_descriptor_;
}
bool Config_YenSignCharacter_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_YenSignCharacter Config::YEN_SIGN;
const Config_YenSignCharacter Config::BACKSLASH;
const Config_YenSignCharacter Config::YenSignCharacter_MIN;
const Config_YenSignCharacter Config::YenSignCharacter_MAX;
const int Config::YenSignCharacter_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Config_CharacterFormRule::kGroupFieldNumber;
const int Config_CharacterFormRule::kPreeditCharacterFormFieldNumber;
const int Config_CharacterFormRule::kConversionCharacterFormFieldNumber;
#endif  // !_MSC_VER

Config_CharacterFormRule::Config_CharacterFormRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config_CharacterFormRule::InitAsDefaultInstance() {
}

Config_CharacterFormRule::Config_CharacterFormRule(const Config_CharacterFormRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config_CharacterFormRule::SharedCtor() {
  _cached_size_ = 0;
  group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preedit_character_form_ = 1;
  conversion_character_form_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config_CharacterFormRule::~Config_CharacterFormRule() {
  SharedDtor();
}

void Config_CharacterFormRule::SharedDtor() {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (this != default_instance_) {
  }
}

void Config_CharacterFormRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config_CharacterFormRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_CharacterFormRule_descriptor_;
}

const Config_CharacterFormRule& Config_CharacterFormRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2fconfig_2eproto();
  return *default_instance_;
}

Config_CharacterFormRule* Config_CharacterFormRule::default_instance_ = NULL;

Config_CharacterFormRule* Config_CharacterFormRule::New() const {
  return new Config_CharacterFormRule;
}

void Config_CharacterFormRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != &::google::protobuf::internal::kEmptyString) {
        group_->clear();
      }
    }
    preedit_character_form_ = 1;
    conversion_character_form_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config_CharacterFormRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preedit_character_form;
        break;
      }

      // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preedit_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_CharacterForm_IsValid(value)) {
            set_preedit_character_form(static_cast< ::mozc::config::Config_CharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conversion_character_form;
        break;
      }

      // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conversion_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_CharacterForm_IsValid(value)) {
            set_conversion_character_form(static_cast< ::mozc::config::Config_CharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config_CharacterFormRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group(), output);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (has_preedit_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->preedit_character_form(), output);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (has_conversion_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->conversion_character_form(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config_CharacterFormRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (has_preedit_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->preedit_character_form(), target);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (has_conversion_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->conversion_character_form(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config_CharacterFormRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
    if (has_preedit_character_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_character_form());
    }

    // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
    if (has_conversion_character_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->conversion_character_form());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config_CharacterFormRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config_CharacterFormRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config_CharacterFormRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config_CharacterFormRule::MergeFrom(const Config_CharacterFormRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_preedit_character_form()) {
      set_preedit_character_form(from.preedit_character_form());
    }
    if (from.has_conversion_character_form()) {
      set_conversion_character_form(from.conversion_character_form());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config_CharacterFormRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_CharacterFormRule::CopyFrom(const Config_CharacterFormRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CharacterFormRule::IsInitialized() const {

  return true;
}

void Config_CharacterFormRule::Swap(Config_CharacterFormRule* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(preedit_character_form_, other->preedit_character_form_);
    std::swap(conversion_character_form_, other->conversion_character_form_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config_CharacterFormRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_CharacterFormRule_descriptor_;
  metadata.reflection = Config_CharacterFormRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Config_InformationListConfig::kUseLocalUsageDictionaryFieldNumber;
#endif  // !_MSC_VER

Config_InformationListConfig::Config_InformationListConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config_InformationListConfig::InitAsDefaultInstance() {
}

Config_InformationListConfig::Config_InformationListConfig(const Config_InformationListConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config_InformationListConfig::SharedCtor() {
  _cached_size_ = 0;
  use_local_usage_dictionary_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config_InformationListConfig::~Config_InformationListConfig() {
  SharedDtor();
}

void Config_InformationListConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config_InformationListConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config_InformationListConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_InformationListConfig_descriptor_;
}

const Config_InformationListConfig& Config_InformationListConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2fconfig_2eproto();
  return *default_instance_;
}

Config_InformationListConfig* Config_InformationListConfig::default_instance_ = NULL;

Config_InformationListConfig* Config_InformationListConfig::New() const {
  return new Config_InformationListConfig;
}

void Config_InformationListConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_local_usage_dictionary_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config_InformationListConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_local_usage_dictionary = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_local_usage_dictionary_)));
          set_has_use_local_usage_dictionary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config_InformationListConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (has_use_local_usage_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_local_usage_dictionary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config_InformationListConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (has_use_local_usage_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_local_usage_dictionary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config_InformationListConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool use_local_usage_dictionary = 1 [default = true];
    if (has_use_local_usage_dictionary()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config_InformationListConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config_InformationListConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config_InformationListConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config_InformationListConfig::MergeFrom(const Config_InformationListConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_local_usage_dictionary()) {
      set_use_local_usage_dictionary(from.use_local_usage_dictionary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config_InformationListConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_InformationListConfig::CopyFrom(const Config_InformationListConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_InformationListConfig::IsInitialized() const {

  return true;
}

void Config_InformationListConfig::Swap(Config_InformationListConfig* other) {
  if (other != this) {
    std::swap(use_local_usage_dictionary_, other->use_local_usage_dictionary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config_InformationListConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_InformationListConfig_descriptor_;
  metadata.reflection = Config_InformationListConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Config::kGeneralConfigFieldNumber;
const int Config::kVerboseLevelFieldNumber;
const int Config::kDEPRECATEDLogAllCommandsFieldNumber;
const int Config::kIncognitoModeFieldNumber;
const int Config::kCheckDefaultFieldNumber;
const int Config::kPresentationModeFieldNumber;
const int Config::kPreeditMethodFieldNumber;
const int Config::kSessionKeymapFieldNumber;
const int Config::kCustomKeymapTableFieldNumber;
const int Config::kCustomRomanTableFieldNumber;
const int Config::kPunctuationMethodFieldNumber;
const int Config::kSymbolMethodFieldNumber;
const int Config::kSpaceCharacterFormFieldNumber;
const int Config::kUseKeyboardToChangePreeditMethodFieldNumber;
const int Config::kHistoryLearningLevelFieldNumber;
const int Config::kSelectionShortcutFieldNumber;
const int Config::kCharacterFormRulesFieldNumber;
const int Config::kUseAutoImeTurnOffFieldNumber;
const int Config::kUseCascadingWindowFieldNumber;
const int Config::kShiftKeyModeSwitchFieldNumber;
const int Config::kNumpadCharacterFormFieldNumber;
const int Config::kUseAutoConversionFieldNumber;
const int Config::kAutoConversionKeyFieldNumber;
const int Config::kYenSignCharacterFieldNumber;
const int Config::kUseJapaneseLayoutFieldNumber;
const int Config::kUseKanaModifierInsensitiveConversionFieldNumber;
const int Config::kUseTypingCorrectionFieldNumber;
const int Config::kUseDateConversionFieldNumber;
const int Config::kUseSingleKanjiConversionFieldNumber;
const int Config::kUseSymbolConversionFieldNumber;
const int Config::kUseNumberConversionFieldNumber;
const int Config::kUseEmoticonConversionFieldNumber;
const int Config::kUseCalculatorFieldNumber;
const int Config::kUseT13NConversionFieldNumber;
const int Config::kUseZipCodeConversionFieldNumber;
const int Config::kUseSpellingCorrectionFieldNumber;
const int Config::kUseEmojiConversionFieldNumber;
const int Config::kInformationListConfigFieldNumber;
const int Config::kUseHistorySuggestFieldNumber;
const int Config::kUseDictionarySuggestFieldNumber;
const int Config::kUseRealtimeConversionFieldNumber;
const int Config::kSuggestionsSizeFieldNumber;
const int Config::kUseModeIndicatorFieldNumber;
const int Config::kOBSOLETESyncConfigFieldNumber;
const int Config::kAllowCloudHandwritingFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
  general_config_ = const_cast< ::mozc::config::GeneralConfig*>(&::mozc::config::GeneralConfig::default_instance());
  information_list_config_ = const_cast< ::mozc::config::Config_InformationListConfig*>(&::mozc::config::Config_InformationListConfig::default_instance());
  obsolete_sync_config_ = const_cast< ::mozc::config::OBSOLETE_SyncConfig*>(&::mozc::config::OBSOLETE_SyncConfig::default_instance());
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  general_config_ = NULL;
  verbose_level_ = 0;
  deprecated_log_all_commands_ = false;
  incognito_mode_ = false;
  check_default_ = true;
  presentation_mode_ = false;
  preedit_method_ = 0;
  session_keymap_ = -1;
  custom_keymap_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_roman_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  punctuation_method_ = 0;
  symbol_method_ = 0;
  space_character_form_ = 0;
  use_keyboard_to_change_preedit_method_ = false;
  history_learning_level_ = 0;
  selection_shortcut_ = 1;
  use_auto_ime_turn_off_ = true;
  use_cascading_window_ = true;
  shift_key_mode_switch_ = 1;
  numpad_character_form_ = 2;
  use_auto_conversion_ = false;
  auto_conversion_key_ = 13u;
  yen_sign_character_ = 0;
  use_japanese_layout_ = false;
  use_kana_modifier_insensitive_conversion_ = false;
  use_typing_correction_ = false;
  use_date_conversion_ = true;
  use_single_kanji_conversion_ = true;
  use_symbol_conversion_ = true;
  use_number_conversion_ = true;
  use_emoticon_conversion_ = true;
  use_calculator_ = true;
  use_t13n_conversion_ = true;
  use_zip_code_conversion_ = true;
  use_spelling_correction_ = true;
  use_emoji_conversion_ = false;
  information_list_config_ = NULL;
  use_history_suggest_ = true;
  use_dictionary_suggest_ = true;
  use_realtime_conversion_ = true;
  suggestions_size_ = 3u;
  use_mode_indicator_ = true;
  obsolete_sync_config_ = NULL;
  allow_cloud_handwriting_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (custom_keymap_table_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_keymap_table_;
  }
  if (custom_roman_table_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_roman_table_;
  }
  if (this != default_instance_) {
    delete general_config_;
    delete information_list_config_;
    delete obsolete_sync_config_;
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2fconfig_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_general_config()) {
      if (general_config_ != NULL) general_config_->::mozc::config::GeneralConfig::Clear();
    }
    verbose_level_ = 0;
    deprecated_log_all_commands_ = false;
    incognito_mode_ = false;
    check_default_ = true;
    presentation_mode_ = false;
    preedit_method_ = 0;
    session_keymap_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_custom_keymap_table()) {
      if (custom_keymap_table_ != &::google::protobuf::internal::kEmptyString) {
        custom_keymap_table_->clear();
      }
    }
    if (has_custom_roman_table()) {
      if (custom_roman_table_ != &::google::protobuf::internal::kEmptyString) {
        custom_roman_table_->clear();
      }
    }
    punctuation_method_ = 0;
    symbol_method_ = 0;
    space_character_form_ = 0;
    use_keyboard_to_change_preedit_method_ = false;
    history_learning_level_ = 0;
    selection_shortcut_ = 1;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    use_auto_ime_turn_off_ = true;
    use_cascading_window_ = true;
    shift_key_mode_switch_ = 1;
    numpad_character_form_ = 2;
    use_auto_conversion_ = false;
    auto_conversion_key_ = 13u;
    yen_sign_character_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    use_japanese_layout_ = false;
    use_kana_modifier_insensitive_conversion_ = false;
    use_typing_correction_ = false;
    use_date_conversion_ = true;
    use_single_kanji_conversion_ = true;
    use_symbol_conversion_ = true;
    use_number_conversion_ = true;
    use_emoticon_conversion_ = true;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    use_calculator_ = true;
    use_t13n_conversion_ = true;
    use_zip_code_conversion_ = true;
    use_spelling_correction_ = true;
    use_emoji_conversion_ = false;
    if (has_information_list_config()) {
      if (information_list_config_ != NULL) information_list_config_->::mozc::config::Config_InformationListConfig::Clear();
    }
    use_history_suggest_ = true;
    use_dictionary_suggest_ = true;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    use_realtime_conversion_ = true;
    suggestions_size_ = 3u;
    use_mode_indicator_ = true;
    if (has_obsolete_sync_config()) {
      if (obsolete_sync_config_ != NULL) obsolete_sync_config_->::mozc::config::OBSOLETE_SyncConfig::Clear();
    }
    allow_cloud_handwriting_ = false;
  }
  character_form_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.config.GeneralConfig general_config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_verbose_level;
        break;
      }

      // optional int32 verbose_level = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verbose_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verbose_level_)));
          set_has_verbose_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_DEPRECATED_log_all_commands;
        break;
      }

      // optional bool DEPRECATED_log_all_commands = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEPRECATED_log_all_commands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_log_all_commands_)));
          set_has_deprecated_log_all_commands();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_incognito_mode;
        break;
      }

      // optional bool incognito_mode = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incognito_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incognito_mode_)));
          set_has_incognito_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_check_default;
        break;
      }

      // optional bool check_default = 22 [default = true];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_default_)));
          set_has_check_default();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_presentation_mode;
        break;
      }

      // optional bool presentation_mode = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentation_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presentation_mode_)));
          set_has_presentation_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_preedit_method;
        break;
      }

      // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preedit_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_PreeditMethod_IsValid(value)) {
            set_preedit_method(static_cast< ::mozc::config::Config_PreeditMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_session_keymap;
        break;
      }

      // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_keymap:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SessionKeymap_IsValid(value)) {
            set_session_keymap(static_cast< ::mozc::config::Config_SessionKeymap >(value));
          } else {
            mutable_unknown_fields()->AddVarint(41, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_custom_keymap_table;
        break;
      }

      // optional bytes custom_keymap_table = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_keymap_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_keymap_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_custom_roman_table;
        break;
      }

      // optional bytes custom_roman_table = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_roman_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_roman_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_punctuation_method;
        break;
      }

      // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_punctuation_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_PunctuationMethod_IsValid(value)) {
            set_punctuation_method(static_cast< ::mozc::config::Config_PunctuationMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(45, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_symbol_method;
        break;
      }

      // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symbol_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SymbolMethod_IsValid(value)) {
            set_symbol_method(static_cast< ::mozc::config::Config_SymbolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(46, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_space_character_form;
        break;
      }

      // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_FundamentalCharacterForm_IsValid(value)) {
            set_space_character_form(static_cast< ::mozc::config::Config_FundamentalCharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(47, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_use_keyboard_to_change_preedit_method;
        break;
      }

      // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_keyboard_to_change_preedit_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_keyboard_to_change_preedit_method_)));
          set_has_use_keyboard_to_change_preedit_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_history_learning_level;
        break;
      }

      // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_learning_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_HistoryLearningLevel_IsValid(value)) {
            set_history_learning_level(static_cast< ::mozc::config::Config_HistoryLearningLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_selection_shortcut;
        break;
      }

      // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_shortcut:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SelectionShortcut_IsValid(value)) {
            set_selection_shortcut(static_cast< ::mozc::config::Config_SelectionShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(52, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_character_form_rules;
        break;
      }

      // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_form_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character_form_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_character_form_rules;
        if (input->ExpectTag(448)) goto parse_use_auto_ime_turn_off;
        break;
      }

      // optional bool use_auto_ime_turn_off = 56 [default = true];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_auto_ime_turn_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_ime_turn_off_)));
          set_has_use_auto_ime_turn_off();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_use_cascading_window;
        break;
      }

      // optional bool use_cascading_window = 58 [default = true];
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_cascading_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cascading_window_)));
          set_has_use_cascading_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_shift_key_mode_switch;
        break;
      }

      // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shift_key_mode_switch:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_ShiftKeyModeSwitch_IsValid(value)) {
            set_shift_key_mode_switch(static_cast< ::mozc::config::Config_ShiftKeyModeSwitch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(59, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_numpad_character_form;
        break;
      }

      // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numpad_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_NumpadCharacterForm_IsValid(value)) {
            set_numpad_character_form(static_cast< ::mozc::config::Config_NumpadCharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(60, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_use_auto_conversion;
        break;
      }

      // optional bool use_auto_conversion = 61 [default = false];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_auto_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_conversion_)));
          set_has_use_auto_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_auto_conversion_key;
        break;
      }

      // optional uint32 auto_conversion_key = 62 [default = 13];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_conversion_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_conversion_key_)));
          set_has_auto_conversion_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_yen_sign_character;
        break;
      }

      // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yen_sign_character:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_YenSignCharacter_IsValid(value)) {
            set_yen_sign_character(static_cast< ::mozc::config::Config_YenSignCharacter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(63, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_use_japanese_layout;
        break;
      }

      // optional bool use_japanese_layout = 64 [default = false];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_japanese_layout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_japanese_layout_)));
          set_has_use_japanese_layout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_use_kana_modifier_insensitive_conversion;
        break;
      }

      // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_kana_modifier_insensitive_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kana_modifier_insensitive_conversion_)));
          set_has_use_kana_modifier_insensitive_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_use_typing_correction;
        break;
      }

      // optional bool use_typing_correction = 66 [default = false];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_typing_correction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_typing_correction_)));
          set_has_use_typing_correction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_use_date_conversion;
        break;
      }

      // optional bool use_date_conversion = 80 [default = true];
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_date_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_date_conversion_)));
          set_has_use_date_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_use_single_kanji_conversion;
        break;
      }

      // optional bool use_single_kanji_conversion = 81 [default = true];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_single_kanji_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_single_kanji_conversion_)));
          set_has_use_single_kanji_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_use_symbol_conversion;
        break;
      }

      // optional bool use_symbol_conversion = 82 [default = true];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_symbol_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_symbol_conversion_)));
          set_has_use_symbol_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_use_number_conversion;
        break;
      }

      // optional bool use_number_conversion = 83 [default = true];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_number_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_number_conversion_)));
          set_has_use_number_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_use_emoticon_conversion;
        break;
      }

      // optional bool use_emoticon_conversion = 84 [default = true];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_emoticon_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_emoticon_conversion_)));
          set_has_use_emoticon_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_use_calculator;
        break;
      }

      // optional bool use_calculator = 85 [default = true];
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_calculator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_calculator_)));
          set_has_use_calculator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_use_t13n_conversion;
        break;
      }

      // optional bool use_t13n_conversion = 86 [default = true];
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_t13n_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_t13n_conversion_)));
          set_has_use_t13n_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_use_zip_code_conversion;
        break;
      }

      // optional bool use_zip_code_conversion = 87 [default = true];
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_zip_code_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_zip_code_conversion_)));
          set_has_use_zip_code_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_use_spelling_correction;
        break;
      }

      // optional bool use_spelling_correction = 88 [default = true];
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_spelling_correction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_spelling_correction_)));
          set_has_use_spelling_correction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_use_emoji_conversion;
        break;
      }

      // optional bool use_emoji_conversion = 89 [default = false];
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_emoji_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_emoji_conversion_)));
          set_has_use_emoji_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_information_list_config;
        break;
      }

      // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_information_list_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_information_list_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_use_history_suggest;
        break;
      }

      // optional bool use_history_suggest = 100 [default = true];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_history_suggest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_history_suggest_)));
          set_has_use_history_suggest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_use_dictionary_suggest;
        break;
      }

      // optional bool use_dictionary_suggest = 101 [default = true];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_dictionary_suggest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dictionary_suggest_)));
          set_has_use_dictionary_suggest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_use_realtime_conversion;
        break;
      }

      // optional bool use_realtime_conversion = 102 [default = true];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_realtime_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_realtime_conversion_)));
          set_has_use_realtime_conversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_suggestions_size;
        break;
      }

      // optional uint32 suggestions_size = 110 [default = 3];
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suggestions_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggestions_size_)));
          set_has_suggestions_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_use_mode_indicator;
        break;
      }

      // optional bool use_mode_indicator = 120 [default = true];
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_mode_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mode_indicator_)));
          set_has_use_mode_indicator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2402)) goto parse_OBSOLETE_sync_config;
        break;
      }

      // optional .mozc.config.OBSOLETE_SyncConfig OBSOLETE_sync_config = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OBSOLETE_sync_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_sync_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2408)) goto parse_allow_cloud_handwriting;
        break;
      }

      // optional bool allow_cloud_handwriting = 301 [default = false];
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_cloud_handwriting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cloud_handwriting_)));
          set_has_allow_cloud_handwriting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (has_general_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->general_config(), output);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (has_verbose_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->verbose_level(), output);
  }

  // optional bool DEPRECATED_log_all_commands = 11 [default = false];
  if (has_deprecated_log_all_commands()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->deprecated_log_all_commands(), output);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (has_incognito_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->incognito_mode(), output);
  }

  // optional bool check_default = 22 [default = true];
  if (has_check_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->check_default(), output);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (has_presentation_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->presentation_mode(), output);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (has_preedit_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->preedit_method(), output);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (has_session_keymap()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->session_keymap(), output);
  }

  // optional bytes custom_keymap_table = 42;
  if (has_custom_keymap_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      42, this->custom_keymap_table(), output);
  }

  // optional bytes custom_roman_table = 43;
  if (has_custom_roman_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      43, this->custom_roman_table(), output);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (has_punctuation_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->punctuation_method(), output);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (has_symbol_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->symbol_method(), output);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (has_space_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->space_character_form(), output);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (has_use_keyboard_to_change_preedit_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->use_keyboard_to_change_preedit_method(), output);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (has_history_learning_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->history_learning_level(), output);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (has_selection_shortcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->selection_shortcut(), output);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (int i = 0; i < this->character_form_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->character_form_rules(i), output);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (has_use_auto_ime_turn_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->use_auto_ime_turn_off(), output);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (has_use_cascading_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->use_cascading_window(), output);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (has_shift_key_mode_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->shift_key_mode_switch(), output);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (has_numpad_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->numpad_character_form(), output);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (has_use_auto_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->use_auto_conversion(), output);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (has_auto_conversion_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->auto_conversion_key(), output);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (has_yen_sign_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->yen_sign_character(), output);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (has_use_japanese_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->use_japanese_layout(), output);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (has_use_kana_modifier_insensitive_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->use_kana_modifier_insensitive_conversion(), output);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (has_use_typing_correction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->use_typing_correction(), output);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (has_use_date_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->use_date_conversion(), output);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (has_use_single_kanji_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->use_single_kanji_conversion(), output);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (has_use_symbol_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->use_symbol_conversion(), output);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (has_use_number_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->use_number_conversion(), output);
  }

  // optional bool use_emoticon_conversion = 84 [default = true];
  if (has_use_emoticon_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->use_emoticon_conversion(), output);
  }

  // optional bool use_calculator = 85 [default = true];
  if (has_use_calculator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->use_calculator(), output);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (has_use_t13n_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->use_t13n_conversion(), output);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (has_use_zip_code_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->use_zip_code_conversion(), output);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (has_use_spelling_correction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->use_spelling_correction(), output);
  }

  // optional bool use_emoji_conversion = 89 [default = false];
  if (has_use_emoji_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->use_emoji_conversion(), output);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (has_information_list_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->information_list_config(), output);
  }

  // optional bool use_history_suggest = 100 [default = true];
  if (has_use_history_suggest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->use_history_suggest(), output);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (has_use_dictionary_suggest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_dictionary_suggest(), output);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (has_use_realtime_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->use_realtime_conversion(), output);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (has_suggestions_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->suggestions_size(), output);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (has_use_mode_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->use_mode_indicator(), output);
  }

  // optional .mozc.config.OBSOLETE_SyncConfig OBSOLETE_sync_config = 300;
  if (has_obsolete_sync_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->obsolete_sync_config(), output);
  }

  // optional bool allow_cloud_handwriting = 301 [default = false];
  if (has_allow_cloud_handwriting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(301, this->allow_cloud_handwriting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (has_general_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->general_config(), target);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (has_verbose_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->verbose_level(), target);
  }

  // optional bool DEPRECATED_log_all_commands = 11 [default = false];
  if (has_deprecated_log_all_commands()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->deprecated_log_all_commands(), target);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (has_incognito_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->incognito_mode(), target);
  }

  // optional bool check_default = 22 [default = true];
  if (has_check_default()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->check_default(), target);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (has_presentation_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->presentation_mode(), target);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (has_preedit_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->preedit_method(), target);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (has_session_keymap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->session_keymap(), target);
  }

  // optional bytes custom_keymap_table = 42;
  if (has_custom_keymap_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->custom_keymap_table(), target);
  }

  // optional bytes custom_roman_table = 43;
  if (has_custom_roman_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        43, this->custom_roman_table(), target);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (has_punctuation_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      45, this->punctuation_method(), target);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (has_symbol_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->symbol_method(), target);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (has_space_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->space_character_form(), target);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (has_use_keyboard_to_change_preedit_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->use_keyboard_to_change_preedit_method(), target);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (has_history_learning_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->history_learning_level(), target);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (has_selection_shortcut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      52, this->selection_shortcut(), target);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (int i = 0; i < this->character_form_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->character_form_rules(i), target);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (has_use_auto_ime_turn_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->use_auto_ime_turn_off(), target);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (has_use_cascading_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->use_cascading_window(), target);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (has_shift_key_mode_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->shift_key_mode_switch(), target);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (has_numpad_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->numpad_character_form(), target);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (has_use_auto_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->use_auto_conversion(), target);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (has_auto_conversion_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->auto_conversion_key(), target);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (has_yen_sign_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->yen_sign_character(), target);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (has_use_japanese_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->use_japanese_layout(), target);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (has_use_kana_modifier_insensitive_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->use_kana_modifier_insensitive_conversion(), target);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (has_use_typing_correction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->use_typing_correction(), target);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (has_use_date_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->use_date_conversion(), target);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (has_use_single_kanji_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->use_single_kanji_conversion(), target);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (has_use_symbol_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->use_symbol_conversion(), target);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (has_use_number_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->use_number_conversion(), target);
  }

  // optional bool use_emoticon_conversion = 84 [default = true];
  if (has_use_emoticon_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->use_emoticon_conversion(), target);
  }

  // optional bool use_calculator = 85 [default = true];
  if (has_use_calculator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->use_calculator(), target);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (has_use_t13n_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->use_t13n_conversion(), target);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (has_use_zip_code_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->use_zip_code_conversion(), target);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (has_use_spelling_correction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->use_spelling_correction(), target);
  }

  // optional bool use_emoji_conversion = 89 [default = false];
  if (has_use_emoji_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->use_emoji_conversion(), target);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (has_information_list_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->information_list_config(), target);
  }

  // optional bool use_history_suggest = 100 [default = true];
  if (has_use_history_suggest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->use_history_suggest(), target);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (has_use_dictionary_suggest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_dictionary_suggest(), target);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (has_use_realtime_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->use_realtime_conversion(), target);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (has_suggestions_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->suggestions_size(), target);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (has_use_mode_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->use_mode_indicator(), target);
  }

  // optional .mozc.config.OBSOLETE_SyncConfig OBSOLETE_sync_config = 300;
  if (has_obsolete_sync_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->obsolete_sync_config(), target);
  }

  // optional bool allow_cloud_handwriting = 301 [default = false];
  if (has_allow_cloud_handwriting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(301, this->allow_cloud_handwriting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mozc.config.GeneralConfig general_config = 1;
    if (has_general_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->general_config());
    }

    // optional int32 verbose_level = 10 [default = 0];
    if (has_verbose_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verbose_level());
    }

    // optional bool DEPRECATED_log_all_commands = 11 [default = false];
    if (has_deprecated_log_all_commands()) {
      total_size += 1 + 1;
    }

    // optional bool incognito_mode = 20 [default = false];
    if (has_incognito_mode()) {
      total_size += 2 + 1;
    }

    // optional bool check_default = 22 [default = true];
    if (has_check_default()) {
      total_size += 2 + 1;
    }

    // optional bool presentation_mode = 23 [default = false];
    if (has_presentation_mode()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
    if (has_preedit_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_method());
    }

    // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
    if (has_session_keymap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_keymap());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes custom_keymap_table = 42;
    if (has_custom_keymap_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_keymap_table());
    }

    // optional bytes custom_roman_table = 43;
    if (has_custom_roman_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_roman_table());
    }

    // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
    if (has_punctuation_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->punctuation_method());
    }

    // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
    if (has_symbol_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->symbol_method());
    }

    // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
    if (has_space_character_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space_character_form());
    }

    // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
    if (has_use_keyboard_to_change_preedit_method()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
    if (has_history_learning_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->history_learning_level());
    }

    // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
    if (has_selection_shortcut()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_shortcut());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool use_auto_ime_turn_off = 56 [default = true];
    if (has_use_auto_ime_turn_off()) {
      total_size += 2 + 1;
    }

    // optional bool use_cascading_window = 58 [default = true];
    if (has_use_cascading_window()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
    if (has_shift_key_mode_switch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shift_key_mode_switch());
    }

    // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
    if (has_numpad_character_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->numpad_character_form());
    }

    // optional bool use_auto_conversion = 61 [default = false];
    if (has_use_auto_conversion()) {
      total_size += 2 + 1;
    }

    // optional uint32 auto_conversion_key = 62 [default = 13];
    if (has_auto_conversion_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_conversion_key());
    }

    // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
    if (has_yen_sign_character()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yen_sign_character());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool use_japanese_layout = 64 [default = false];
    if (has_use_japanese_layout()) {
      total_size += 2 + 1;
    }

    // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
    if (has_use_kana_modifier_insensitive_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_typing_correction = 66 [default = false];
    if (has_use_typing_correction()) {
      total_size += 2 + 1;
    }

    // optional bool use_date_conversion = 80 [default = true];
    if (has_use_date_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_single_kanji_conversion = 81 [default = true];
    if (has_use_single_kanji_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_symbol_conversion = 82 [default = true];
    if (has_use_symbol_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_number_conversion = 83 [default = true];
    if (has_use_number_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_emoticon_conversion = 84 [default = true];
    if (has_use_emoticon_conversion()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool use_calculator = 85 [default = true];
    if (has_use_calculator()) {
      total_size += 2 + 1;
    }

    // optional bool use_t13n_conversion = 86 [default = true];
    if (has_use_t13n_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_zip_code_conversion = 87 [default = true];
    if (has_use_zip_code_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_spelling_correction = 88 [default = true];
    if (has_use_spelling_correction()) {
      total_size += 2 + 1;
    }

    // optional bool use_emoji_conversion = 89 [default = false];
    if (has_use_emoji_conversion()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
    if (has_information_list_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->information_list_config());
    }

    // optional bool use_history_suggest = 100 [default = true];
    if (has_use_history_suggest()) {
      total_size += 2 + 1;
    }

    // optional bool use_dictionary_suggest = 101 [default = true];
    if (has_use_dictionary_suggest()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool use_realtime_conversion = 102 [default = true];
    if (has_use_realtime_conversion()) {
      total_size += 2 + 1;
    }

    // optional uint32 suggestions_size = 110 [default = 3];
    if (has_suggestions_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggestions_size());
    }

    // optional bool use_mode_indicator = 120 [default = true];
    if (has_use_mode_indicator()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.OBSOLETE_SyncConfig OBSOLETE_sync_config = 300;
    if (has_obsolete_sync_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_sync_config());
    }

    // optional bool allow_cloud_handwriting = 301 [default = false];
    if (has_allow_cloud_handwriting()) {
      total_size += 2 + 1;
    }

  }
  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  total_size += 2 * this->character_form_rules_size();
  for (int i = 0; i < this->character_form_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_form_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_form_rules_.MergeFrom(from.character_form_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_general_config()) {
      mutable_general_config()->::mozc::config::GeneralConfig::MergeFrom(from.general_config());
    }
    if (from.has_verbose_level()) {
      set_verbose_level(from.verbose_level());
    }
    if (from.has_deprecated_log_all_commands()) {
      set_deprecated_log_all_commands(from.deprecated_log_all_commands());
    }
    if (from.has_incognito_mode()) {
      set_incognito_mode(from.incognito_mode());
    }
    if (from.has_check_default()) {
      set_check_default(from.check_default());
    }
    if (from.has_presentation_mode()) {
      set_presentation_mode(from.presentation_mode());
    }
    if (from.has_preedit_method()) {
      set_preedit_method(from.preedit_method());
    }
    if (from.has_session_keymap()) {
      set_session_keymap(from.session_keymap());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_custom_keymap_table()) {
      set_custom_keymap_table(from.custom_keymap_table());
    }
    if (from.has_custom_roman_table()) {
      set_custom_roman_table(from.custom_roman_table());
    }
    if (from.has_punctuation_method()) {
      set_punctuation_method(from.punctuation_method());
    }
    if (from.has_symbol_method()) {
      set_symbol_method(from.symbol_method());
    }
    if (from.has_space_character_form()) {
      set_space_character_form(from.space_character_form());
    }
    if (from.has_use_keyboard_to_change_preedit_method()) {
      set_use_keyboard_to_change_preedit_method(from.use_keyboard_to_change_preedit_method());
    }
    if (from.has_history_learning_level()) {
      set_history_learning_level(from.history_learning_level());
    }
    if (from.has_selection_shortcut()) {
      set_selection_shortcut(from.selection_shortcut());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_use_auto_ime_turn_off()) {
      set_use_auto_ime_turn_off(from.use_auto_ime_turn_off());
    }
    if (from.has_use_cascading_window()) {
      set_use_cascading_window(from.use_cascading_window());
    }
    if (from.has_shift_key_mode_switch()) {
      set_shift_key_mode_switch(from.shift_key_mode_switch());
    }
    if (from.has_numpad_character_form()) {
      set_numpad_character_form(from.numpad_character_form());
    }
    if (from.has_use_auto_conversion()) {
      set_use_auto_conversion(from.use_auto_conversion());
    }
    if (from.has_auto_conversion_key()) {
      set_auto_conversion_key(from.auto_conversion_key());
    }
    if (from.has_yen_sign_character()) {
      set_yen_sign_character(from.yen_sign_character());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_use_japanese_layout()) {
      set_use_japanese_layout(from.use_japanese_layout());
    }
    if (from.has_use_kana_modifier_insensitive_conversion()) {
      set_use_kana_modifier_insensitive_conversion(from.use_kana_modifier_insensitive_conversion());
    }
    if (from.has_use_typing_correction()) {
      set_use_typing_correction(from.use_typing_correction());
    }
    if (from.has_use_date_conversion()) {
      set_use_date_conversion(from.use_date_conversion());
    }
    if (from.has_use_single_kanji_conversion()) {
      set_use_single_kanji_conversion(from.use_single_kanji_conversion());
    }
    if (from.has_use_symbol_conversion()) {
      set_use_symbol_conversion(from.use_symbol_conversion());
    }
    if (from.has_use_number_conversion()) {
      set_use_number_conversion(from.use_number_conversion());
    }
    if (from.has_use_emoticon_conversion()) {
      set_use_emoticon_conversion(from.use_emoticon_conversion());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_use_calculator()) {
      set_use_calculator(from.use_calculator());
    }
    if (from.has_use_t13n_conversion()) {
      set_use_t13n_conversion(from.use_t13n_conversion());
    }
    if (from.has_use_zip_code_conversion()) {
      set_use_zip_code_conversion(from.use_zip_code_conversion());
    }
    if (from.has_use_spelling_correction()) {
      set_use_spelling_correction(from.use_spelling_correction());
    }
    if (from.has_use_emoji_conversion()) {
      set_use_emoji_conversion(from.use_emoji_conversion());
    }
    if (from.has_information_list_config()) {
      mutable_information_list_config()->::mozc::config::Config_InformationListConfig::MergeFrom(from.information_list_config());
    }
    if (from.has_use_history_suggest()) {
      set_use_history_suggest(from.use_history_suggest());
    }
    if (from.has_use_dictionary_suggest()) {
      set_use_dictionary_suggest(from.use_dictionary_suggest());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_use_realtime_conversion()) {
      set_use_realtime_conversion(from.use_realtime_conversion());
    }
    if (from.has_suggestions_size()) {
      set_suggestions_size(from.suggestions_size());
    }
    if (from.has_use_mode_indicator()) {
      set_use_mode_indicator(from.use_mode_indicator());
    }
    if (from.has_obsolete_sync_config()) {
      mutable_obsolete_sync_config()->::mozc::config::OBSOLETE_SyncConfig::MergeFrom(from.obsolete_sync_config());
    }
    if (from.has_allow_cloud_handwriting()) {
      set_allow_cloud_handwriting(from.allow_cloud_handwriting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(general_config_, other->general_config_);
    std::swap(verbose_level_, other->verbose_level_);
    std::swap(deprecated_log_all_commands_, other->deprecated_log_all_commands_);
    std::swap(incognito_mode_, other->incognito_mode_);
    std::swap(check_default_, other->check_default_);
    std::swap(presentation_mode_, other->presentation_mode_);
    std::swap(preedit_method_, other->preedit_method_);
    std::swap(session_keymap_, other->session_keymap_);
    std::swap(custom_keymap_table_, other->custom_keymap_table_);
    std::swap(custom_roman_table_, other->custom_roman_table_);
    std::swap(punctuation_method_, other->punctuation_method_);
    std::swap(symbol_method_, other->symbol_method_);
    std::swap(space_character_form_, other->space_character_form_);
    std::swap(use_keyboard_to_change_preedit_method_, other->use_keyboard_to_change_preedit_method_);
    std::swap(history_learning_level_, other->history_learning_level_);
    std::swap(selection_shortcut_, other->selection_shortcut_);
    character_form_rules_.Swap(&other->character_form_rules_);
    std::swap(use_auto_ime_turn_off_, other->use_auto_ime_turn_off_);
    std::swap(use_cascading_window_, other->use_cascading_window_);
    std::swap(shift_key_mode_switch_, other->shift_key_mode_switch_);
    std::swap(numpad_character_form_, other->numpad_character_form_);
    std::swap(use_auto_conversion_, other->use_auto_conversion_);
    std::swap(auto_conversion_key_, other->auto_conversion_key_);
    std::swap(yen_sign_character_, other->yen_sign_character_);
    std::swap(use_japanese_layout_, other->use_japanese_layout_);
    std::swap(use_kana_modifier_insensitive_conversion_, other->use_kana_modifier_insensitive_conversion_);
    std::swap(use_typing_correction_, other->use_typing_correction_);
    std::swap(use_date_conversion_, other->use_date_conversion_);
    std::swap(use_single_kanji_conversion_, other->use_single_kanji_conversion_);
    std::swap(use_symbol_conversion_, other->use_symbol_conversion_);
    std::swap(use_number_conversion_, other->use_number_conversion_);
    std::swap(use_emoticon_conversion_, other->use_emoticon_conversion_);
    std::swap(use_calculator_, other->use_calculator_);
    std::swap(use_t13n_conversion_, other->use_t13n_conversion_);
    std::swap(use_zip_code_conversion_, other->use_zip_code_conversion_);
    std::swap(use_spelling_correction_, other->use_spelling_correction_);
    std::swap(use_emoji_conversion_, other->use_emoji_conversion_);
    std::swap(information_list_config_, other->information_list_config_);
    std::swap(use_history_suggest_, other->use_history_suggest_);
    std::swap(use_dictionary_suggest_, other->use_dictionary_suggest_);
    std::swap(use_realtime_conversion_, other->use_realtime_conversion_);
    std::swap(suggestions_size_, other->suggestions_size_);
    std::swap(use_mode_indicator_, other->use_mode_indicator_);
    std::swap(obsolete_sync_config_, other->obsolete_sync_config_);
    std::swap(allow_cloud_handwriting_, other->allow_cloud_handwriting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
