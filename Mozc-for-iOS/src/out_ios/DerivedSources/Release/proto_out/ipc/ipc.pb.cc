// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc/ipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc/ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace ipc {

namespace {

const ::google::protobuf::Descriptor* IPCPathInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCPathInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_2fipc_2eproto() {
  protobuf_AddDesc_ipc_2fipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc/ipc.proto");
  GOOGLE_CHECK(file != NULL);
  IPCPathInfo_descriptor_ = file->message_type(0);
  static const int IPCPathInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, product_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, thread_id_),
  };
  IPCPathInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPCPathInfo_descriptor_,
      IPCPathInfo::default_instance_,
      IPCPathInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPCPathInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_2fipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPCPathInfo_descriptor_, &IPCPathInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_2fipc_2eproto() {
  delete IPCPathInfo::default_instance_;
  delete IPCPathInfo_reflection_;
  delete IPCPathInfo::_default_product_version_;
}

void protobuf_AddDesc_ipc_2fipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ripc/ipc.proto\022\010mozc.ipc\"\206\001\n\013IPCPathInf"
    "o\022\033\n\020protocol_version\030\004 \001(\r:\0010\022 \n\017produc"
    "t_version\030\005 \001(\t:\0070.0.0.0\022\013\n\003key\030\001 \001(\t\022\025\n"
    "\nprocess_id\030\002 \001(\r:\0010\022\024\n\tthread_id\030\003 \001(\r:"
    "\0010", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc/ipc.proto", &protobuf_RegisterTypes);
  IPCPathInfo::_default_product_version_ =
      new ::std::string("0.0.0.0", 7);
  IPCPathInfo::default_instance_ = new IPCPathInfo();
  IPCPathInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_2fipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_2fipc_2eproto {
  StaticDescriptorInitializer_ipc_2fipc_2eproto() {
    protobuf_AddDesc_ipc_2fipc_2eproto();
  }
} static_descriptor_initializer_ipc_2fipc_2eproto_;

// ===================================================================

::std::string* IPCPathInfo::_default_product_version_ = NULL;
#ifndef _MSC_VER
const int IPCPathInfo::kProtocolVersionFieldNumber;
const int IPCPathInfo::kProductVersionFieldNumber;
const int IPCPathInfo::kKeyFieldNumber;
const int IPCPathInfo::kProcessIdFieldNumber;
const int IPCPathInfo::kThreadIdFieldNumber;
#endif  // !_MSC_VER

IPCPathInfo::IPCPathInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPCPathInfo::InitAsDefaultInstance() {
}

IPCPathInfo::IPCPathInfo(const IPCPathInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPCPathInfo::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  product_version_ = const_cast< ::std::string*>(_default_product_version_);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_id_ = 0u;
  thread_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCPathInfo::~IPCPathInfo() {
  SharedDtor();
}

void IPCPathInfo::SharedDtor() {
  if (product_version_ != _default_product_version_) {
    delete product_version_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void IPCPathInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCPathInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCPathInfo_descriptor_;
}

const IPCPathInfo& IPCPathInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2fipc_2eproto();
  return *default_instance_;
}

IPCPathInfo* IPCPathInfo::default_instance_ = NULL;

IPCPathInfo* IPCPathInfo::New() const {
  return new IPCPathInfo;
}

void IPCPathInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
    if (has_product_version()) {
      if (product_version_ != _default_product_version_) {
        product_version_->assign(*_default_product_version_);
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    process_id_ = 0u;
    thread_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPCPathInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_id;
        break;
      }

      // optional uint32 process_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_thread_id;
        break;
      }

      // optional uint32 thread_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_product_version;
        break;
      }

      // optional string product_version = 5 [default = "0.0.0.0"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_version().data(), this->product_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPCPathInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process_id(), output);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thread_id(), output);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (has_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_version().data(), this->product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->product_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPCPathInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process_id(), target);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thread_id(), target);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (has_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_version().data(), this->product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->product_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPCPathInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 4 [default = 0];
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional string product_version = 5 [default = "0.0.0.0"];
    if (has_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 process_id = 2 [default = 0];
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 3 [default = 0];
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCPathInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPCPathInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPCPathInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPCPathInfo::MergeFrom(const IPCPathInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_product_version()) {
      set_product_version(from.product_version());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPCPathInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCPathInfo::CopyFrom(const IPCPathInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCPathInfo::IsInitialized() const {

  return true;
}

void IPCPathInfo::Swap(IPCPathInfo* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(product_version_, other->product_version_);
    std::swap(key_, other->key_);
    std::swap(process_id_, other->process_id_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPCPathInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCPathInfo_descriptor_;
  metadata.reflection = IPCPathInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
