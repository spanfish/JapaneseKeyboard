// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: renderer/renderer_style.proto

#ifndef PROTOBUF_renderer_2frenderer_5fstyle_2eproto__INCLUDED
#define PROTOBUF_renderer_2frenderer_5fstyle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace renderer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_renderer_2frenderer_5fstyle_2eproto();
void protobuf_AssignDesc_renderer_2frenderer_5fstyle_2eproto();
void protobuf_ShutdownFile_renderer_2frenderer_5fstyle_2eproto();

class RendererStyle;
class RendererStyle_RGBAColor;
class RendererStyle_TextStyle;
class RendererStyle_InfolistStyle;

// ===================================================================

class RendererStyle_RGBAColor : public ::google::protobuf::Message {
 public:
  RendererStyle_RGBAColor();
  virtual ~RendererStyle_RGBAColor();

  RendererStyle_RGBAColor(const RendererStyle_RGBAColor& from);

  inline RendererStyle_RGBAColor& operator=(const RendererStyle_RGBAColor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle_RGBAColor& default_instance();

  void Swap(RendererStyle_RGBAColor* other);

  // implements Message ----------------------------------------------

  RendererStyle_RGBAColor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RendererStyle_RGBAColor& from);
  void MergeFrom(const RendererStyle_RGBAColor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double r = 1 [default = 0];
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline double r() const;
  inline void set_r(double value);

  // required double g = 2 [default = 0];
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline double g() const;
  inline void set_g(double value);

  // required double b = 3 [default = 0];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline double b() const;
  inline void set_b(double value);

  // optional double a = 4 [default = 1];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline double a() const;
  inline void set_a(double value);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle.RGBAColor)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double r_;
  double g_;
  double b_;
  double a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_AssignDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_ShutdownFile_renderer_2frenderer_5fstyle_2eproto();

  void InitAsDefaultInstance();
  static RendererStyle_RGBAColor* default_instance_;
};
// -------------------------------------------------------------------

class RendererStyle_TextStyle : public ::google::protobuf::Message {
 public:
  RendererStyle_TextStyle();
  virtual ~RendererStyle_TextStyle();

  RendererStyle_TextStyle(const RendererStyle_TextStyle& from);

  inline RendererStyle_TextStyle& operator=(const RendererStyle_TextStyle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle_TextStyle& default_instance();

  void Swap(RendererStyle_TextStyle* other);

  // implements Message ----------------------------------------------

  RendererStyle_TextStyle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RendererStyle_TextStyle& from);
  void MergeFrom(const RendererStyle_TextStyle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double font_size = 1;
  inline bool has_font_size() const;
  inline void clear_font_size();
  static const int kFontSizeFieldNumber = 1;
  inline double font_size() const;
  inline void set_font_size(double value);

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  inline bool has_foreground_color() const;
  inline void clear_foreground_color();
  static const int kForegroundColorFieldNumber = 2;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& foreground_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_foreground_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_foreground_color();
  inline void set_allocated_foreground_color(::mozc::renderer::RendererStyle_RGBAColor* foreground_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  inline bool has_background_color() const;
  inline void clear_background_color();
  static const int kBackgroundColorFieldNumber = 3;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& background_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_background_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_background_color();
  inline void set_allocated_background_color(::mozc::renderer::RendererStyle_RGBAColor* background_color);

  // optional int32 left_padding = 4 [default = 0];
  inline bool has_left_padding() const;
  inline void clear_left_padding();
  static const int kLeftPaddingFieldNumber = 4;
  inline ::google::protobuf::int32 left_padding() const;
  inline void set_left_padding(::google::protobuf::int32 value);

  // optional int32 right_padding = 5 [default = 0];
  inline bool has_right_padding() const;
  inline void clear_right_padding();
  static const int kRightPaddingFieldNumber = 5;
  inline ::google::protobuf::int32 right_padding() const;
  inline void set_right_padding(::google::protobuf::int32 value);

  // optional string font_name = 6;
  inline bool has_font_name() const;
  inline void clear_font_name();
  static const int kFontNameFieldNumber = 6;
  inline const ::std::string& font_name() const;
  inline void set_font_name(const ::std::string& value);
  inline void set_font_name(const char* value);
  inline void set_font_name(const char* value, size_t size);
  inline ::std::string* mutable_font_name();
  inline ::std::string* release_font_name();
  inline void set_allocated_font_name(::std::string* font_name);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle.TextStyle)
 private:
  inline void set_has_font_size();
  inline void clear_has_font_size();
  inline void set_has_foreground_color();
  inline void clear_has_foreground_color();
  inline void set_has_background_color();
  inline void clear_has_background_color();
  inline void set_has_left_padding();
  inline void clear_has_left_padding();
  inline void set_has_right_padding();
  inline void clear_has_right_padding();
  inline void set_has_font_name();
  inline void clear_has_font_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double font_size_;
  ::mozc::renderer::RendererStyle_RGBAColor* foreground_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* background_color_;
  ::google::protobuf::int32 left_padding_;
  ::google::protobuf::int32 right_padding_;
  ::std::string* font_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_AssignDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_ShutdownFile_renderer_2frenderer_5fstyle_2eproto();

  void InitAsDefaultInstance();
  static RendererStyle_TextStyle* default_instance_;
};
// -------------------------------------------------------------------

class RendererStyle_InfolistStyle : public ::google::protobuf::Message {
 public:
  RendererStyle_InfolistStyle();
  virtual ~RendererStyle_InfolistStyle();

  RendererStyle_InfolistStyle(const RendererStyle_InfolistStyle& from);

  inline RendererStyle_InfolistStyle& operator=(const RendererStyle_InfolistStyle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle_InfolistStyle& default_instance();

  void Swap(RendererStyle_InfolistStyle* other);

  // implements Message ----------------------------------------------

  RendererStyle_InfolistStyle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RendererStyle_InfolistStyle& from);
  void MergeFrom(const RendererStyle_InfolistStyle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string caption_string = 1;
  inline bool has_caption_string() const;
  inline void clear_caption_string();
  static const int kCaptionStringFieldNumber = 1;
  inline const ::std::string& caption_string() const;
  inline void set_caption_string(const ::std::string& value);
  inline void set_caption_string(const char* value);
  inline void set_caption_string(const char* value, size_t size);
  inline ::std::string* mutable_caption_string();
  inline ::std::string* release_caption_string();
  inline void set_allocated_caption_string(::std::string* caption_string);

  // optional int32 caption_height = 2;
  inline bool has_caption_height() const;
  inline void clear_caption_height();
  static const int kCaptionHeightFieldNumber = 2;
  inline ::google::protobuf::int32 caption_height() const;
  inline void set_caption_height(::google::protobuf::int32 value);

  // optional int32 caption_padding = 3;
  inline bool has_caption_padding() const;
  inline void clear_caption_padding();
  static const int kCaptionPaddingFieldNumber = 3;
  inline ::google::protobuf::int32 caption_padding() const;
  inline void set_caption_padding(::google::protobuf::int32 value);

  // optional int32 window_border = 4;
  inline bool has_window_border() const;
  inline void clear_window_border();
  static const int kWindowBorderFieldNumber = 4;
  inline ::google::protobuf::int32 window_border() const;
  inline void set_window_border(::google::protobuf::int32 value);

  // optional int32 row_rect_padding = 5;
  inline bool has_row_rect_padding() const;
  inline void clear_row_rect_padding();
  static const int kRowRectPaddingFieldNumber = 5;
  inline ::google::protobuf::int32 row_rect_padding() const;
  inline void set_row_rect_padding(::google::protobuf::int32 value);

  // optional int32 window_width = 6;
  inline bool has_window_width() const;
  inline void clear_window_width();
  static const int kWindowWidthFieldNumber = 6;
  inline ::google::protobuf::int32 window_width() const;
  inline void set_window_width(::google::protobuf::int32 value);

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  inline bool has_caption_style() const;
  inline void clear_caption_style();
  static const int kCaptionStyleFieldNumber = 7;
  inline const ::mozc::renderer::RendererStyle_TextStyle& caption_style() const;
  inline ::mozc::renderer::RendererStyle_TextStyle* mutable_caption_style();
  inline ::mozc::renderer::RendererStyle_TextStyle* release_caption_style();
  inline void set_allocated_caption_style(::mozc::renderer::RendererStyle_TextStyle* caption_style);

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  inline bool has_title_style() const;
  inline void clear_title_style();
  static const int kTitleStyleFieldNumber = 8;
  inline const ::mozc::renderer::RendererStyle_TextStyle& title_style() const;
  inline ::mozc::renderer::RendererStyle_TextStyle* mutable_title_style();
  inline ::mozc::renderer::RendererStyle_TextStyle* release_title_style();
  inline void set_allocated_title_style(::mozc::renderer::RendererStyle_TextStyle* title_style);

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  inline bool has_description_style() const;
  inline void clear_description_style();
  static const int kDescriptionStyleFieldNumber = 9;
  inline const ::mozc::renderer::RendererStyle_TextStyle& description_style() const;
  inline ::mozc::renderer::RendererStyle_TextStyle* mutable_description_style();
  inline ::mozc::renderer::RendererStyle_TextStyle* release_description_style();
  inline void set_allocated_description_style(::mozc::renderer::RendererStyle_TextStyle* description_style);

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  inline bool has_border_color() const;
  inline void clear_border_color();
  static const int kBorderColorFieldNumber = 10;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& border_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_border_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_border_color();
  inline void set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  inline bool has_caption_background_color() const;
  inline void clear_caption_background_color();
  static const int kCaptionBackgroundColorFieldNumber = 11;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& caption_background_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_caption_background_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_caption_background_color();
  inline void set_allocated_caption_background_color(::mozc::renderer::RendererStyle_RGBAColor* caption_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  inline bool has_focused_background_color() const;
  inline void clear_focused_background_color();
  static const int kFocusedBackgroundColorFieldNumber = 12;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& focused_background_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_background_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_focused_background_color();
  inline void set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  inline bool has_focused_border_color() const;
  inline void clear_focused_border_color();
  static const int kFocusedBorderColorFieldNumber = 13;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& focused_border_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_border_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_focused_border_color();
  inline void set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle.InfolistStyle)
 private:
  inline void set_has_caption_string();
  inline void clear_has_caption_string();
  inline void set_has_caption_height();
  inline void clear_has_caption_height();
  inline void set_has_caption_padding();
  inline void clear_has_caption_padding();
  inline void set_has_window_border();
  inline void clear_has_window_border();
  inline void set_has_row_rect_padding();
  inline void clear_has_row_rect_padding();
  inline void set_has_window_width();
  inline void clear_has_window_width();
  inline void set_has_caption_style();
  inline void clear_has_caption_style();
  inline void set_has_title_style();
  inline void clear_has_title_style();
  inline void set_has_description_style();
  inline void clear_has_description_style();
  inline void set_has_border_color();
  inline void clear_has_border_color();
  inline void set_has_caption_background_color();
  inline void clear_has_caption_background_color();
  inline void set_has_focused_background_color();
  inline void clear_has_focused_background_color();
  inline void set_has_focused_border_color();
  inline void clear_has_focused_border_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* caption_string_;
  ::google::protobuf::int32 caption_height_;
  ::google::protobuf::int32 caption_padding_;
  ::google::protobuf::int32 window_border_;
  ::google::protobuf::int32 row_rect_padding_;
  ::mozc::renderer::RendererStyle_TextStyle* caption_style_;
  ::mozc::renderer::RendererStyle_TextStyle* title_style_;
  ::mozc::renderer::RendererStyle_TextStyle* description_style_;
  ::mozc::renderer::RendererStyle_RGBAColor* border_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* caption_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_border_color_;
  ::google::protobuf::int32 window_width_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_AssignDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_ShutdownFile_renderer_2frenderer_5fstyle_2eproto();

  void InitAsDefaultInstance();
  static RendererStyle_InfolistStyle* default_instance_;
};
// -------------------------------------------------------------------

class RendererStyle : public ::google::protobuf::Message {
 public:
  RendererStyle();
  virtual ~RendererStyle();

  RendererStyle(const RendererStyle& from);

  inline RendererStyle& operator=(const RendererStyle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle& default_instance();

  void Swap(RendererStyle* other);

  // implements Message ----------------------------------------------

  RendererStyle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RendererStyle& from);
  void MergeFrom(const RendererStyle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RendererStyle_RGBAColor RGBAColor;
  typedef RendererStyle_TextStyle TextStyle;
  typedef RendererStyle_InfolistStyle InfolistStyle;

  // accessors -------------------------------------------------------

  // optional int32 window_border = 1;
  inline bool has_window_border() const;
  inline void clear_window_border();
  static const int kWindowBorderFieldNumber = 1;
  inline ::google::protobuf::int32 window_border() const;
  inline void set_window_border(::google::protobuf::int32 value);

  // optional int32 footer_height = 2;
  inline bool has_footer_height() const;
  inline void clear_footer_height();
  static const int kFooterHeightFieldNumber = 2;
  inline ::google::protobuf::int32 footer_height() const;
  inline void set_footer_height(::google::protobuf::int32 value);

  // optional int32 row_rect_padding = 3;
  inline bool has_row_rect_padding() const;
  inline void clear_row_rect_padding();
  static const int kRowRectPaddingFieldNumber = 3;
  inline ::google::protobuf::int32 row_rect_padding() const;
  inline void set_row_rect_padding(::google::protobuf::int32 value);

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  inline bool has_border_color() const;
  inline void clear_border_color();
  static const int kBorderColorFieldNumber = 4;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& border_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_border_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_border_color();
  inline void set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color);

  // optional string column_minimum_width_string = 5;
  inline bool has_column_minimum_width_string() const;
  inline void clear_column_minimum_width_string();
  static const int kColumnMinimumWidthStringFieldNumber = 5;
  inline const ::std::string& column_minimum_width_string() const;
  inline void set_column_minimum_width_string(const ::std::string& value);
  inline void set_column_minimum_width_string(const char* value);
  inline void set_column_minimum_width_string(const char* value, size_t size);
  inline ::std::string* mutable_column_minimum_width_string();
  inline ::std::string* release_column_minimum_width_string();
  inline void set_allocated_column_minimum_width_string(::std::string* column_minimum_width_string);

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  inline int text_styles_size() const;
  inline void clear_text_styles();
  static const int kTextStylesFieldNumber = 6;
  inline const ::mozc::renderer::RendererStyle_TextStyle& text_styles(int index) const;
  inline ::mozc::renderer::RendererStyle_TextStyle* mutable_text_styles(int index);
  inline ::mozc::renderer::RendererStyle_TextStyle* add_text_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >&
      text_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >*
      mutable_text_styles();

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  inline int footer_border_colors_size() const;
  inline void clear_footer_border_colors();
  static const int kFooterBorderColorsFieldNumber = 7;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& footer_border_colors(int index) const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_footer_border_colors(int index);
  inline ::mozc::renderer::RendererStyle_RGBAColor* add_footer_border_colors();
  inline const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >&
      footer_border_colors() const;
  inline ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >*
      mutable_footer_border_colors();

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  inline bool has_footer_style() const;
  inline void clear_footer_style();
  static const int kFooterStyleFieldNumber = 8;
  inline const ::mozc::renderer::RendererStyle_TextStyle& footer_style() const;
  inline ::mozc::renderer::RendererStyle_TextStyle* mutable_footer_style();
  inline ::mozc::renderer::RendererStyle_TextStyle* release_footer_style();
  inline void set_allocated_footer_style(::mozc::renderer::RendererStyle_TextStyle* footer_style);

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  inline bool has_footer_sub_label_style() const;
  inline void clear_footer_sub_label_style();
  static const int kFooterSubLabelStyleFieldNumber = 9;
  inline const ::mozc::renderer::RendererStyle_TextStyle& footer_sub_label_style() const;
  inline ::mozc::renderer::RendererStyle_TextStyle* mutable_footer_sub_label_style();
  inline ::mozc::renderer::RendererStyle_TextStyle* release_footer_sub_label_style();
  inline void set_allocated_footer_sub_label_style(::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  inline bool has_focused_background_color() const;
  inline void clear_focused_background_color();
  static const int kFocusedBackgroundColorFieldNumber = 10;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& focused_background_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_background_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_focused_background_color();
  inline void set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  inline bool has_focused_border_color() const;
  inline void clear_focused_border_color();
  static const int kFocusedBorderColorFieldNumber = 11;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& focused_border_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_border_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_focused_border_color();
  inline void set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  inline bool has_scrollbar_background_color() const;
  inline void clear_scrollbar_background_color();
  static const int kScrollbarBackgroundColorFieldNumber = 12;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& scrollbar_background_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_scrollbar_background_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_scrollbar_background_color();
  inline void set_allocated_scrollbar_background_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  inline bool has_scrollbar_indicator_color() const;
  inline void clear_scrollbar_indicator_color();
  static const int kScrollbarIndicatorColorFieldNumber = 13;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& scrollbar_indicator_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_scrollbar_indicator_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_scrollbar_indicator_color();
  inline void set_allocated_scrollbar_indicator_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color);

  // optional int32 scrollbar_width = 14;
  inline bool has_scrollbar_width() const;
  inline void clear_scrollbar_width();
  static const int kScrollbarWidthFieldNumber = 14;
  inline ::google::protobuf::int32 scrollbar_width() const;
  inline void set_scrollbar_width(::google::protobuf::int32 value);

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  inline bool has_footer_top_color() const;
  inline void clear_footer_top_color();
  static const int kFooterTopColorFieldNumber = 15;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& footer_top_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_footer_top_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_footer_top_color();
  inline void set_allocated_footer_top_color(::mozc::renderer::RendererStyle_RGBAColor* footer_top_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  inline bool has_footer_bottom_color() const;
  inline void clear_footer_bottom_color();
  static const int kFooterBottomColorFieldNumber = 16;
  inline const ::mozc::renderer::RendererStyle_RGBAColor& footer_bottom_color() const;
  inline ::mozc::renderer::RendererStyle_RGBAColor* mutable_footer_bottom_color();
  inline ::mozc::renderer::RendererStyle_RGBAColor* release_footer_bottom_color();
  inline void set_allocated_footer_bottom_color(::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color);

  // optional string logo_file_name = 17;
  inline bool has_logo_file_name() const;
  inline void clear_logo_file_name();
  static const int kLogoFileNameFieldNumber = 17;
  inline const ::std::string& logo_file_name() const;
  inline void set_logo_file_name(const ::std::string& value);
  inline void set_logo_file_name(const char* value);
  inline void set_logo_file_name(const char* value, size_t size);
  inline ::std::string* mutable_logo_file_name();
  inline ::std::string* release_logo_file_name();
  inline void set_allocated_logo_file_name(::std::string* logo_file_name);

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  inline bool has_infolist_style() const;
  inline void clear_infolist_style();
  static const int kInfolistStyleFieldNumber = 18;
  inline const ::mozc::renderer::RendererStyle_InfolistStyle& infolist_style() const;
  inline ::mozc::renderer::RendererStyle_InfolistStyle* mutable_infolist_style();
  inline ::mozc::renderer::RendererStyle_InfolistStyle* release_infolist_style();
  inline void set_allocated_infolist_style(::mozc::renderer::RendererStyle_InfolistStyle* infolist_style);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle)
 private:
  inline void set_has_window_border();
  inline void clear_has_window_border();
  inline void set_has_footer_height();
  inline void clear_has_footer_height();
  inline void set_has_row_rect_padding();
  inline void clear_has_row_rect_padding();
  inline void set_has_border_color();
  inline void clear_has_border_color();
  inline void set_has_column_minimum_width_string();
  inline void clear_has_column_minimum_width_string();
  inline void set_has_footer_style();
  inline void clear_has_footer_style();
  inline void set_has_footer_sub_label_style();
  inline void clear_has_footer_sub_label_style();
  inline void set_has_focused_background_color();
  inline void clear_has_focused_background_color();
  inline void set_has_focused_border_color();
  inline void clear_has_focused_border_color();
  inline void set_has_scrollbar_background_color();
  inline void clear_has_scrollbar_background_color();
  inline void set_has_scrollbar_indicator_color();
  inline void clear_has_scrollbar_indicator_color();
  inline void set_has_scrollbar_width();
  inline void clear_has_scrollbar_width();
  inline void set_has_footer_top_color();
  inline void clear_has_footer_top_color();
  inline void set_has_footer_bottom_color();
  inline void clear_has_footer_bottom_color();
  inline void set_has_logo_file_name();
  inline void clear_has_logo_file_name();
  inline void set_has_infolist_style();
  inline void clear_has_infolist_style();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 window_border_;
  ::google::protobuf::int32 footer_height_;
  ::mozc::renderer::RendererStyle_RGBAColor* border_color_;
  ::std::string* column_minimum_width_string_;
  ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle > text_styles_;
  ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor > footer_border_colors_;
  ::mozc::renderer::RendererStyle_TextStyle* footer_style_;
  ::google::protobuf::int32 row_rect_padding_;
  ::google::protobuf::int32 scrollbar_width_;
  ::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_border_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* footer_top_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color_;
  ::std::string* logo_file_name_;
  ::mozc::renderer::RendererStyle_InfolistStyle* infolist_style_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_AssignDesc_renderer_2frenderer_5fstyle_2eproto();
  friend void protobuf_ShutdownFile_renderer_2frenderer_5fstyle_2eproto();

  void InitAsDefaultInstance();
  static RendererStyle* default_instance_;
};
// ===================================================================


// ===================================================================

// RendererStyle_RGBAColor

// required double r = 1 [default = 0];
inline bool RendererStyle_RGBAColor::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle_RGBAColor::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle_RGBAColor::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline double RendererStyle_RGBAColor::r() const {
  return r_;
}
inline void RendererStyle_RGBAColor::set_r(double value) {
  set_has_r();
  r_ = value;
}

// required double g = 2 [default = 0];
inline bool RendererStyle_RGBAColor::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle_RGBAColor::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle_RGBAColor::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline double RendererStyle_RGBAColor::g() const {
  return g_;
}
inline void RendererStyle_RGBAColor::set_g(double value) {
  set_has_g();
  g_ = value;
}

// required double b = 3 [default = 0];
inline bool RendererStyle_RGBAColor::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle_RGBAColor::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle_RGBAColor::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double RendererStyle_RGBAColor::b() const {
  return b_;
}
inline void RendererStyle_RGBAColor::set_b(double value) {
  set_has_b();
  b_ = value;
}

// optional double a = 4 [default = 1];
inline bool RendererStyle_RGBAColor::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle_RGBAColor::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle_RGBAColor::clear_a() {
  a_ = 1;
  clear_has_a();
}
inline double RendererStyle_RGBAColor::a() const {
  return a_;
}
inline void RendererStyle_RGBAColor::set_a(double value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// RendererStyle_TextStyle

// optional double font_size = 1;
inline bool RendererStyle_TextStyle::has_font_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle_TextStyle::set_has_font_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle_TextStyle::clear_has_font_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle_TextStyle::clear_font_size() {
  font_size_ = 0;
  clear_has_font_size();
}
inline double RendererStyle_TextStyle::font_size() const {
  return font_size_;
}
inline void RendererStyle_TextStyle::set_font_size(double value) {
  set_has_font_size();
  font_size_ = value;
}

// optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
inline bool RendererStyle_TextStyle::has_foreground_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle_TextStyle::set_has_foreground_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle_TextStyle::clear_has_foreground_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle_TextStyle::clear_foreground_color() {
  if (foreground_color_ != NULL) foreground_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_foreground_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::foreground_color() const {
  return foreground_color_ != NULL ? *foreground_color_ : *default_instance_->foreground_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::mutable_foreground_color() {
  set_has_foreground_color();
  if (foreground_color_ == NULL) foreground_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return foreground_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::release_foreground_color() {
  clear_has_foreground_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = foreground_color_;
  foreground_color_ = NULL;
  return temp;
}
inline void RendererStyle_TextStyle::set_allocated_foreground_color(::mozc::renderer::RendererStyle_RGBAColor* foreground_color) {
  delete foreground_color_;
  foreground_color_ = foreground_color;
  if (foreground_color) {
    set_has_foreground_color();
  } else {
    clear_has_foreground_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
inline bool RendererStyle_TextStyle::has_background_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle_TextStyle::set_has_background_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle_TextStyle::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle_TextStyle::clear_background_color() {
  if (background_color_ != NULL) background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::background_color() const {
  return background_color_ != NULL ? *background_color_ : *default_instance_->background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::mutable_background_color() {
  set_has_background_color();
  if (background_color_ == NULL) background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::release_background_color() {
  clear_has_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = background_color_;
  background_color_ = NULL;
  return temp;
}
inline void RendererStyle_TextStyle::set_allocated_background_color(::mozc::renderer::RendererStyle_RGBAColor* background_color) {
  delete background_color_;
  background_color_ = background_color;
  if (background_color) {
    set_has_background_color();
  } else {
    clear_has_background_color();
  }
}

// optional int32 left_padding = 4 [default = 0];
inline bool RendererStyle_TextStyle::has_left_padding() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle_TextStyle::set_has_left_padding() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle_TextStyle::clear_has_left_padding() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle_TextStyle::clear_left_padding() {
  left_padding_ = 0;
  clear_has_left_padding();
}
inline ::google::protobuf::int32 RendererStyle_TextStyle::left_padding() const {
  return left_padding_;
}
inline void RendererStyle_TextStyle::set_left_padding(::google::protobuf::int32 value) {
  set_has_left_padding();
  left_padding_ = value;
}

// optional int32 right_padding = 5 [default = 0];
inline bool RendererStyle_TextStyle::has_right_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererStyle_TextStyle::set_has_right_padding() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererStyle_TextStyle::clear_has_right_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererStyle_TextStyle::clear_right_padding() {
  right_padding_ = 0;
  clear_has_right_padding();
}
inline ::google::protobuf::int32 RendererStyle_TextStyle::right_padding() const {
  return right_padding_;
}
inline void RendererStyle_TextStyle::set_right_padding(::google::protobuf::int32 value) {
  set_has_right_padding();
  right_padding_ = value;
}

// optional string font_name = 6;
inline bool RendererStyle_TextStyle::has_font_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RendererStyle_TextStyle::set_has_font_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RendererStyle_TextStyle::clear_has_font_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RendererStyle_TextStyle::clear_font_name() {
  if (font_name_ != &::google::protobuf::internal::kEmptyString) {
    font_name_->clear();
  }
  clear_has_font_name();
}
inline const ::std::string& RendererStyle_TextStyle::font_name() const {
  return *font_name_;
}
inline void RendererStyle_TextStyle::set_font_name(const ::std::string& value) {
  set_has_font_name();
  if (font_name_ == &::google::protobuf::internal::kEmptyString) {
    font_name_ = new ::std::string;
  }
  font_name_->assign(value);
}
inline void RendererStyle_TextStyle::set_font_name(const char* value) {
  set_has_font_name();
  if (font_name_ == &::google::protobuf::internal::kEmptyString) {
    font_name_ = new ::std::string;
  }
  font_name_->assign(value);
}
inline void RendererStyle_TextStyle::set_font_name(const char* value, size_t size) {
  set_has_font_name();
  if (font_name_ == &::google::protobuf::internal::kEmptyString) {
    font_name_ = new ::std::string;
  }
  font_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RendererStyle_TextStyle::mutable_font_name() {
  set_has_font_name();
  if (font_name_ == &::google::protobuf::internal::kEmptyString) {
    font_name_ = new ::std::string;
  }
  return font_name_;
}
inline ::std::string* RendererStyle_TextStyle::release_font_name() {
  clear_has_font_name();
  if (font_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = font_name_;
    font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RendererStyle_TextStyle::set_allocated_font_name(::std::string* font_name) {
  if (font_name_ != &::google::protobuf::internal::kEmptyString) {
    delete font_name_;
  }
  if (font_name) {
    set_has_font_name();
    font_name_ = font_name;
  } else {
    clear_has_font_name();
    font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RendererStyle_InfolistStyle

// optional string caption_string = 1;
inline bool RendererStyle_InfolistStyle::has_caption_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle_InfolistStyle::clear_caption_string() {
  if (caption_string_ != &::google::protobuf::internal::kEmptyString) {
    caption_string_->clear();
  }
  clear_has_caption_string();
}
inline const ::std::string& RendererStyle_InfolistStyle::caption_string() const {
  return *caption_string_;
}
inline void RendererStyle_InfolistStyle::set_caption_string(const ::std::string& value) {
  set_has_caption_string();
  if (caption_string_ == &::google::protobuf::internal::kEmptyString) {
    caption_string_ = new ::std::string;
  }
  caption_string_->assign(value);
}
inline void RendererStyle_InfolistStyle::set_caption_string(const char* value) {
  set_has_caption_string();
  if (caption_string_ == &::google::protobuf::internal::kEmptyString) {
    caption_string_ = new ::std::string;
  }
  caption_string_->assign(value);
}
inline void RendererStyle_InfolistStyle::set_caption_string(const char* value, size_t size) {
  set_has_caption_string();
  if (caption_string_ == &::google::protobuf::internal::kEmptyString) {
    caption_string_ = new ::std::string;
  }
  caption_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RendererStyle_InfolistStyle::mutable_caption_string() {
  set_has_caption_string();
  if (caption_string_ == &::google::protobuf::internal::kEmptyString) {
    caption_string_ = new ::std::string;
  }
  return caption_string_;
}
inline ::std::string* RendererStyle_InfolistStyle::release_caption_string() {
  clear_has_caption_string();
  if (caption_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caption_string_;
    caption_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RendererStyle_InfolistStyle::set_allocated_caption_string(::std::string* caption_string) {
  if (caption_string_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_string_;
  }
  if (caption_string) {
    set_has_caption_string();
    caption_string_ = caption_string;
  } else {
    clear_has_caption_string();
    caption_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 caption_height = 2;
inline bool RendererStyle_InfolistStyle::has_caption_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle_InfolistStyle::clear_caption_height() {
  caption_height_ = 0;
  clear_has_caption_height();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::caption_height() const {
  return caption_height_;
}
inline void RendererStyle_InfolistStyle::set_caption_height(::google::protobuf::int32 value) {
  set_has_caption_height();
  caption_height_ = value;
}

// optional int32 caption_padding = 3;
inline bool RendererStyle_InfolistStyle::has_caption_padding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_padding() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_padding() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle_InfolistStyle::clear_caption_padding() {
  caption_padding_ = 0;
  clear_has_caption_padding();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::caption_padding() const {
  return caption_padding_;
}
inline void RendererStyle_InfolistStyle::set_caption_padding(::google::protobuf::int32 value) {
  set_has_caption_padding();
  caption_padding_ = value;
}

// optional int32 window_border = 4;
inline bool RendererStyle_InfolistStyle::has_window_border() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_window_border() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle_InfolistStyle::clear_has_window_border() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle_InfolistStyle::clear_window_border() {
  window_border_ = 0;
  clear_has_window_border();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::window_border() const {
  return window_border_;
}
inline void RendererStyle_InfolistStyle::set_window_border(::google::protobuf::int32 value) {
  set_has_window_border();
  window_border_ = value;
}

// optional int32 row_rect_padding = 5;
inline bool RendererStyle_InfolistStyle::has_row_rect_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_row_rect_padding() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererStyle_InfolistStyle::clear_has_row_rect_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererStyle_InfolistStyle::clear_row_rect_padding() {
  row_rect_padding_ = 0;
  clear_has_row_rect_padding();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::row_rect_padding() const {
  return row_rect_padding_;
}
inline void RendererStyle_InfolistStyle::set_row_rect_padding(::google::protobuf::int32 value) {
  set_has_row_rect_padding();
  row_rect_padding_ = value;
}

// optional int32 window_width = 6;
inline bool RendererStyle_InfolistStyle::has_window_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_window_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RendererStyle_InfolistStyle::clear_has_window_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RendererStyle_InfolistStyle::clear_window_width() {
  window_width_ = 0;
  clear_has_window_width();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::window_width() const {
  return window_width_;
}
inline void RendererStyle_InfolistStyle::set_window_width(::google::protobuf::int32 value) {
  set_has_window_width();
  window_width_ = value;
}

// optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
inline bool RendererStyle_InfolistStyle::has_caption_style() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_style() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_style() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RendererStyle_InfolistStyle::clear_caption_style() {
  if (caption_style_ != NULL) caption_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_caption_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::caption_style() const {
  return caption_style_ != NULL ? *caption_style_ : *default_instance_->caption_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_caption_style() {
  set_has_caption_style();
  if (caption_style_ == NULL) caption_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  return caption_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_caption_style() {
  clear_has_caption_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = caption_style_;
  caption_style_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_caption_style(::mozc::renderer::RendererStyle_TextStyle* caption_style) {
  delete caption_style_;
  caption_style_ = caption_style;
  if (caption_style) {
    set_has_caption_style();
  } else {
    clear_has_caption_style();
  }
}

// optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
inline bool RendererStyle_InfolistStyle::has_title_style() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_title_style() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RendererStyle_InfolistStyle::clear_has_title_style() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RendererStyle_InfolistStyle::clear_title_style() {
  if (title_style_ != NULL) title_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_title_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::title_style() const {
  return title_style_ != NULL ? *title_style_ : *default_instance_->title_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_title_style() {
  set_has_title_style();
  if (title_style_ == NULL) title_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  return title_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_title_style() {
  clear_has_title_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = title_style_;
  title_style_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_title_style(::mozc::renderer::RendererStyle_TextStyle* title_style) {
  delete title_style_;
  title_style_ = title_style;
  if (title_style) {
    set_has_title_style();
  } else {
    clear_has_title_style();
  }
}

// optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
inline bool RendererStyle_InfolistStyle::has_description_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_description_style() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RendererStyle_InfolistStyle::clear_has_description_style() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RendererStyle_InfolistStyle::clear_description_style() {
  if (description_style_ != NULL) description_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_description_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::description_style() const {
  return description_style_ != NULL ? *description_style_ : *default_instance_->description_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_description_style() {
  set_has_description_style();
  if (description_style_ == NULL) description_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  return description_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_description_style() {
  clear_has_description_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = description_style_;
  description_style_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_description_style(::mozc::renderer::RendererStyle_TextStyle* description_style) {
  delete description_style_;
  description_style_ = description_style;
  if (description_style) {
    set_has_description_style();
  } else {
    clear_has_description_style();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
inline bool RendererStyle_InfolistStyle::has_border_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_border_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RendererStyle_InfolistStyle::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RendererStyle_InfolistStyle::clear_border_color() {
  if (border_color_ != NULL) border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::border_color() const {
  return border_color_ != NULL ? *border_color_ : *default_instance_->border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_border_color() {
  set_has_border_color();
  if (border_color_ == NULL) border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_border_color() {
  clear_has_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = border_color_;
  border_color_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color) {
  delete border_color_;
  border_color_ = border_color;
  if (border_color) {
    set_has_border_color();
  } else {
    clear_has_border_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
inline bool RendererStyle_InfolistStyle::has_caption_background_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_background_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_background_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RendererStyle_InfolistStyle::clear_caption_background_color() {
  if (caption_background_color_ != NULL) caption_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_caption_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::caption_background_color() const {
  return caption_background_color_ != NULL ? *caption_background_color_ : *default_instance_->caption_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_caption_background_color() {
  set_has_caption_background_color();
  if (caption_background_color_ == NULL) caption_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return caption_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_caption_background_color() {
  clear_has_caption_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = caption_background_color_;
  caption_background_color_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_caption_background_color(::mozc::renderer::RendererStyle_RGBAColor* caption_background_color) {
  delete caption_background_color_;
  caption_background_color_ = caption_background_color;
  if (caption_background_color) {
    set_has_caption_background_color();
  } else {
    clear_has_caption_background_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
inline bool RendererStyle_InfolistStyle::has_focused_background_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_focused_background_color() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RendererStyle_InfolistStyle::clear_has_focused_background_color() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RendererStyle_InfolistStyle::clear_focused_background_color() {
  if (focused_background_color_ != NULL) focused_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::focused_background_color() const {
  return focused_background_color_ != NULL ? *focused_background_color_ : *default_instance_->focused_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_focused_background_color() {
  set_has_focused_background_color();
  if (focused_background_color_ == NULL) focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return focused_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_focused_background_color() {
  clear_has_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_background_color_;
  focused_background_color_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color) {
  delete focused_background_color_;
  focused_background_color_ = focused_background_color;
  if (focused_background_color) {
    set_has_focused_background_color();
  } else {
    clear_has_focused_background_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
inline bool RendererStyle_InfolistStyle::has_focused_border_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_focused_border_color() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RendererStyle_InfolistStyle::clear_has_focused_border_color() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RendererStyle_InfolistStyle::clear_focused_border_color() {
  if (focused_border_color_ != NULL) focused_border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::focused_border_color() const {
  return focused_border_color_ != NULL ? *focused_border_color_ : *default_instance_->focused_border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_focused_border_color() {
  set_has_focused_border_color();
  if (focused_border_color_ == NULL) focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return focused_border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_focused_border_color() {
  clear_has_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_border_color_;
  focused_border_color_ = NULL;
  return temp;
}
inline void RendererStyle_InfolistStyle::set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color) {
  delete focused_border_color_;
  focused_border_color_ = focused_border_color;
  if (focused_border_color) {
    set_has_focused_border_color();
  } else {
    clear_has_focused_border_color();
  }
}

// -------------------------------------------------------------------

// RendererStyle

// optional int32 window_border = 1;
inline bool RendererStyle::has_window_border() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle::set_has_window_border() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle::clear_has_window_border() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle::clear_window_border() {
  window_border_ = 0;
  clear_has_window_border();
}
inline ::google::protobuf::int32 RendererStyle::window_border() const {
  return window_border_;
}
inline void RendererStyle::set_window_border(::google::protobuf::int32 value) {
  set_has_window_border();
  window_border_ = value;
}

// optional int32 footer_height = 2;
inline bool RendererStyle::has_footer_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle::set_has_footer_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle::clear_has_footer_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle::clear_footer_height() {
  footer_height_ = 0;
  clear_has_footer_height();
}
inline ::google::protobuf::int32 RendererStyle::footer_height() const {
  return footer_height_;
}
inline void RendererStyle::set_footer_height(::google::protobuf::int32 value) {
  set_has_footer_height();
  footer_height_ = value;
}

// optional int32 row_rect_padding = 3;
inline bool RendererStyle::has_row_rect_padding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle::set_has_row_rect_padding() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle::clear_has_row_rect_padding() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle::clear_row_rect_padding() {
  row_rect_padding_ = 0;
  clear_has_row_rect_padding();
}
inline ::google::protobuf::int32 RendererStyle::row_rect_padding() const {
  return row_rect_padding_;
}
inline void RendererStyle::set_row_rect_padding(::google::protobuf::int32 value) {
  set_has_row_rect_padding();
  row_rect_padding_ = value;
}

// optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
inline bool RendererStyle::has_border_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle::set_has_border_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle::clear_border_color() {
  if (border_color_ != NULL) border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::border_color() const {
  return border_color_ != NULL ? *border_color_ : *default_instance_->border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_border_color() {
  set_has_border_color();
  if (border_color_ == NULL) border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_border_color() {
  clear_has_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = border_color_;
  border_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color) {
  delete border_color_;
  border_color_ = border_color;
  if (border_color) {
    set_has_border_color();
  } else {
    clear_has_border_color();
  }
}

// optional string column_minimum_width_string = 5;
inline bool RendererStyle::has_column_minimum_width_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererStyle::set_has_column_minimum_width_string() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererStyle::clear_has_column_minimum_width_string() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererStyle::clear_column_minimum_width_string() {
  if (column_minimum_width_string_ != &::google::protobuf::internal::kEmptyString) {
    column_minimum_width_string_->clear();
  }
  clear_has_column_minimum_width_string();
}
inline const ::std::string& RendererStyle::column_minimum_width_string() const {
  return *column_minimum_width_string_;
}
inline void RendererStyle::set_column_minimum_width_string(const ::std::string& value) {
  set_has_column_minimum_width_string();
  if (column_minimum_width_string_ == &::google::protobuf::internal::kEmptyString) {
    column_minimum_width_string_ = new ::std::string;
  }
  column_minimum_width_string_->assign(value);
}
inline void RendererStyle::set_column_minimum_width_string(const char* value) {
  set_has_column_minimum_width_string();
  if (column_minimum_width_string_ == &::google::protobuf::internal::kEmptyString) {
    column_minimum_width_string_ = new ::std::string;
  }
  column_minimum_width_string_->assign(value);
}
inline void RendererStyle::set_column_minimum_width_string(const char* value, size_t size) {
  set_has_column_minimum_width_string();
  if (column_minimum_width_string_ == &::google::protobuf::internal::kEmptyString) {
    column_minimum_width_string_ = new ::std::string;
  }
  column_minimum_width_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RendererStyle::mutable_column_minimum_width_string() {
  set_has_column_minimum_width_string();
  if (column_minimum_width_string_ == &::google::protobuf::internal::kEmptyString) {
    column_minimum_width_string_ = new ::std::string;
  }
  return column_minimum_width_string_;
}
inline ::std::string* RendererStyle::release_column_minimum_width_string() {
  clear_has_column_minimum_width_string();
  if (column_minimum_width_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = column_minimum_width_string_;
    column_minimum_width_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RendererStyle::set_allocated_column_minimum_width_string(::std::string* column_minimum_width_string) {
  if (column_minimum_width_string_ != &::google::protobuf::internal::kEmptyString) {
    delete column_minimum_width_string_;
  }
  if (column_minimum_width_string) {
    set_has_column_minimum_width_string();
    column_minimum_width_string_ = column_minimum_width_string;
  } else {
    clear_has_column_minimum_width_string();
    column_minimum_width_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
inline int RendererStyle::text_styles_size() const {
  return text_styles_.size();
}
inline void RendererStyle::clear_text_styles() {
  text_styles_.Clear();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::text_styles(int index) const {
  return text_styles_.Get(index);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_text_styles(int index) {
  return text_styles_.Mutable(index);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::add_text_styles() {
  return text_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >&
RendererStyle::text_styles() const {
  return text_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >*
RendererStyle::mutable_text_styles() {
  return &text_styles_;
}

// repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
inline int RendererStyle::footer_border_colors_size() const {
  return footer_border_colors_.size();
}
inline void RendererStyle::clear_footer_border_colors() {
  footer_border_colors_.Clear();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_border_colors(int index) const {
  return footer_border_colors_.Get(index);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_border_colors(int index) {
  return footer_border_colors_.Mutable(index);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::add_footer_border_colors() {
  return footer_border_colors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >&
RendererStyle::footer_border_colors() const {
  return footer_border_colors_;
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >*
RendererStyle::mutable_footer_border_colors() {
  return &footer_border_colors_;
}

// optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
inline bool RendererStyle::has_footer_style() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RendererStyle::set_has_footer_style() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RendererStyle::clear_has_footer_style() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RendererStyle::clear_footer_style() {
  if (footer_style_ != NULL) footer_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_footer_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::footer_style() const {
  return footer_style_ != NULL ? *footer_style_ : *default_instance_->footer_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_footer_style() {
  set_has_footer_style();
  if (footer_style_ == NULL) footer_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  return footer_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::release_footer_style() {
  clear_has_footer_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = footer_style_;
  footer_style_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_footer_style(::mozc::renderer::RendererStyle_TextStyle* footer_style) {
  delete footer_style_;
  footer_style_ = footer_style;
  if (footer_style) {
    set_has_footer_style();
  } else {
    clear_has_footer_style();
  }
}

// optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
inline bool RendererStyle::has_footer_sub_label_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RendererStyle::set_has_footer_sub_label_style() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RendererStyle::clear_has_footer_sub_label_style() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RendererStyle::clear_footer_sub_label_style() {
  if (footer_sub_label_style_ != NULL) footer_sub_label_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_footer_sub_label_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::footer_sub_label_style() const {
  return footer_sub_label_style_ != NULL ? *footer_sub_label_style_ : *default_instance_->footer_sub_label_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_footer_sub_label_style() {
  set_has_footer_sub_label_style();
  if (footer_sub_label_style_ == NULL) footer_sub_label_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  return footer_sub_label_style_;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::release_footer_sub_label_style() {
  clear_has_footer_sub_label_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = footer_sub_label_style_;
  footer_sub_label_style_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_footer_sub_label_style(::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style) {
  delete footer_sub_label_style_;
  footer_sub_label_style_ = footer_sub_label_style;
  if (footer_sub_label_style) {
    set_has_footer_sub_label_style();
  } else {
    clear_has_footer_sub_label_style();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
inline bool RendererStyle::has_focused_background_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RendererStyle::set_has_focused_background_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RendererStyle::clear_has_focused_background_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RendererStyle::clear_focused_background_color() {
  if (focused_background_color_ != NULL) focused_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::focused_background_color() const {
  return focused_background_color_ != NULL ? *focused_background_color_ : *default_instance_->focused_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_focused_background_color() {
  set_has_focused_background_color();
  if (focused_background_color_ == NULL) focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return focused_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_focused_background_color() {
  clear_has_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_background_color_;
  focused_background_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color) {
  delete focused_background_color_;
  focused_background_color_ = focused_background_color;
  if (focused_background_color) {
    set_has_focused_background_color();
  } else {
    clear_has_focused_background_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
inline bool RendererStyle::has_focused_border_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RendererStyle::set_has_focused_border_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RendererStyle::clear_has_focused_border_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RendererStyle::clear_focused_border_color() {
  if (focused_border_color_ != NULL) focused_border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::focused_border_color() const {
  return focused_border_color_ != NULL ? *focused_border_color_ : *default_instance_->focused_border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_focused_border_color() {
  set_has_focused_border_color();
  if (focused_border_color_ == NULL) focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return focused_border_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_focused_border_color() {
  clear_has_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_border_color_;
  focused_border_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color) {
  delete focused_border_color_;
  focused_border_color_ = focused_border_color;
  if (focused_border_color) {
    set_has_focused_border_color();
  } else {
    clear_has_focused_border_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
inline bool RendererStyle::has_scrollbar_background_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RendererStyle::set_has_scrollbar_background_color() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RendererStyle::clear_has_scrollbar_background_color() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RendererStyle::clear_scrollbar_background_color() {
  if (scrollbar_background_color_ != NULL) scrollbar_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_scrollbar_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::scrollbar_background_color() const {
  return scrollbar_background_color_ != NULL ? *scrollbar_background_color_ : *default_instance_->scrollbar_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_scrollbar_background_color() {
  set_has_scrollbar_background_color();
  if (scrollbar_background_color_ == NULL) scrollbar_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return scrollbar_background_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_scrollbar_background_color() {
  clear_has_scrollbar_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = scrollbar_background_color_;
  scrollbar_background_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_scrollbar_background_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color) {
  delete scrollbar_background_color_;
  scrollbar_background_color_ = scrollbar_background_color;
  if (scrollbar_background_color) {
    set_has_scrollbar_background_color();
  } else {
    clear_has_scrollbar_background_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
inline bool RendererStyle::has_scrollbar_indicator_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RendererStyle::set_has_scrollbar_indicator_color() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RendererStyle::clear_has_scrollbar_indicator_color() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RendererStyle::clear_scrollbar_indicator_color() {
  if (scrollbar_indicator_color_ != NULL) scrollbar_indicator_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_scrollbar_indicator_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::scrollbar_indicator_color() const {
  return scrollbar_indicator_color_ != NULL ? *scrollbar_indicator_color_ : *default_instance_->scrollbar_indicator_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_scrollbar_indicator_color() {
  set_has_scrollbar_indicator_color();
  if (scrollbar_indicator_color_ == NULL) scrollbar_indicator_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return scrollbar_indicator_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_scrollbar_indicator_color() {
  clear_has_scrollbar_indicator_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = scrollbar_indicator_color_;
  scrollbar_indicator_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_scrollbar_indicator_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color) {
  delete scrollbar_indicator_color_;
  scrollbar_indicator_color_ = scrollbar_indicator_color;
  if (scrollbar_indicator_color) {
    set_has_scrollbar_indicator_color();
  } else {
    clear_has_scrollbar_indicator_color();
  }
}

// optional int32 scrollbar_width = 14;
inline bool RendererStyle::has_scrollbar_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RendererStyle::set_has_scrollbar_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RendererStyle::clear_has_scrollbar_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RendererStyle::clear_scrollbar_width() {
  scrollbar_width_ = 0;
  clear_has_scrollbar_width();
}
inline ::google::protobuf::int32 RendererStyle::scrollbar_width() const {
  return scrollbar_width_;
}
inline void RendererStyle::set_scrollbar_width(::google::protobuf::int32 value) {
  set_has_scrollbar_width();
  scrollbar_width_ = value;
}

// optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
inline bool RendererStyle::has_footer_top_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RendererStyle::set_has_footer_top_color() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RendererStyle::clear_has_footer_top_color() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RendererStyle::clear_footer_top_color() {
  if (footer_top_color_ != NULL) footer_top_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_footer_top_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_top_color() const {
  return footer_top_color_ != NULL ? *footer_top_color_ : *default_instance_->footer_top_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_top_color() {
  set_has_footer_top_color();
  if (footer_top_color_ == NULL) footer_top_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return footer_top_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_footer_top_color() {
  clear_has_footer_top_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = footer_top_color_;
  footer_top_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_footer_top_color(::mozc::renderer::RendererStyle_RGBAColor* footer_top_color) {
  delete footer_top_color_;
  footer_top_color_ = footer_top_color;
  if (footer_top_color) {
    set_has_footer_top_color();
  } else {
    clear_has_footer_top_color();
  }
}

// optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
inline bool RendererStyle::has_footer_bottom_color() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RendererStyle::set_has_footer_bottom_color() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RendererStyle::clear_has_footer_bottom_color() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RendererStyle::clear_footer_bottom_color() {
  if (footer_bottom_color_ != NULL) footer_bottom_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_footer_bottom_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_bottom_color() const {
  return footer_bottom_color_ != NULL ? *footer_bottom_color_ : *default_instance_->footer_bottom_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_bottom_color() {
  set_has_footer_bottom_color();
  if (footer_bottom_color_ == NULL) footer_bottom_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  return footer_bottom_color_;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_footer_bottom_color() {
  clear_has_footer_bottom_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = footer_bottom_color_;
  footer_bottom_color_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_footer_bottom_color(::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color) {
  delete footer_bottom_color_;
  footer_bottom_color_ = footer_bottom_color;
  if (footer_bottom_color) {
    set_has_footer_bottom_color();
  } else {
    clear_has_footer_bottom_color();
  }
}

// optional string logo_file_name = 17;
inline bool RendererStyle::has_logo_file_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RendererStyle::set_has_logo_file_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RendererStyle::clear_has_logo_file_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RendererStyle::clear_logo_file_name() {
  if (logo_file_name_ != &::google::protobuf::internal::kEmptyString) {
    logo_file_name_->clear();
  }
  clear_has_logo_file_name();
}
inline const ::std::string& RendererStyle::logo_file_name() const {
  return *logo_file_name_;
}
inline void RendererStyle::set_logo_file_name(const ::std::string& value) {
  set_has_logo_file_name();
  if (logo_file_name_ == &::google::protobuf::internal::kEmptyString) {
    logo_file_name_ = new ::std::string;
  }
  logo_file_name_->assign(value);
}
inline void RendererStyle::set_logo_file_name(const char* value) {
  set_has_logo_file_name();
  if (logo_file_name_ == &::google::protobuf::internal::kEmptyString) {
    logo_file_name_ = new ::std::string;
  }
  logo_file_name_->assign(value);
}
inline void RendererStyle::set_logo_file_name(const char* value, size_t size) {
  set_has_logo_file_name();
  if (logo_file_name_ == &::google::protobuf::internal::kEmptyString) {
    logo_file_name_ = new ::std::string;
  }
  logo_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RendererStyle::mutable_logo_file_name() {
  set_has_logo_file_name();
  if (logo_file_name_ == &::google::protobuf::internal::kEmptyString) {
    logo_file_name_ = new ::std::string;
  }
  return logo_file_name_;
}
inline ::std::string* RendererStyle::release_logo_file_name() {
  clear_has_logo_file_name();
  if (logo_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logo_file_name_;
    logo_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RendererStyle::set_allocated_logo_file_name(::std::string* logo_file_name) {
  if (logo_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_file_name_;
  }
  if (logo_file_name) {
    set_has_logo_file_name();
    logo_file_name_ = logo_file_name;
  } else {
    clear_has_logo_file_name();
    logo_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
inline bool RendererStyle::has_infolist_style() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RendererStyle::set_has_infolist_style() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RendererStyle::clear_has_infolist_style() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RendererStyle::clear_infolist_style() {
  if (infolist_style_ != NULL) infolist_style_->::mozc::renderer::RendererStyle_InfolistStyle::Clear();
  clear_has_infolist_style();
}
inline const ::mozc::renderer::RendererStyle_InfolistStyle& RendererStyle::infolist_style() const {
  return infolist_style_ != NULL ? *infolist_style_ : *default_instance_->infolist_style_;
}
inline ::mozc::renderer::RendererStyle_InfolistStyle* RendererStyle::mutable_infolist_style() {
  set_has_infolist_style();
  if (infolist_style_ == NULL) infolist_style_ = new ::mozc::renderer::RendererStyle_InfolistStyle;
  return infolist_style_;
}
inline ::mozc::renderer::RendererStyle_InfolistStyle* RendererStyle::release_infolist_style() {
  clear_has_infolist_style();
  ::mozc::renderer::RendererStyle_InfolistStyle* temp = infolist_style_;
  infolist_style_ = NULL;
  return temp;
}
inline void RendererStyle::set_allocated_infolist_style(::mozc::renderer::RendererStyle_InfolistStyle* infolist_style) {
  delete infolist_style_;
  infolist_style_ = infolist_style;
  if (infolist_style) {
    set_has_infolist_style();
  } else {
    clear_has_infolist_style();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace renderer
}  // namespace mozc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_renderer_2frenderer_5fstyle_2eproto__INCLUDED
